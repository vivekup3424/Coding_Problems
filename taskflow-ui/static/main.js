/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={209:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=t.ConnectionEvents=t.KeusRealtimeCommunication=void 0;const i=n(r(8476));t.KeusRealtimeCommunication=i.default;const s=r(8986);Object.defineProperty(t,"ConnectionEvents",{enumerable:!0,get:function(){return s.ConnectionEvents}});const o=r(4235);Object.defineProperty(t,"Buffer",{enumerable:!0,get:function(){return o.Buffer}}),window.KeusRealtimeCommunication=i.default,window.Buffer=o.Buffer,window.ConnectionEvents=s.ConnectionEvents},4235:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.headers=t.Buffer=t.JSONCodec=t.credsAuthenticator=t.nkeyAuthenticator=t.Empty=t.jwtAuthenticator=t.connect=t.StringCodec=t.Events=void 0;const n=r(3859);Object.defineProperty(t,"StringCodec",{enumerable:!0,get:function(){return n.StringCodec}}),Object.defineProperty(t,"jwtAuthenticator",{enumerable:!0,get:function(){return n.jwtAuthenticator}}),Object.defineProperty(t,"credsAuthenticator",{enumerable:!0,get:function(){return n.credsAuthenticator}}),Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return n.connect}}),Object.defineProperty(t,"Empty",{enumerable:!0,get:function(){return n.Empty}}),Object.defineProperty(t,"nkeyAuthenticator",{enumerable:!0,get:function(){return n.nkeyAuthenticator}}),Object.defineProperty(t,"JSONCodec",{enumerable:!0,get:function(){return n.JSONCodec}}),Object.defineProperty(t,"Events",{enumerable:!0,get:function(){return n.Events}}),Object.defineProperty(t,"headers",{enumerable:!0,get:function(){return n.headers}});const i=r(5313);Object.defineProperty(t,"Buffer",{enumerable:!0,get:function(){return i.Buffer}})},8476:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8986),i=r(4235),s=r(4235);class o extends n.IKIOTPRealtimeCommunication{asyncDelay(e){return new Promise((function(t){setTimeout((function(){t()}),e)}))}constructor(e){super(e),this.token="",this.tokenFlag=!1,this.creds="",this.credsFlag=!1,this.nkey="",this.user="",this.pass="",this.connection=null,this.sc=(0,i.StringCodec)(),this.jc=(0,i.JSONCodec)(),this.metadata="",this._config=e,this.host=e.host,this.port=e.port,e.token?(this.token=e.token,this.tokenFlag=!0):e.creds&&e.user&&e.pass?(this.user=e.user,this.pass=e.pass,this.creds=e.creds,this.credsFlag=!0):this.nkey=(null==e?void 0:e.nkey)||""}async attachConnectionListeners(){var e,t;if(null===(e=this.connection)||void 0===e?void 0:e.status){this.emit(n.ConnectionEvents.CONNECTED);for await(const e of null===(t=this.connection)||void 0===t?void 0:t.status())switch(e.type){case s.Events.Disconnect:this.emit(n.ConnectionEvents.RECONNECTING);break;case s.Events.Reconnect:this.emit(n.ConnectionEvents.CONNECTED);break;case s.Events.Error:this.emit(n.ConnectionEvents.ERROR,e.data);break;case s.Events.Update:console.log("Cluster Updated",e.data)}}}async setMetaData(e){this.metadata=e}async connect(){var e,t,r,n;try{this.tokenFlag?this.connection=await(0,i.connect)({servers:`${this.host}:${this.port}`,token:this.token,maxReconnectAttempts:(null===(e=this._config.reconnection)||void 0===e?void 0:e.maxAttempts)||-1,reconnectTimeWait:(null===(t=this._config.reconnection)||void 0===t?void 0:t.delay)||2e3,reconnect:!0}):this.credsFlag?this.connection=await(0,i.connect)({servers:`${this.host}:${this.port}`,user:this.user,pass:this.pass,authenticator:(0,i.credsAuthenticator)((new TextEncoder).encode(this.creds)),maxReconnectAttempts:5,reconnect:!0}):this.connection=await(0,i.connect)({servers:`${this.host}:${this.port}`,authenticator:(0,i.nkeyAuthenticator)((new TextEncoder).encode(this.nkey)),maxReconnectAttempts:(null===(r=this._config.reconnection)||void 0===r?void 0:r.maxAttempts)||-1,reconnectTimeWait:(null===(n=this._config.reconnection)||void 0===n?void 0:n.delay)||2e3,reconnect:!0}),this.attachConnectionListeners()}catch(e){console.log("from conect",e),await this.asyncDelay(4e3),this.connect()}return!0}async processBinaryProvidedRPC(e,t,r){var n;for await(const e of r)t(e.data,null===(n=e.headers)||void 0===n?void 0:n.get("metadata")).then((function(t){e.respond(t)})).catch((function(t){e.respond(s.Buffer.from(t.toString()))}))}async processJsonProvidedRPC(e,t,r){var i;for await(const e of r){let r,s=e.data,o=null===(i=e.headers)||void 0===i?void 0:i.get("metadata");try{r=this.jc.decode(s)}catch(e){console.log(e)}t(r,o).then((t=>{let r=this.jc.encode(t);e.respond(r)})).catch((t=>{e.respond(this.jc.encode({success:!1,error:n.Errors.InvalidDataFormat.getErrorCode()}))}))}}async processStringProvidedRPC(e,t,r){var n;for await(const e of r)t(this.sc.decode(e.data),null===(n=e.headers)||void 0===n?void 0:n.get("metadata")).then((t=>{e.respond(this.sc.encode(t))})).catch((t=>{e.response(this.sc.encode(t.toString()))}))}async stringProvideRPC(e,t){var r;try{let i=await(null===(r=this.connection)||void 0===r?void 0:r.subscribe(e));if(!i)throw new n.Errors.InvalidConnection;return this.processStringProvidedRPC(e,t,i),!0}catch(e){return console.log("from providerpc",e),!1}}async jsonProvideRPC(e,t){var r;try{let i=await(null===(r=this.connection)||void 0===r?void 0:r.subscribe(e));if(!i)throw new n.Errors.InvalidConnection;return this.processJsonProvidedRPC(e,t,i),!0}catch(e){return console.log("from providerpc",e),!1}}async binaryProvideRPC(e,t){var r;try{let i=await(null===(r=this.connection)||void 0===r?void 0:r.subscribe(e));if(!i)throw new n.Errors.InvalidConnection;return this.processBinaryProvidedRPC(e,t,i),!0}catch(e){return console.log("from providerpc",e),!1}}async unsubscribe(){var e;try{await(null===(e=this.connection)||void 0===e?void 0:e.drain())}catch(e){console.log("from unsubsribe",e)}}async binaryCallRPC(e,t){var r;try{if(!this.connection)throw new n.Errors.InvalidConnection;let o={timeout:3e4};""!==this.metadata&&(o.headers=(0,i.headers)(),o.headers.append("metadata",this.metadata));let a=await(null===(r=this.connection)||void 0===r?void 0:r.request(e,t,o));return{success:!0,data:s.Buffer.from(a.data)}}catch(e){return e&&503==e.code?{success:!1,error:new n.Errors.RPCNotAvailable}:{success:!1,error:e.toString()}}}async jsonCallRPC(e,t){var r;try{if(!this.connection)throw new n.Errors.InvalidConnection;let s=this.jc.encode(t),o={timeout:3e4};""!==this.metadata&&(o.headers=(0,i.headers)(),o.headers.append("metadata",this.metadata));let a=await(null===(r=this.connection)||void 0===r?void 0:r.request(e,s,o));return{success:!0,data:this.jc.decode(a.data)}}catch(e){return e&&503==e.code?{success:!1,error:new n.Errors.RPCNotAvailable}:{success:!1,error:e.toString()}}}async stringCallRPC(e,t){var r;try{if(!this.connection)throw new n.Errors.InvalidConnection;let s={timeout:3e4};""!==this.metadata&&(s.headers=(0,i.headers)(),s.headers.append("metadata",this.metadata));let o=this.sc.encode(t),a=await(null===(r=this.connection)||void 0===r?void 0:r.request(e,o,s));return{success:!0,data:this.sc.decode(a.data)}}catch(e){return e&&503==e.code?{success:!1,error:new n.Errors.RPCNotAvailable}:{success:!1,error:e.toString()}}}async emitStringEvents(e,t){for await(const r of e)t(this.sc.decode(r.data))}async stringListenToEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;const r=await this.connection.subscribe(e);return!!r&&(this.emitStringEvents(r,t),!0)}catch(e){return console.log("from listen",e),!1}}async stringPublishEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;return await this.connection.publish(e,this.sc.encode(t)),!0}catch(e){return console.log("from publish",e),!1}}async emitJSONEvents(e,t){for await(const r of e)t(this.jc.decode(r.data))}async jsonListenToEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;const r=await this.connection.subscribe(e);return!!r&&(this.emitJSONEvents(r,t),!0)}catch(e){return console.log("from listen",e),!1}}async jsonPublishEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;return await this.connection.publish(e,this.jc.encode(t)),!0}catch(e){return console.log("from publish",e),!1}}async emitBinaryEvents(e,t){for await(const r of e)t(s.Buffer.from(r.data))}async binaryListenToEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;const r=await this.connection.subscribe(e);return!!r&&(this.emitBinaryEvents(r,t),!0)}catch(e){return console.log("from listen",e),!1}}async binaryPublishEvents(e,t){try{if(!this.connection)throw new n.Errors.InvalidConnection;return await this.connection.publish(e,t),!0}catch(e){return console.log("from publish",e),!1}}}t.default=o},8986:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IKIOTPRealtimeCommunication=t.Errors=t.ConnectionEvents=void 0;const n=r(7324);t.ConnectionEvents={CONNECTING:"Connecting",RECONNECTING:"Reconnecting",CONNECTED:"Connected",ERROR:"Error"},function(e){class t extends Error{constructor(){super("Invalid Connection")}static getErrorCode(){return 301}}e.InvalidConnection=t;class r extends Error{constructor(){super("RPC Not Available")}static getErrorCode(){return 302}}e.RPCNotAvailable=r;class n extends Error{constructor(){super("Invalid Request or Response Data")}static getErrorCode(){return 303}}e.InvalidDataFormat=n}(t.Errors||(t.Errors={}));class i extends n.EventEmitter{constructor(e){super()}}t.IKIOTPRealtimeCommunication=i},6446:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,s=a(e),o=s[0],c=s[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,o,c)),l=0,h=c>0?o-4:o;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;return 2===c&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,u[l++]=255&t),1===c&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t),u},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,s=[],o=16383,a=0,u=n-i;a<u;a+=o)s.push(c(e,a,a+o>u?u:a+o));return 1===i?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),s.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)r[o]=s[o],n[s.charCodeAt(o)]=o;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,n){for(var i,s,o=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},5313:(e,t,r)=>{"use strict";const n=r(6446),i=r(7164),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=c,t.SlowBuffer=function(e){return+e!=e&&(e=0),c.alloc(+e)},t.INSPECT_MAX_BYTES=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return u(e,t,r)}function u(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|y(e,t);let n=a(r);const i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return f(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);const i=function(e){if(c.isBuffer(e)){const t=0|p(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||Y(e.length)?a(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return l(e),a(e<0?0:0|p(e))}function d(e){const t=e.length<0?0:0|p(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,c.prototype),n}function p(e){if(e>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|e}function y(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return G(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return z(e).length;default:if(i)return n?-1:G(e).length;t=(""+t).toLowerCase(),i=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return j(this,t,r);case"latin1":case"binary":return x(this,t,r);case"base64":return O(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function b(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Y(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,i){let s,o=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,r/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){let n=-1;for(s=r;s<a;s++)if(u(e,s)===u(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===c)return n*o}else-1!==n&&(s-=s-n),n=-1}else for(r+c>a&&(r=a-c),s=r;s>=0;s--){let r=!0;for(let n=0;n<c;n++)if(u(e,s+n)!==u(t,n)){r=!1;break}if(r)return s}return-1}function _(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const s=t.length;let o;for(n>s/2&&(n=s/2),o=0;o<n;++o){const n=parseInt(t.substr(2*o,2),16);if(Y(n))return o;e[r+o]=n}return o}function w(e,t,r,n){return V(G(t,e.length-r),e,r,n)}function E(e,t,r,n){return V(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return V(z(t),e,r,n)}function S(e,t,r,n){return V(function(e,t){let r,n,i;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(t,e.length-r),e,r,n)}function O(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(i+o<=r){let r,n,a,c;switch(o){case 1:t<128&&(s=t);break;case 2:r=e[i+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(s=c));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(c=(15&t)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(s=c));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(s=c))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),i+=o}return function(e){const t=e.length;if(t<=C)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=C));return r}(n)}t.kMaxLength=o,c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return u(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return l(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},c.allocUnsafe=function(e){return h(e)},c.allocUnsafeSlow=function(e){return h(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(W(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,s=Math.min(r,n);i<s;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=c.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(W(t,Uint8Array))i+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},c.byteLength=y,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(c.prototype[s]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,i){if(W(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0);const a=Math.min(s,o),u=this.slice(n,i),l=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==l[e]){s=u[e],o=l[e];break}return s<o?-1:o<s?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return b(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return b(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let s=!1;for(;;)switch(n){case"hex":return _(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return P(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const C=4096;function j(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function x(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function I(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=X[e[n]];return i}function k(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function M(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,r,n,i,s){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function T(e,t,r,n,i){q(t,n,i,e,r,7);let s=Number(t&BigInt(4294967295));e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function R(e,t,r,n,i){q(t,n,i,e,r,7);let s=Number(t&BigInt(4294967295));e[r+7]=s,s>>=8,e[r+6]=s,s>>=8,e[r+5]=s,s>>=8,e[r+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function U(e,t,r,n,i,s){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(e,t,r,n,s){return t=+t,r>>>=0,s||U(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function F(e,t,r,n,s){return t=+t,r>>>=0,s||U(e,0,r,8),i.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||M(e,t,this.length);let n=this[e],i=1,s=0;for(;++s<t&&(i*=256);)n+=this[e+s]*i;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||M(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||M(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||M(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||M(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||M(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||M(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=Q((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||M(e,t,this.length);let n=this[e],i=1,s=0;for(;++s<t&&(i*=256);)n+=this[e+s]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||M(e,t,this.length);let n=t,i=1,s=this[e+--n];for(;n>0&&(i*=256);)s+=this[e+--n]*i;return i*=128,s>=i&&(s-=Math.pow(2,8*t)),s},c.prototype.readInt8=function(e,t){return e>>>=0,t||M(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||M(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||M(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||M(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||M(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=Q((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=Q((function(e){H(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||K(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||M(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||M(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||M(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||M(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||N(this,e,t,r,Math.pow(2,8*r)-1,0);let i=1,s=0;for(this[t]=255&e;++s<r&&(i*=256);)this[t+s]=e/i&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||N(this,e,t,r,Math.pow(2,8*r)-1,0);let i=r-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=Q((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(e,t=0){return R(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);N(this,e,t,r,n-1,-n)}let i=0,s=1,o=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===o&&0!==this[t+i-1]&&(o=1),this[t+i]=(e/s>>0)-o&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);N(this,e,t,r,n-1,-n)}let i=r-1,s=1,o=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===o&&0!==this[t+i+1]&&(o=1),this[t+i]=(e/s>>0)-o&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=Q((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(e,t=0){return R(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return B(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return B(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return F(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return F(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const s=c.isBuffer(e)?e:c.from(e,n),o=s.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=s[i%o]}return this};const L={};function $(e,t,r){L[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function D(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,n,i,s){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new L.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){H(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||K(t,e.length-(r+1))}(n,i,s)}function H(e,t){if("number"!=typeof e)throw new L.ERR_INVALID_ARG_TYPE(t,"number",e)}function K(e,t,r){if(Math.floor(e)!==e)throw H(e,r),new L.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new L.ERR_BUFFER_OUT_OF_BOUNDS;throw new L.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}$("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),$("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),$("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=D(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=D(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const J=/[^+/0-9A-Za-z-_]/g;function G(e,t){let r;t=t||1/0;const n=e.length;let i=null;const s=[];for(let o=0;o<n;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function z(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(J,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const X=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function Q(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},2864:(e,t,r)=>{"use strict";var n=r(6653),i=r(5592),s=i(n("String.prototype.indexOf"));e.exports=function(e,t){var r=n(e,!!t);return"function"==typeof r&&s(e,".prototype.")>-1?i(r):r}},5592:(e,t,r)=>{"use strict";var n=r(2698),i=r(6653),s=i("%Function.prototype.apply%"),o=i("%Function.prototype.call%"),a=i("%Reflect.apply%",!0)||n.call(o,s),c=i("%Object.getOwnPropertyDescriptor%",!0),u=i("%Object.defineProperty%",!0),l=i("%Math.max%");if(u)try{u({},"a",{value:1})}catch(e){u=null}e.exports=function(e){var t=a(n,o,arguments);return c&&u&&c(t,"length").configurable&&u(t,"length",{value:1+l(0,e.length-(arguments.length-1))}),t};var h=function(){return a(n,s,arguments)};u?u(e.exports,"apply",{value:h}):e.exports.apply=h},7324:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,s),n(r)}function s(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}y(e,t,s,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&y(e,"error",t,{once:!0})}(e,i)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var i,s,o,u;if(a(r),void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),o=s[t]),void 0===o)o=s[t]=r,++e._eventsCount;else if("function"==typeof o?o=s[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(i=c(e))>0&&o.length>i&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=o.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=l.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):p(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function y(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(s){n.once&&e.removeEventListener(t,i),r(s)}))}}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,s=this._events;if(void 0!==s)i=i&&void 0===s.error;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=s[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var u=c.length,l=p(c,u);for(r=0;r<u;++r)n(l[r],this,t)}return!0},s.prototype.addListener=function(e,t){return u(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return u(this,e,t,!0)},s.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,i,s,o;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,s=r.length-1;s>=0;s--)if(r[s]===t||r[s].listener===t){o=r[s].listener,i=s;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,s=Object.keys(r);for(n=0;n<s.length;++n)"removeListener"!==(i=s[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},s.prototype.listenerCount=f,s.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},98:(e,t,r)=>{"use strict";var n=r(9861),i=Object.prototype.toString,s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r){if(!n(t))throw new TypeError("iterator must be a function");var o;arguments.length>=3&&(o=r),"[object Array]"===i.call(e)?function(e,t,r){for(var n=0,i=e.length;n<i;n++)s.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))}(e,t,o):"string"==typeof e?function(e,t,r){for(var n=0,i=e.length;n<i;n++)null==r?t(e.charAt(n),n,e):t.call(r,e.charAt(n),n,e)}(e,t,o):function(e,t,r){for(var n in e)s.call(e,n)&&(null==r?t(e[n],n,e):t.call(r,e[n],n,e))}(e,t,o)}},9748:e=>{"use strict";var t=Array.prototype.slice,r=Object.prototype.toString;e.exports=function(e){var n=this;if("function"!=typeof n||"[object Function]"!==r.call(n))throw new TypeError("Function.prototype.bind called on incompatible "+n);for(var i,s=t.call(arguments,1),o=Math.max(0,n.length-s.length),a=[],c=0;c<o;c++)a.push("$"+c);if(i=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var r=n.apply(this,s.concat(t.call(arguments)));return Object(r)===r?r:this}return n.apply(e,s.concat(t.call(arguments)))})),n.prototype){var u=function(){};u.prototype=n.prototype,i.prototype=new u,u.prototype=null}return i}},2698:(e,t,r)=>{"use strict";var n=r(9748);e.exports=Function.prototype.bind||n},6653:(e,t,r)=>{"use strict";var n,i=SyntaxError,s=Function,o=TypeError,a=function(e){try{return s('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var u=function(){throw new o},l=c?function(){try{return u}catch(e){try{return c(arguments,"callee").get}catch(e){return u}}}():u,h=r(2770)(),d=r(7877)(),f=Object.getPrototypeOf||(d?function(e){return e.__proto__}:null),p={},y="undefined"!=typeof Uint8Array&&f?f(Uint8Array):n,m={"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":h&&f?f([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":p,"%AsyncGenerator%":p,"%AsyncGeneratorFunction%":p,"%AsyncIteratorPrototype%":p,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":s,"%GeneratorFunction%":p,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":h&&f?f(f([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&h&&f?f((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&h&&f?f((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":h&&f?f(""[Symbol.iterator]()):n,"%Symbol%":h?Symbol:n,"%SyntaxError%":i,"%ThrowTypeError%":l,"%TypedArray%":y,"%TypeError%":o,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};if(f)try{null.error}catch(e){var g=f(f(e));m["%Error.prototype%"]=g}var b=function e(t){var r;if("%AsyncFunction%"===t)r=a("async function () {}");else if("%GeneratorFunction%"===t)r=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)r=a("async function* () {}");else if("%AsyncGenerator%"===t){var n=e("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&f&&(r=f(i.prototype))}return m[t]=r,r},v={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},_=r(2698),w=r(2786),E=_.call(Function.call,Array.prototype.concat),P=_.call(Function.apply,Array.prototype.splice),S=_.call(Function.call,String.prototype.replace),O=_.call(Function.call,String.prototype.slice),A=_.call(Function.call,RegExp.prototype.exec),C=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,j=/\\(\\)?/g,x=function(e,t){var r,n=e;if(w(v,n)&&(n="%"+(r=v[n])[0]+"%"),w(m,n)){var s=m[n];if(s===p&&(s=b(n)),void 0===s&&!t)throw new o("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:s}}throw new i("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new o("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new o('"allowMissing" argument must be a boolean');if(null===A(/^%?[^%]*%?$/,e))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(e){var t=O(e,0,1),r=O(e,-1);if("%"===t&&"%"!==r)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==t)throw new i("invalid intrinsic syntax, expected opening `%`");var n=[];return S(e,C,(function(e,t,r,i){n[n.length]=r?S(i,j,"$1"):t||e})),n}(e),n=r.length>0?r[0]:"",s=x("%"+n+"%",t),a=s.name,u=s.value,l=!1,h=s.alias;h&&(n=h[0],P(r,E([0,1],h)));for(var d=1,f=!0;d<r.length;d+=1){var p=r[d],y=O(p,0,1),g=O(p,-1);if(('"'===y||"'"===y||"`"===y||'"'===g||"'"===g||"`"===g)&&y!==g)throw new i("property names with quotes must have matching quotes");if("constructor"!==p&&f||(l=!0),w(m,a="%"+(n+="."+p)+"%"))u=m[a];else if(null!=u){if(!(p in u)){if(!t)throw new o("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&d+1>=r.length){var b=c(u,p);u=(f=!!b)&&"get"in b&&!("originalValue"in b.get)?b.get:u[p]}else f=w(u,p),u=u[p];f&&!l&&(m[a]=u)}}return u}},8158:(e,t,r)=>{"use strict";var n=r(6653)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(e){n=null}e.exports=n},7877:e=>{"use strict";var t={foo:{}},r=Object;e.exports=function(){return{__proto__:t}.foo===t.foo&&!({__proto__:null}instanceof r)}},2770:(e,t,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,i=r(9578);e.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}},9578:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),r=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var n=Object.getOwnPropertySymbols(e);if(1!==n.length||n[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},3342:(e,t,r)=>{"use strict";var n=r(9578);e.exports=function(){return n()&&!!Symbol.toStringTag}},2786:(e,t,r)=>{"use strict";var n=r(2698);e.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},7164:(e,t)=>{t.read=function(e,t,r,n,i){var s,o,a=8*i-n-1,c=(1<<a)-1,u=c>>1,l=-7,h=r?i-1:0,d=r?-1:1,f=e[t+h];for(h+=d,s=f&(1<<-l)-1,f>>=-l,l+=a;l>0;s=256*s+e[t+h],h+=d,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=n;l>0;o=256*o+e[t+h],h+=d,l-=8);if(0===s)s=1-u;else{if(s===c)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,n),s-=u}return(f?-1:1)*o*Math.pow(2,s-n)},t.write=function(e,t,r,n,i,s){var o,a,c,u=8*s-i-1,l=(1<<u)-1,h=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:s-1,p=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=l):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(o++,c/=2),o+h>=l?(a=0,o=l):o+h>=1?(a=(t*c-1)*Math.pow(2,i),o+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),o=0));i>=8;e[r+f]=255&a,f+=p,a/=256,i-=8);for(o=o<<i|a,u+=i;u>0;e[r+f]=255&o,f+=p,o/=256,u-=8);e[r+f-p]|=128*y}},7483:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},9462:(e,t,r)=>{"use strict";var n=r(3342)(),i=r(2864)("Object.prototype.toString"),s=function(e){return!(n&&e&&"object"==typeof e&&Symbol.toStringTag in e)&&"[object Arguments]"===i(e)},o=function(e){return!!s(e)||null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Array]"!==i(e)&&"[object Function]"===i(e.callee)},a=function(){return s(arguments)}();s.isLegacyArguments=o,e.exports=a?s:o},9861:e=>{"use strict";var t,r,n=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw r}}),r={},i((function(){throw 42}),null,t)}catch(e){e!==r&&(i=null)}else i=null;var s=/^\s*class\b/,o=function(e){try{var t=n.call(e);return s.test(t)}catch(e){return!1}},a=function(e){try{return!o(e)&&(n.call(e),!0)}catch(e){return!1}},c=Object.prototype.toString,u="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),h=function(){return!1};if("object"==typeof document){var d=document.all;c.call(d)===c.call(document.all)&&(h=function(e){if((l||!e)&&(void 0===e||"object"==typeof e))try{var t=c.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=i?function(e){if(h(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{i(e,null,t)}catch(e){if(e!==r)return!1}return!o(e)&&a(e)}:function(e){if(h(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(u)return a(e);if(o(e))return!1;var t=c.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&a(e)}},7136:(e,t,r)=>{"use strict";var n,i=Object.prototype.toString,s=Function.prototype.toString,o=/^\s*(?:function)?\*/,a=r(3342)(),c=Object.getPrototypeOf;e.exports=function(e){if("function"!=typeof e)return!1;if(o.test(s.call(e)))return!0;if(!a)return"[object GeneratorFunction]"===i.call(e);if(!c)return!1;if(void 0===n){var t=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(e){}}();n=!!t&&c(t)}return c(e)===n}},7485:(e,t,r)=>{"use strict";var n=r(1792);e.exports=function(e){return!!n(e)}},4961:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.OrderedPullConsumerImpl=t.PullConsumerImpl=t.OrderedConsumerMessages=t.PullConsumerMessagesImpl=t.ConsumerDebugEvents=t.ConsumerEvents=void 0;const s=r(3024),o=r(7751),a=r(7349),c=r(4629),u=r(9550),l=r(9668),h=r(6221),d=r(5738);var f,p,y;!function(e){e[e.Unset=-1]="Unset",e[e.Consume=0]="Consume",e[e.Fetch=1]="Fetch"}(f||(f={})),function(e){e.HeartbeatsMissed="heartbeats_missed"}(p=t.ConsumerEvents||(t.ConsumerEvents={})),function(e){e.DebugEvent="debug",e.Discard="discard",e.Next="next"}(y=t.ConsumerDebugEvents||(t.ConsumerDebugEvents={}));class m extends c.QueuedIteratorImpl{constructor(e,t,r=!1){super(),this.consumer=e,this.opts=this.parseOptions(t,r),this.callback=t.callback||null,this.noIterator="function"==typeof this.callback,this.monitor=null,this.pong=null,this.pending={msgs:0,bytes:0,requests:0},this.refilling=r,this.stack=(new Error).stack.split("\n").slice(1).join("\n"),this.timeout=null,this.inbox=(0,u.createInbox)(),this.listeners=[];const{max_messages:s,max_bytes:o,idle_heartbeat:c,threshold_bytes:d,threshold_messages:f}=this.opts;this.closed().then((()=>{if(this.cleanupHandler)try{this.cleanupHandler()}catch(e){}}));const{sub:m}=this;m&&m.unsubscribe(),this.sub=e.api.nc.subscribe(this.inbox,{callback:(e,t)=>{var r,n,i,c;if(e)this.stop();else{if(null===(r=this.monitor)||void 0===r||r.work(),t.subject===this.inbox){if((0,a.isHeartbeatMsg)(t))return;const e=null===(n=t.headers)||void 0===n?void 0:n.code,r=(null===(c=null===(i=t.headers)||void 0===i?void 0:i.description)||void 0===c?void 0:c.toLowerCase())||"unknown",{msgsLeft:s,bytesLeft:o}=this.parseDiscard(t.headers);if(s>0||o>0)this.pending.msgs-=s,this.pending.bytes-=o,this.pending.requests--,this.notify(y.Discard,{msgsLeft:s,bytesLeft:o});else{const t=()=>{const t=new u.NatsError(r,`${e}`);return t.stack+=`\n\n${this.stack}`,t};if(400===e){const e=t();this._push((()=>{this.stop(e)}))}else if(409===e&&"consumer deleted"===r){const e=t();this.stop(e)}else this.notify(y.DebugEvent,`${e} ${r}`)}}else this._push((0,h.toJsMsg)(t)),this.received++,this.pending.msgs&&this.pending.msgs--,this.pending.bytes&&(this.pending.bytes-=t.size());if(0===this.pending.msgs&&0===this.pending.bytes&&(this.pending.requests=0),this.refilling){if(s&&this.pending.msgs<=f||o&&this.pending.bytes<=d){const e=this.pullOptions();this.pull(e)}}else 0===this.pending.requests&&this._push((()=>{this.stop()}))}}}),this.sub.closed.then((()=>{this.sub.draining&&this._push((()=>{this.stop()}))})),c&&(this.monitor=new l.IdleHeartbeat(c,(e=>(this.notify(p.HeartbeatsMissed,e),this.resetPending().then((()=>{})).catch((()=>{})),!1)),{maxOut:2})),(()=>{n(this,void 0,void 0,(function*(){var t,r,n,s,o;const a=e.api.nc.status();this.statusIterator=a;try{for(var c,l=!0,h=i(a);!(t=(c=yield h.next()).done);){s=c.value,l=!1;try{switch(s.type){case u.Events.Disconnect:null===(o=this.monitor)||void 0===o||o.cancel();break;case u.Events.Reconnect:this.resetPending().then((e=>{var t;e&&(null===(t=this.monitor)||void 0===t||t.restart())})).catch((()=>{}))}}finally{l=!0}}}catch(e){r={error:e}}finally{try{l||t||!(n=h.return)||(yield n.call(h))}finally{if(r)throw r.error}}}))})(),this.pull(this.pullOptions())}_push(e){if(this.callback){const t="function"==typeof e?e:null;try{t?t():this.callback(e)}catch(e){this.stop(e)}}else super.push(e)}notify(e,t){this.listeners.length>0&&(()=>{this.listeners.forEach((r=>{r.done||r.push({type:e,data:t})}))})()}resetPending(){return this.consumer.info().then((e=>(this.pending.msgs=0,this.pending.bytes=0,this.pending.requests=0,this.pull(this.pullOptions()),!0))).catch((e=>("consumer not found"===e.message&&this.stop(e),!1)))}pull(e){var t,r;this.pending.bytes+=null!==(t=e.max_bytes)&&void 0!==t?t:0,this.pending.msgs+=null!==(r=e.batch)&&void 0!==r?r:0,this.pending.requests++;const n=this.consumer.api.nc;this._push((()=>{n.publish(`${this.consumer.api.prefix}.CONSUMER.MSG.NEXT.${this.consumer.stream}.${this.consumer.name}`,this.consumer.api.jc.encode(e),{reply:this.inbox}),this.notify(y.Next,e)}))}pullOptions(){return{batch:this.opts.max_messages-this.pending.msgs,max_bytes:this.opts.max_bytes-this.pending.bytes,idle_heartbeat:(0,a.nanos)(this.opts.idle_heartbeat),expires:(0,a.nanos)(this.opts.expires)}}parseDiscard(e){const t={msgsLeft:0,bytesLeft:0},r=null==e?void 0:e.get("Nats-Pending-Messages");r&&(t.msgsLeft=parseInt(r));const n=null==e?void 0:e.get("Nats-Pending-Bytes");return n&&(t.bytesLeft=parseInt(n)),t}trackTimeout(e){this.timeout=e}close(){return this.stop(),this.iterClosed}closed(){return this.iterClosed}clearTimers(){var e,t;null===(e=this.monitor)||void 0===e||e.cancel(),this.monitor=null,null===(t=this.timeout)||void 0===t||t.cancel(),this.timeout=null}setCleanupHandler(e){this.cleanupHandler=e}stop(e){var t,r;null===(t=this.sub)||void 0===t||t.unsubscribe(),this.clearTimers(),null===(r=this.statusIterator)||void 0===r||r.stop(),this._push((()=>{super.stop(e),this.listeners.forEach((e=>{e.stop()}))}))}parseOptions(e,t=!1){const r=e||{};if(r.max_messages=r.max_messages||0,r.max_bytes=r.max_bytes||0,0!==r.max_messages&&0!==r.max_bytes)throw new Error("only specify one of max_messages or max_bytes");if(0===r.max_messages&&(r.max_messages=100),r.expires=r.expires||3e4,r.expires<1e3)throw new Error("expires should be at least 1000ms");if(r.idle_heartbeat=r.idle_heartbeat||r.expires/2,r.idle_heartbeat=r.idle_heartbeat>3e4?3e4:r.idle_heartbeat,t){const e=Math.round(.75*r.max_messages)||1;r.threshold_messages=r.threshold_messages||e;const t=Math.round(.75*r.max_bytes)||1;r.threshold_bytes=r.threshold_bytes||t}return r}status(){const e=new c.QueuedIteratorImpl;return this.listeners.push(e),Promise.resolve(e)}}t.PullConsumerMessagesImpl=m;class g extends c.QueuedIteratorImpl{constructor(){super()}setSource(e){this.src&&(this.src.setCleanupHandler(),this.src.stop()),this.src=e,this.src.setCleanupHandler((()=>{this.close().catch()}))}stop(e){var t;null===(t=this.src)||void 0===t||t.stop(e),super.stop(e)}close(){return this.stop(),this.iterClosed}status(){return Promise.reject(new Error("ordered consumers don't report consumer status"))}}t.OrderedConsumerMessages=g;class b{constructor(e,t){this.api=e,this._info=t,this.stream=t.stream_name,this.name=t.name}consume(e={max_messages:100,expires:3e4}){return Promise.resolve(new m(this,e,!0))}fetch(e={max_messages:100,expires:3e4}){const t=new m(this,e,!1),r=Math.round(1.05*t.opts.expires),n=(0,s.timeout)(r);return t.closed().then((()=>{n.cancel()})),n.catch((()=>{t.close().catch()})),t.trackTimeout(n),Promise.resolve(t)}next(e={expires:3e4}){const t=(0,s.deferred)(),r=e;r.max_messages=1;const o=new m(this,r,!1),a=Math.round(1.05*o.opts.expires);a>=6e4&&(()=>n(this,void 0,void 0,(function*(){var e,r,n,s;try{for(var a,c=!0,u=i(yield o.status());!(e=(a=yield u.next()).done);){s=a.value,c=!1;try{const e=s;if(e.type===p.HeartbeatsMissed&&e.data>=2){t.reject(new Error("consumer missed heartbeats"));break}}finally{c=!0}}}catch(e){r={error:e}}finally{try{c||e||!(n=u.return)||(yield n.call(u))}finally{if(r)throw r.error}}})))().catch(),(()=>n(this,void 0,void 0,(function*(){var e,r,n,s;try{for(var a,c=!0,u=i(o);!(e=(a=yield u.next()).done);){s=a.value,c=!1;try{const e=s;t.resolve(e);break}finally{c=!0}}}catch(e){r={error:e}}finally{try{c||e||!(n=u.return)||(yield n.call(u))}finally{if(r)throw r.error}}})))().catch();const c=(0,s.timeout)(a);return o.closed().then((()=>{t.resolve(null),c.cancel()})).catch((e=>{t.reject(e)})),c.catch((e=>{t.resolve(null),o.close().catch()})),o.trackTimeout(c),t}delete(){const{stream_name:e,name:t}=this._info;return this.api.delete(e,t)}info(e=!1){if(e)return Promise.resolve(this._info);const{stream_name:t,name:r}=this._info;return this.api.info(t,r).then((e=>(this._info=e,this._info)))}}t.PullConsumerImpl=b,t.OrderedPullConsumerImpl=class{constructor(e,t,r={}){this.api=e,this.stream=t,this.cursor={stream_seq:1,deliver_seq:0},this.namePrefix=o.nuid.next(),this.serial=0,this.currentConsumer=null,this.userCallback=null,this.iter=null,this.type=f.Unset,this.consumerOpts=r,this.startSeq=this.consumerOpts.opt_start_seq||0,this.cursor.stream_seq=this.startSeq>0?this.startSeq-1:0}getConsumerOpts(e){this.serial++,e=0===e?1:e;const t={name:`${this.namePrefix}_${this.serial}`,deliver_policy:d.DeliverPolicy.StartSequence,opt_start_seq:e,ack_policy:d.AckPolicy.None,inactive_threshold:(0,a.nanos)(3e5),num_replicas:1};return!0===this.consumerOpts.headers_only&&(t.headers_only=!0),Array.isArray(this.consumerOpts.filterSubjects)&&(t.filter_subjects=this.consumerOpts.filterSubjects),"string"==typeof this.consumerOpts.filterSubjects&&(t.filter_subject=this.consumerOpts.filterSubjects),e===this.startSeq+1&&(t.deliver_policy=this.consumerOpts.deliver_policy||d.DeliverPolicy.StartSequence,this.consumerOpts.deliver_policy!==d.DeliverPolicy.LastPerSubject&&this.consumerOpts.deliver_policy!==d.DeliverPolicy.New&&this.consumerOpts.deliver_policy!==d.DeliverPolicy.Last||(delete t.opt_start_seq,t.deliver_policy=this.consumerOpts.deliver_policy),t.deliver_policy===d.DeliverPolicy.LastPerSubject&&void 0===t.filter_subjects&&void 0===t.filter_subject&&(t.filter_subject=">"),this.consumerOpts.opt_start_time&&(delete t.opt_start_seq,t.deliver_policy=d.DeliverPolicy.StartTime,t.opt_start_time=this.consumerOpts.opt_start_time),this.consumerOpts.inactive_threshold&&(t.inactive_threshold=(0,a.nanos)(this.consumerOpts.inactive_threshold))),t}resetConsumer(e=0){return n(this,void 0,void 0,(function*(){if(this.consumer)for(;;)try{yield this.delete();break}catch(e){if("TIMEOUT"!==e.message)throw e}e=0===e?1:e,this.cursor.deliver_seq=0;const t=this.getConsumerOpts(e);let r;for(;;)try{r=yield this.api.add(this.stream,t);break}catch(e){if("TIMEOUT"!==e.message)throw e}return r}))}internalHandler(e){return t=>{var r;if(this.serial!==e)return;const n=t.info.deliverySequence;n===this.cursor.deliver_seq+1?(this.cursor.deliver_seq=n,this.cursor.stream_seq=t.info.streamSequence,this.userCallback?this.userCallback(t):null===(r=this.iter)||void 0===r||r.push(t)):this.reset(this.opts)}}reset(e={max_messages:100,expires:3e4},t=!1){return n(this,void 0,void 0,(function*(){this.currentConsumer=yield this.resetConsumer(this.cursor.stream_seq+1),null===this.iter&&(this.iter=new g),this.consumer=new b(this.api,this.currentConsumer),e.callback=this.internalHandler(this.serial);let r=null;if(this.type===f.Fetch&&t)r=yield this.consumer.fetch(e);else{if(this.type!==f.Consume)return Promise.reject("reset called with unset consumer type");r=yield this.consumer.consume(e)}return this.iter.setSource(r),this.iter}))}consume(e={max_messages:100,expires:3e4}){if(this.type===f.Fetch)return Promise.reject(new Error("ordered consumer initialized as fetch"));if(this.type===f.Consume)return Promise.reject(new Error("ordered consumer doesn't support concurrent consume"));const{callback:t}=e;return t&&(this.userCallback=t),this.type=f.Consume,this.opts=e,this.reset(e)}fetch(e={max_messages:100,expires:3e4}){var t;if(this.type===f.Consume)return Promise.reject(new Error("ordered consumer already initialized as consume"));if(!1===(null===(t=this.iter)||void 0===t?void 0:t.done))return Promise.reject(new Error("ordered consumer doesn't support concurrent fetch"));const{callback:r}=e;return r&&(this.userCallback=r),this.type=f.Fetch,this.opts=e,this.iter=new g,this.reset(e,!0)}next(e={expires:3e4}){return n(this,void 0,void 0,(function*(){const t=(0,s.deferred)(),r=e;return r.max_messages=1,r.callback=e=>{this.userCallback=null,t.resolve(e)},(yield this.fetch(r)).iterClosed.then((()=>{t.resolve(null)})).catch((e=>{t.reject(e)})),t}))}delete(){return this.currentConsumer?this.api.delete(this.stream,this.currentConsumer.name).then((e=>Promise.resolve(e))).catch((e=>Promise.reject(e))).finally((()=>{this.currentConsumer=null})):Promise.resolve(!1)}info(e){return n(this,void 0,void 0,(function*(){return null==this.currentConsumer?(this.currentConsumer=yield this.resetConsumer(this.serial),Promise.resolve(this.currentConsumer)):e&&this.currentConsumer?Promise.resolve(this.currentConsumer):this.api.info(this.stream,this.currentConsumer.name)}))}}},5261:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConsumerEvents=t.ConsumerDebugEvents=t.StorageType=t.RetentionPolicy=t.ReplayPolicy=t.DiscardPolicy=t.DeliverPolicy=t.AckPolicy=t.RepublishHeaders=t.JsHeaders=t.isConsumerOptsBuilder=t.DirectMsgHeaders=t.consumerOpts=t.AdvisoryKind=t.nanos=t.millis=t.isHeartbeatMsg=t.isFlowControlMsg=t.checkJsError=void 0;var n=r(7349);Object.defineProperty(t,"checkJsError",{enumerable:!0,get:function(){return n.checkJsError}}),Object.defineProperty(t,"isFlowControlMsg",{enumerable:!0,get:function(){return n.isFlowControlMsg}}),Object.defineProperty(t,"isHeartbeatMsg",{enumerable:!0,get:function(){return n.isHeartbeatMsg}}),Object.defineProperty(t,"millis",{enumerable:!0,get:function(){return n.millis}}),Object.defineProperty(t,"nanos",{enumerable:!0,get:function(){return n.nanos}});var i=r(2548);Object.defineProperty(t,"AdvisoryKind",{enumerable:!0,get:function(){return i.AdvisoryKind}}),Object.defineProperty(t,"consumerOpts",{enumerable:!0,get:function(){return i.consumerOpts}}),Object.defineProperty(t,"DirectMsgHeaders",{enumerable:!0,get:function(){return i.DirectMsgHeaders}}),Object.defineProperty(t,"isConsumerOptsBuilder",{enumerable:!0,get:function(){return i.isConsumerOptsBuilder}}),Object.defineProperty(t,"JsHeaders",{enumerable:!0,get:function(){return i.JsHeaders}}),Object.defineProperty(t,"RepublishHeaders",{enumerable:!0,get:function(){return i.RepublishHeaders}});var s=r(5738);Object.defineProperty(t,"AckPolicy",{enumerable:!0,get:function(){return s.AckPolicy}}),Object.defineProperty(t,"DeliverPolicy",{enumerable:!0,get:function(){return s.DeliverPolicy}}),Object.defineProperty(t,"DiscardPolicy",{enumerable:!0,get:function(){return s.DiscardPolicy}}),Object.defineProperty(t,"ReplayPolicy",{enumerable:!0,get:function(){return s.ReplayPolicy}}),Object.defineProperty(t,"RetentionPolicy",{enumerable:!0,get:function(){return s.RetentionPolicy}}),Object.defineProperty(t,"StorageType",{enumerable:!0,get:function(){return s.StorageType}});var o=r(4961);Object.defineProperty(t,"ConsumerDebugEvents",{enumerable:!0,get:function(){return o.ConsumerDebugEvents}}),Object.defineProperty(t,"ConsumerEvents",{enumerable:!0,get:function(){return o.ConsumerEvents}})},5738:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultConsumer=t.ReplayPolicy=t.AckPolicy=t.DeliverPolicy=t.StorageType=t.DiscardPolicy=t.RetentionPolicy=void 0;const n=r(7349);var i,s,o,a,c,u;(u=t.RetentionPolicy||(t.RetentionPolicy={})).Limits="limits",u.Interest="interest",u.Workqueue="workqueue",(c=t.DiscardPolicy||(t.DiscardPolicy={})).Old="old",c.New="new",(a=t.StorageType||(t.StorageType={})).File="file",a.Memory="memory",function(e){e.All="all",e.Last="last",e.New="new",e.StartSequence="by_start_sequence",e.StartTime="by_start_time",e.LastPerSubject="last_per_subject"}(i=t.DeliverPolicy||(t.DeliverPolicy={})),function(e){e.None="none",e.All="all",e.Explicit="explicit",e.NotSet=""}(s=t.AckPolicy||(t.AckPolicy={})),function(e){e.Instant="instant",e.Original="original"}(o=t.ReplayPolicy||(t.ReplayPolicy={})),t.defaultConsumer=function(e,t={}){return Object.assign({name:e,deliver_policy:i.All,ack_policy:s.Explicit,ack_wait:(0,n.nanos)(3e4),replay_policy:o.Instant},t)}},5798:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BaseApiClient=t.defaultJsOptions=void 0;const i=r(3164),s=r(2941),o=r(3024),a=r(7349);function c(e){return(e=e||{}).domain&&(e.apiPrefix=`$JS.${e.domain}.API`,delete e.domain),(0,o.extend)({apiPrefix:"$JS.API",timeout:5e3},e)}t.defaultJsOptions=c,t.BaseApiClient=class{constructor(e,t){this.nc=e,this.opts=c(t),this._parseOpts(),this.prefix=this.opts.apiPrefix,this.timeout=this.opts.timeout,this.jc=(0,s.JSONCodec)()}getOptions(){return Object.assign({},this.opts)}_parseOpts(){let e=this.opts.apiPrefix;if(!e||0===e.length)throw new Error("invalid empty prefix");"."===e[e.length-1]&&(e=e.substr(0,e.length-1)),this.opts.apiPrefix=e}_request(e,t=null,r){return n(this,void 0,void 0,(function*(){(r=r||{}).timeout=this.timeout;let n=i.Empty;t&&(n=this.jc.encode(t));const s=yield this.nc.request(e,n,r);return this.parseJsResponse(s)}))}findStream(e){return n(this,void 0,void 0,(function*(){const t={subject:e},r=yield this._request(`${this.prefix}.STREAM.NAMES`,t);if(!r.streams||1!==r.streams.length)throw new Error("no stream matches subject");return r.streams[0]}))}getConnection(){return this.nc}parseJsResponse(e){const t=this.jc.decode(e.data),r=t;if(r.error){const e=(0,a.checkJsErrorCode)(r.error.code,r.error.description);if(null!==e)throw e.api_error=r.error,e}return t}}},1739:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.JetStreamSubscriptionImpl=t.JetStreamClientImpl=void 0;const i=r(1740),s=r(5798),o=r(7349),a=r(8442),c=r(6221),u=r(1449),l=r(4629),h=r(3024),d=r(4076),f=r(6635),p=r(6369),y=r(3851),m=r(9668),g=r(2645),b=r(2548),v=r(9550),_=r(5738);var w;!function(e){e.MsgIdHdr="Nats-Msg-Id",e.ExpectedStreamHdr="Nats-Expected-Stream",e.ExpectedLastSeqHdr="Nats-Expected-Last-Sequence",e.ExpectedLastMsgIdHdr="Nats-Expected-Last-Msg-Id",e.ExpectedLastSubjectSequenceHdr="Nats-Expected-Last-Subject-Sequence"}(w||(w={}));class E{constructor(e){this.js=e}kv(e,t={}){const r=this.js,{ok:n,min:i}=r.nc.features.get(p.Feature.JS_KV);return n?t.bindOnly?f.Bucket.bind(this.js,e):f.Bucket.create(this.js,e,t):Promise.reject(new Error(`kv is only supported on servers ${i} or better`))}os(e,t={}){var r;if(I(this.js.nc),"function"!=typeof(null===(r=null===crypto||void 0===crypto?void 0:crypto.subtle)||void 0===r?void 0:r.digest))return Promise.reject(new Error("objectstore: unable to calculate hashes - crypto.subtle.digest with sha256 support is required"));const n=this.js,{ok:i,min:s}=n.nc.features.get(p.Feature.JS_OBJECTSTORE);return i?y.ObjectStoreImpl.create(this.js,e,t):Promise.reject(new Error(`objectstore is only supported on servers ${s} or better`))}}class P extends s.BaseApiClient{constructor(e,t){super(e,t),this.consumerAPI=new a.ConsumerAPIImpl(e,t),this.streamAPI=new g.StreamAPIImpl(e,t),this.consumers=new g.ConsumersImpl(this.consumerAPI),this.streams=new g.StreamsImpl(this.streamAPI)}jetstreamManager(){return this.nc.jetstreamManager(this.opts)}get apiPrefix(){return this.prefix}get views(){return new E(this)}publish(e,t=i.Empty,r){return n(this,void 0,void 0,(function*(){(r=r||{}).expect=r.expect||{};const n=(null==r?void 0:r.headers)||(0,d.headers)();r&&(r.msgID&&n.set(w.MsgIdHdr,r.msgID),r.expect.lastMsgID&&n.set(w.ExpectedLastMsgIdHdr,r.expect.lastMsgID),r.expect.streamName&&n.set(w.ExpectedStreamHdr,r.expect.streamName),"number"==typeof r.expect.lastSequence&&n.set(w.ExpectedLastSeqHdr,`${r.expect.lastSequence}`),"number"==typeof r.expect.lastSubjectSequence&&n.set(w.ExpectedLastSubjectSequenceHdr,`${r.expect.lastSubjectSequence}`));const s=r.timeout||this.timeout,o={};s&&(o.timeout=s),r&&(o.headers=n);let a,{retries:c,retry_delay:u}=r;c=c||1,u=u||250;for(let r=0;r<c;r++)try{a=yield this.nc.request(e,t,o);break}catch(e){if(!("503"===e.code&&r+1<c))throw e;yield(0,h.delay)(u)}const l=this.parseJsResponse(a);if(""===l.stream)throw i.NatsError.errorForCode(v.ErrorCode.JetStreamInvalidAck);return l.duplicate=!!l.duplicate&&l.duplicate,l}))}pull(e,t,r=0){return n(this,void 0,void 0,(function*(){(0,o.validateStreamName)(e),(0,o.validateDurableName)(t);let n=this.timeout;r>n&&(n=r);const i={batch:1,no_wait:0===(r=r<0?0:(0,o.nanos)(r)),expires:r},s=yield this.nc.request(`${this.prefix}.CONSUMER.MSG.NEXT.${e}.${t}`,this.jc.encode(i),{noMux:!0,timeout:n}),a=(0,o.checkJsError)(s);if(a)throw a;return(0,c.toJsMsg)(s)}))}fetch(e,t,r={}){var s;(0,o.validateStreamName)(e),(0,o.validateDurableName)(t);let a=null;const u=(null!==(s=r.max_bytes)&&void 0!==s?s:0)>0;let d=0;const f=u?r.max_bytes:0;let y=null;const g={};if(g.batch=r.batch||1,f){const e=this.nc.features.get(p.Feature.JS_PULL_MAX_BYTES);if(!e.ok)throw new Error(`max_bytes is only supported on servers ${e.min} or better`);g.max_bytes=f}g.no_wait=r.no_wait||!1,g.no_wait&&g.expires&&(g.expires=0);const b=r.expires||0;if(b&&(g.expires=(0,o.nanos)(b)),0===b&&!1===g.no_wait)throw new Error("expires or no_wait is required");const _=r.idle_heartbeat||0;_&&(g.idle_heartbeat=(0,o.nanos)(_),!0===r.delay_heartbeat&&(g.idle_heartbeat=(0,o.nanos)(4*_)));const w=new l.QueuedIteratorImpl,E=g.batch;let P=0;w.protocolFilterFn=(e,t=!1)=>{const r=e;return!(0,o.isHeartbeatMsg)(r.msg)||(null==y||y.work(),!1)},w.dispatchedFn=e=>{if(e){if(u&&(d+=e.data.length),P++,a&&0===e.info.pending)return;(1===w.getPending()&&0===e.info.pending||E===P||f>0&&d>=f)&&w.stop()}};const S=(0,v.createInbox)(this.nc.options.inboxPrefix),O=this.nc.subscribe(S,{max:r.batch,callback:(e,t)=>{null===e&&(e=(0,o.checkJsError)(t)),null!==e?(a&&(a.cancel(),a=null),(0,v.isNatsError)(e)?w.stop(null===j(e)?void 0:e):w.stop(e)):(null==y||y.work(),w.received++,w.push((0,c.toJsMsg)(t)))}});return b&&(a=(0,h.timeout)(b),a.catch((()=>{O.isClosed()||(O.drain().catch((()=>{})),a=null),y&&y.cancel()}))),(()=>n(this,void 0,void 0,(function*(){try{_&&(y=new m.IdleHeartbeat(_,(e=>(w.push((()=>{w.err=new i.NatsError(`${o.Js409Errors.IdleHeartbeatMissed}: ${e}`,v.ErrorCode.JetStreamIdleHeartBeat)})),!0))))}catch(e){}yield O.closed,null!==a&&(a.cancel(),a=null),y&&y.cancel(),w.stop()})))().catch(),this.nc.publish(`${this.prefix}.CONSUMER.MSG.NEXT.${e}.${t}`,this.jc.encode(g),{reply:S}),w}pullSubscribe(e,t=(0,b.consumerOpts)()){return n(this,void 0,void 0,(function*(){const r=yield this._processOptions(e,t);if(r.ordered)throw new Error("pull subscribers cannot be be ordered");if(r.config.deliver_subject)throw new Error("consumer info specifies deliver_subject - pull consumers cannot have deliver_subject set");const n=r.config.ack_policy;if(n===_.AckPolicy.None||n===_.AckPolicy.All)throw new Error("ack policy for pull consumers must be explicit");const i=this._buildTypedSubscriptionOpts(r),s=new O(this,r.deliver,i);s.info=r;try{yield this._maybeCreateConsumer(r)}catch(e){throw s.unsubscribe(),e}return s}))}subscribe(e,t=(0,b.consumerOpts)()){return n(this,void 0,void 0,(function*(){const r=yield this._processOptions(e,t);if(!r.isBind&&!r.config.deliver_subject)throw new Error("push consumer requires deliver_subject");const n=this._buildTypedSubscriptionOpts(r),i=new S(this,r.deliver,n);i.info=r;try{yield this._maybeCreateConsumer(r)}catch(e){throw i.unsubscribe(),e}return i._maybeSetupHbMonitoring(),i}))}_processOptions(e,t=(0,b.consumerOpts)()){var r,s;return n(this,void 0,void 0,(function*(){const n=(0,b.isConsumerOptsBuilder)(t)?t.getOpts():t;if(n.isBind=!!(0,b.isConsumerOptsBuilder)(t)&&t.isBind,n.flow_control={heartbeat_count:0,fc_count:0,consumer_restarts:0},n.ordered){if(n.ordered_consumer_sequence={stream_seq:0,delivery_seq:0},n.config.ack_policy!==_.AckPolicy.NotSet&&n.config.ack_policy!==_.AckPolicy.None)throw new i.NatsError("ordered consumer: ack_policy can only be set to 'none'",v.ErrorCode.ApiError);if(n.config.durable_name&&n.config.durable_name.length>0)throw new i.NatsError("ordered consumer: durable_name cannot be set",v.ErrorCode.ApiError);if(n.config.deliver_subject&&n.config.deliver_subject.length>0)throw new i.NatsError("ordered consumer: deliver_subject cannot be set",v.ErrorCode.ApiError);if(void 0!==n.config.max_deliver&&n.config.max_deliver>1)throw new i.NatsError("ordered consumer: max_deliver cannot be set",v.ErrorCode.ApiError);if(n.config.deliver_group&&n.config.deliver_group.length>0)throw new i.NatsError("ordered consumer: deliver_group cannot be set",v.ErrorCode.ApiError);n.config.deliver_subject=(0,v.createInbox)(this.nc.options.inboxPrefix),n.config.ack_policy=_.AckPolicy.None,n.config.max_deliver=1,n.config.flow_control=!0,n.config.idle_heartbeat=n.config.idle_heartbeat||(0,o.nanos)(5e3),n.config.ack_wait=(0,o.nanos)(792e5),n.config.mem_storage=!0,n.config.num_replicas=1}if(n.config.ack_policy===_.AckPolicy.NotSet&&(n.config.ack_policy=_.AckPolicy.All),n.api=this,n.config=n.config||{},n.stream=n.stream?n.stream:yield this.findStream(e),n.attached=!1,n.config.durable_name)try{const t=yield this.consumerAPI.info(n.stream,n.config.durable_name);if(t){if(t.config.filter_subject&&t.config.filter_subject!==e)throw new Error("subject does not match consumer");const i=null!==(r=n.config.deliver_group)&&void 0!==r?r:"";if(""===i&&!0===t.push_bound)throw new Error("duplicate subscription");const o=null!==(s=t.config.deliver_group)&&void 0!==s?s:"";if(i!==o)throw""===o?new Error("durable requires no queue group"):new Error(`durable requires queue group '${o}'`);n.last=t,n.config=t.config,n.attached=!0,n.config.durable_name||(n.name=t.name)}}catch(e){if("404"!==e.code)throw e}return n.attached||void 0!==n.config.filter_subject||void 0!==n.config.filter_subjects||(n.config.filter_subject=e),n.deliver=n.config.deliver_subject||(0,v.createInbox)(this.nc.options.inboxPrefix),n}))}_buildTypedSubscriptionOpts(e){const t={};return t.adapter=void 0===e.callbackFn?C:A,t.ingestionFilterFn=P.ingestionFn(e.ordered),t.protocolFilterFn=(e,t=!1)=>{const r=e;return!(0,o.isFlowControlMsg)(r.msg)||(t||r.msg.respond(),!1)},e.mack||e.config.ack_policy===_.AckPolicy.None||(t.dispatchedFn=x),e.callbackFn&&(t.callback=e.callbackFn),t.max=e.max||0,t.queue=e.queue,t}_maybeCreateConsumer(e){return n(this,void 0,void 0,(function*(){if(e.attached)return;if(e.isBind)throw new Error(`unable to bind - durable consumer ${e.config.durable_name} doesn't exist in ${e.stream}`);e.config=Object.assign({deliver_policy:_.DeliverPolicy.All,ack_policy:_.AckPolicy.Explicit,ack_wait:(0,o.nanos)(3e4),replay_policy:_.ReplayPolicy.Instant},e.config);const t=yield this.consumerAPI.add(e.stream,e.config);if(Array.isArray(e.config.filter_subjects&&!Array.isArray(t.config.filter_subjects)))throw new Error("jetstream server doesn't support consumers with multiple filter subjects");e.name=t.name,e.config=t.config,e.last=t}))}static ingestionFn(e){return(t,r)=>{var n;const i=r;if(!t)return{ingest:!1,protocol:!1};const s=t;if((0,o.checkJsError)(s.msg)||null===(n=i.monitor)||void 0===n||n.work(),(0,o.isHeartbeatMsg)(s.msg)){const t=!e||i._checkHbOrderConsumer(s.msg);return e||i.info.flow_control.heartbeat_count++,{ingest:t,protocol:!0}}return(0,o.isFlowControlMsg)(s.msg)?(i.info.flow_control.fc_count++,{ingest:!0,protocol:!0}):{ingest:!e||i._checkOrderedConsumer(t),protocol:!1}}}}t.JetStreamClientImpl=P;class S extends u.TypedSubscription{constructor(e,t,r){super(e.nc,t,r),this.js=e,this.monitor=null,this.sub.closed.then((()=>{this.monitor&&this.monitor.cancel()}))}set info(e){this.sub.info=e}get info(){return this.sub.info}_resetOrderedConsumer(e){if(null===this.info||this.sub.isClosed())return;const t=(0,v.createInbox)(this.js.nc.options.inboxPrefix);this.js.nc._resub(this.sub,t);const r=this.info;r.ordered_consumer_sequence.delivery_seq=0,r.flow_control.heartbeat_count=0,r.flow_control.fc_count=0,r.flow_control.consumer_restarts++,r.deliver=t,r.config.deliver_subject=t,r.config.deliver_policy=_.DeliverPolicy.StartSequence,r.config.opt_start_seq=e;const n={};n.stream_name=this.info.stream,n.config=r.config;const s=`${r.api.prefix}.CONSUMER.CREATE.${r.stream}`;this.js._request(s,n).then((e=>{const t=e;this.info.config=t.config,this.info.name=t.name})).catch((t=>{const n=new i.NatsError(`unable to recreate ordered consumer ${r.stream} at seq ${e}`,v.ErrorCode.RequestError,t);this.sub.callback(n,{})}))}_maybeSetupHbMonitoring(){var e,t;const r=(null===(t=null===(e=this.info)||void 0===e?void 0:e.config)||void 0===t?void 0:t.idle_heartbeat)||0;r&&this._setupHbMonitoring((0,o.millis)(r))}_setupHbMonitoring(e,t=0){const r={cancelAfter:0,maxOut:2};t&&(r.cancelAfter=t);const n=this.sub;this.monitor=new m.IdleHeartbeat(e,(e=>{var t,r,i;const s=(0,o.newJsErrorMsg)(409,`${o.Js409Errors.IdleHeartbeatMissed}: ${e}`,this.sub.subject);if(null===(t=this.info)||void 0===t?void 0:t.ordered){if(!this.js.nc.protocol.connected)return!1;const e=(null===(i=null===(r=this.info)||void 0===r?void 0:r.ordered_consumer_sequence)||void 0===i?void 0:i.stream_seq)||0;return this._resetOrderedConsumer(e+1),!1}return this.sub.callback(null,s),!n.noIterator}),r)}_checkHbOrderConsumer(e){const t=e.headers.get(b.JsHeaders.ConsumerStalledHdr);""!==t&&this.js.nc.publish(t);const r=parseInt(e.headers.get(b.JsHeaders.LastConsumerSeqHdr),10),n=this.info.ordered_consumer_sequence;return this.info.flow_control.heartbeat_count++,r!==n.delivery_seq&&this._resetOrderedConsumer(n.stream_seq+1),!1}_checkOrderedConsumer(e){const t=this.info.ordered_consumer_sequence,r=e.info.streamSequence,n=e.info.deliverySequence;return n!=t.delivery_seq+1?(this._resetOrderedConsumer(t.stream_seq+1),!1):(t.delivery_seq=n,t.stream_seq=r,!0)}destroy(){return n(this,void 0,void 0,(function*(){this.isClosed()||(yield this.drain());const e=this.sub.info,t=e.config.durable_name||e.name,r=`${e.api.prefix}.CONSUMER.DELETE.${e.stream}.${t}`;yield e.api._request(r)}))}consumerInfo(){return n(this,void 0,void 0,(function*(){const e=this.sub.info,t=e.config.durable_name||e.name,r=`${e.api.prefix}.CONSUMER.INFO.${e.stream}.${t}`,n=yield e.api._request(r);return e.last=n,n}))}}t.JetStreamSubscriptionImpl=S;class O extends S{constructor(e,t,r){super(e,t,r)}pull(e={batch:1}){var t,r;const{stream:n,config:i,name:s}=this.sub.info,a=null!==(t=i.durable_name)&&void 0!==t?t:s,c={};if(c.batch=e.batch||1,c.no_wait=e.no_wait||!1,(null!==(r=e.max_bytes)&&void 0!==r?r:0)>0){const t=this.js.nc.features.get(p.Feature.JS_PULL_MAX_BYTES);if(!t.ok)throw new Error(`max_bytes is only supported on servers ${t.min} or better`);c.max_bytes=e.max_bytes}let u=0;e.expires&&e.expires>0&&(u=e.expires,c.expires=(0,o.nanos)(u));let l=0;if(e.idle_heartbeat&&e.idle_heartbeat>0&&(l=e.idle_heartbeat,c.idle_heartbeat=(0,o.nanos)(l)),l&&0===u)throw new Error("idle_heartbeat requires expires");if(l>u)throw new Error("expires must be greater than idle_heartbeat");if(this.info){this.monitor&&this.monitor.cancel(),u&&l&&(this.monitor?this.monitor._change(l,u):this._setupHbMonitoring(l,u));const e=this.info.api,t=`${e.prefix}.CONSUMER.MSG.NEXT.${n}.${a}`,r=this.sub.subject;e.nc.publish(t,e.jc.encode(c),{reply:r})}}}function A(e,t){return e||(e=(0,o.checkJsError)(t))?[e,null]:[null,(0,c.toJsMsg)(t)]}function C(e,t){if(e)return[e,null];const r=(0,o.checkJsError)(t);return null!==r?[j(r),null]:[null,(0,c.toJsMsg)(t)]}function j(e){if(null!==e)switch(e.code){case v.ErrorCode.JetStream404NoMessages:case v.ErrorCode.JetStream408RequestTimeout:return null;case v.ErrorCode.JetStream409:return(0,o.isTerminal409)(e)?e:null;default:return e}return null}function x(e){e&&e.ack()}const I=(()=>{let e=!1;return t=>{var r;if(!e){e=!0;const{lang:n}=null===(r=null==t?void 0:t.protocol)||void 0===r?void 0:r.transport;n?console.log(`[33m >> jetstream's materialized views object store functionality in ${n} is beta functionality [0m`):console.log("[33m >> jetstream's materialized views object store functionality is beta functionality [0m")}}})()},9520:function(e,t){"use strict";var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},n=this&&this.__await||function(e){return this instanceof n?(this.v=e,this):new n(e)},i=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,s=r.apply(e,t||[]),o=[];return i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i;function a(e){s[e]&&(i[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=s[e](t)).value instanceof n?Promise.resolve(r.value.v).then(u,l):h(o[0][2],r)}catch(e){h(o[0][3],e)}var r}function u(e){c("next",e)}function l(e){c("throw",e)}function h(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.ListerImpl=void 0;class s{constructor(e,t,r,n){if(!e)throw new Error("subject is required");this.subject=e,this.jsm=r,this.offset=0,this.pageInfo={},this.filter=t,this.payload=n||{}}next(){return r(this,void 0,void 0,(function*(){if(this.err)return[];if(this.pageInfo&&this.offset>=this.pageInfo.total)return[];const e={offset:this.offset};this.payload&&Object.assign(e,this.payload);try{const t=yield this.jsm._request(this.subject,e,{timeout:this.jsm.timeout});return this.pageInfo=t,this.offset+=this.countResponse(t),this.filter(t)}catch(e){throw this.err=e,e}}))}countResponse(e){var t;switch(null==e?void 0:e.type){case"io.nats.jetstream.api.v1.stream_names_response":case"io.nats.jetstream.api.v1.stream_list_response":return e.streams.length;case"io.nats.jetstream.api.v1.consumer_list_response":return e.consumers.length;default:return console.error(`jslister.ts: unknown API response for paged output: ${null==e?void 0:e.type}`),(null===(t=e.streams)||void 0===t?void 0:t.length)||0}return 0}[Symbol.asyncIterator](){return i(this,arguments,(function*(){let e=yield n(this.next());for(;e.length>0;){for(const t of e)yield yield n(t);e=yield n(this.next())}}))}}t.ListerImpl=s},938:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.JetStreamManagerImpl=t.DirectMsgImpl=t.DirectStreamAPIImpl=void 0;const i=r(5798),s=r(2645),o=r(8442),a=r(4629),c=r(2548),u=r(7349),l=r(3164),h=r(2941);class d extends i.BaseApiClient{constructor(e,t){super(e,t)}getMessage(e,t){return n(this,void 0,void 0,(function*(){(0,u.validateStreamName)(e);let r=t;const{last_by_subj:n}=r;n&&(r=null);const i=r?this.jc.encode(r):l.Empty,s=this.opts.apiPrefix||"$JS.API",o=n?`${s}.DIRECT.GET.${e}.${n}`:`${s}.DIRECT.GET.${e}`,a=yield this.nc.request(o,i),c=(0,u.checkJsError)(a);if(c)return Promise.reject(c);const h=new f(a);return Promise.resolve(h)}))}}t.DirectStreamAPIImpl=d;class f{constructor(e){if(!e.headers)throw new Error("headers expected");this.data=e.data,this.header=e.headers}get subject(){return this.header.get(c.DirectMsgHeaders.Subject)}get seq(){const e=this.header.get(c.DirectMsgHeaders.Sequence);return"string"==typeof e?parseInt(e):0}get time(){return new Date(Date.parse(this.timestamp))}get timestamp(){return this.header.get(c.DirectMsgHeaders.TimeStamp)}get stream(){return this.header.get(c.DirectMsgHeaders.Stream)}json(e){return(0,h.JSONCodec)(e).decode(this.data)}string(){return l.TD.decode(this.data)}}t.DirectMsgImpl=f;class p extends i.BaseApiClient{constructor(e,t){super(e,t),this.streams=new s.StreamAPIImpl(e,t),this.consumers=new o.ConsumerAPIImpl(e,t),this.direct=new d(e,t)}getAccountInfo(){return n(this,void 0,void 0,(function*(){return yield this._request(`${this.prefix}.INFO`)}))}jetstream(){return this.nc.jetstream(this.getOptions())}advisories(){const e=new a.QueuedIteratorImpl;return this.nc.subscribe("$JS.EVENT.ADVISORY.>",{callback:(t,r)=>{if(t)throw t;try{const t=this.parseJsResponse(r),n=t.type.split("."),i=n[n.length-1];e.push({kind:i,data:t})}catch(t){e.stop(t)}}}),e}}t.JetStreamManagerImpl=p},8442:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ConsumerAPIImpl=void 0;const i=r(5798),s=r(9520),o=r(7349),a=r(6369);class c extends i.BaseApiClient{constructor(e,t){super(e,t)}add(e,t){var r,i,s;return n(this,void 0,void 0,(function*(){if((0,o.validateStreamName)(e),t.deliver_group&&t.flow_control)throw new Error("jetstream flow control is not supported with queue groups");if(t.deliver_group&&t.idle_heartbeat)throw new Error("jetstream idle heartbeat is not supported with queue groups");const n={};n.config=t,n.stream_name=e,n.config.durable_name&&(0,o.validateDurableName)(n.config.durable_name);const c=this.nc;let{min:u,ok:l}=c.features.get(a.Feature.JS_NEW_CONSUMER_CREATE_API);const h=""===t.name?void 0:t.name;if(h&&!l)throw new Error(`consumer 'name' requires server ${u}`);if(h){const e=(0,o.validName)(h);if(e.length)throw new Error(`consumer 'name' ${e}`)}let d,f="";if(Array.isArray(t.filter_subjects)){const{min:e,ok:t}=c.features.get(a.Feature.JS_MULTIPLE_CONSUMER_FILTER);if(!t)throw new Error(`consumer 'filter_subjects' requires server ${e}`);l=!1}if(t.metadata){const{min:e,ok:t}=c.features.get(a.Feature.JS_STREAM_CONSUMER_METADATA);if(!t)throw new Error(`consumer 'metadata' requires server ${e}`)}if(l&&(f=null!==(i=null!==(r=t.name)&&void 0!==r?r:t.durable_name)&&void 0!==i?i:""),""!==f){let r=null!==(s=t.filter_subject)&&void 0!==s?s:void 0;">"===r&&(r=void 0),d=void 0!==r?`${this.prefix}.CONSUMER.CREATE.${e}.${f}.${r}`:`${this.prefix}.CONSUMER.CREATE.${e}.${f}`}else d=t.durable_name?`${this.prefix}.CONSUMER.DURABLE.CREATE.${e}.${t.durable_name}`:`${this.prefix}.CONSUMER.CREATE.${e}`;return yield this._request(d,n)}))}update(e,t,r){return n(this,void 0,void 0,(function*(){const n=yield this.info(e,t),i=r;return this.add(e,Object.assign(n.config,i))}))}info(e,t){return n(this,void 0,void 0,(function*(){return(0,o.validateStreamName)(e),(0,o.validateDurableName)(t),yield this._request(`${this.prefix}.CONSUMER.INFO.${e}.${t}`)}))}delete(e,t){return n(this,void 0,void 0,(function*(){return(0,o.validateStreamName)(e),(0,o.validateDurableName)(t),(yield this._request(`${this.prefix}.CONSUMER.DELETE.${e}.${t}`)).success}))}list(e){(0,o.validateStreamName)(e);const t=`${this.prefix}.CONSUMER.LIST.${e}`;return new s.ListerImpl(t,(e=>e.consumers),this)}}t.ConsumerAPIImpl=c},6221:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.JsMsgImpl=t.parseInfo=t.toJsMsg=t.ACK=void 0;const i=r(9481),s=r(2941),o=r(4701),a=r(7349);t.ACK=Uint8Array.of(43,65,67,75);const c=Uint8Array.of(45,78,65,75),u=Uint8Array.of(43,87,80,73),l=Uint8Array.of(43,78,88,84),h=Uint8Array.of(43,84,69,82,77),d=Uint8Array.of(32);function f(e){const t=e.split(".");if(9===t.length&&t.splice(2,0,"_",""),t.length<11||"$JS"!==t[0]||"ACK"!==t[1])throw new Error("not js message");const r={};return r.domain="_"===t[2]?"":t[2],r.account_hash=t[3],r.stream=t[4],r.consumer=t[5],r.redeliveryCount=parseInt(t[6],10),r.redelivered=r.redeliveryCount>1,r.streamSequence=parseInt(t[7],10),r.deliverySequence=parseInt(t[8],10),r.timestampNanos=parseInt(t[9],10),r.pending=parseInt(t[10],10),r}t.toJsMsg=function(e){return new p(e)},t.parseInfo=f;class p{constructor(e){this.msg=e,this.didAck=!1}get subject(){return this.msg.subject}get sid(){return this.msg.sid}get data(){return this.msg.data}get headers(){return this.msg.headers}get info(){return this.di||(this.di=f(this.reply)),this.di}get redelivered(){return this.info.redeliveryCount>1}get reply(){return this.msg.reply||""}get seq(){return this.info.streamSequence}doAck(e){this.didAck||(this.didAck=!this.isWIP(e),this.msg.respond(e))}isWIP(e){return 4===e.length&&e[0]===u[0]&&e[1]===u[1]&&e[2]===u[2]&&e[3]===u[3]}ackAck(){return n(this,void 0,void 0,(function*(){if(!this.didAck&&(this.didAck=!0,this.msg.reply)){const e=this.msg.publisher,r=new o.RequestOne(e.muxSubscriptions,this.msg.reply);e.request(r);try{e.publish(this.msg.reply,t.ACK,{reply:`${e.muxSubscriptions.baseInbox}${r.token}`})}catch(e){r.cancel(e)}try{return yield Promise.race([r.timer,r.deferred]),!0}catch(e){r.cancel(e)}}return!1}))}ack(){this.doAck(t.ACK)}nak(e){let t=c;e&&(t=(0,s.StringCodec)().encode(`-NAK ${JSON.stringify({delay:(0,a.nanos)(e)})}`)),this.doAck(t)}working(){this.doAck(u)}next(e,t={batch:1}){const r={};r.batch=t.batch||1,r.no_wait=t.no_wait||!1,t.expires&&t.expires>0&&(r.expires=(0,a.nanos)(t.expires));const n=(0,s.JSONCodec)().encode(r),o=i.DataBuffer.concat(l,d,n),c=e?{reply:e}:void 0;this.msg.respond(o,c)}term(){this.doAck(h)}json(){return this.msg.json()}string(){return this.msg.string()}}t.JsMsgImpl=p},2645:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StreamsImpl=t.StoredMsgImpl=t.StreamAPIImpl=t.StreamImpl=t.ConsumersImpl=t.convertStreamSourceDomain=void 0;const i=r(1740),s=r(5798),o=r(9520),a=r(7349),c=r(4076),u=r(6635),l=r(3851),h=r(2941),d=r(3164),f=r(6369),p=r(2548),y=r(4961),m=r(8442);function g(e){if(void 0===e)return;const{domain:t}=e;if(void 0===t)return e;const r=Object.assign({},e);if(delete r.domain,""===t)return r;if(r.external)throw new Error("domain and external are both set");return r.external={api:`$JS.${t}.API`},r}t.convertStreamSourceDomain=g;class b{constructor(e){this.api=e,this.notified=!1}checkVersion(){this.notified||(this.notified=!0,console.log("[33m >> consumers framework is beta functionality [0m"));const e=this.api.nc.features.get(f.Feature.JS_SIMPLIFICATION);return e.ok?Promise.resolve():Promise.reject(new Error(`consumers framework is only supported on servers ${e.min} or better`))}get(e,t={}){return n(this,void 0,void 0,(function*(){return"object"==typeof t?this.ordered(e,t):(yield this.checkVersion(),this.api.info(e,t).then((e=>void 0!==e.config.deliver_subject?Promise.reject(new Error("push consumer not supported")):new y.PullConsumerImpl(this.api,e))).catch((e=>Promise.reject(e))))}))}ordered(e,t){return n(this,void 0,void 0,(function*(){yield this.checkVersion();const r=this.api;return new _(r.nc,r.opts).info(e).then((r=>Promise.resolve(new y.OrderedPullConsumerImpl(this.api,e,t)))).catch((e=>Promise.reject(e)))}))}}t.ConsumersImpl=b;class v{constructor(e,t){this.api=e,this._info=t}get name(){return this._info.config.name}alternates(){return this.info().then((e=>e.alternates?e.alternates:[]))}best(){return n(this,void 0,void 0,(function*(){if(yield this.info(),this._info.alternates){const e=yield this.api.info(this._info.alternates[0].name);return new v(this.api,e)}return this}))}info(e=!1,t){return e?Promise.resolve(this._info):this.api.info(this.name,t).then((e=>(this._info=e,this._info)))}getConsumer(e){return new b(new m.ConsumerAPIImpl(this.api.nc,this.api.opts)).get(this.name,e)}getMessage(e){return this.api.getMessage(this.name,e)}deleteMessage(e,t){return this.api.deleteMessage(this.name,e,t)}}t.StreamImpl=v;class _ extends s.BaseApiClient{constructor(e,t){super(e,t)}add(e={}){var t;return n(this,void 0,void 0,(function*(){const r=this.nc;if(e.metadata){const{min:e,ok:t}=r.features.get(f.Feature.JS_STREAM_CONSUMER_METADATA);if(!t)throw new Error(`stream 'metadata' requires server ${e}`)}(0,a.validateStreamName)(e.name),e.mirror=g(e.mirror),e.sources=null===(t=e.sources)||void 0===t?void 0:t.map(g);const n=yield this._request(`${this.prefix}.STREAM.CREATE.${e.name}`,e);return this._fixInfo(n),n}))}delete(e){return n(this,void 0,void 0,(function*(){return(0,a.validateStreamName)(e),(yield this._request(`${this.prefix}.STREAM.DELETE.${e}`)).success}))}update(e,t={}){var r;return n(this,void 0,void 0,(function*(){if("object"==typeof e){const r=e;e=r.name,t=r,console.trace("[33m >> streams.update(config: StreamConfig) api changed to streams.update(name: string, config: StreamUpdateConfig) - this shim will be removed - update your code.  [0m")}const n=this.nc;if(t.metadata){const{min:e,ok:t}=n.features.get(f.Feature.JS_STREAM_CONSUMER_METADATA);if(!t)throw new Error(`stream 'metadata' requires server ${e}`)}(0,a.validateStreamName)(e);const i=yield this.info(e),s=Object.assign(i.config,t);s.mirror=g(s.mirror),s.sources=null===(r=s.sources)||void 0===r?void 0:r.map(g);const o=yield this._request(`${this.prefix}.STREAM.UPDATE.${e}`,s);return this._fixInfo(o),o}))}info(e,t){return n(this,void 0,void 0,(function*(){(0,a.validateStreamName)(e);const r=`${this.prefix}.STREAM.INFO.${e}`;let n=yield this._request(r,t),{total:i,limit:s}=n,o=n.state.subjects?Object.getOwnPropertyNames(n.state.subjects).length:1;if(i&&i>o){const e=[n],a=t||{};let c=0;for(;i>o;){c++,a.offset=s*c;const t=yield this._request(r,a);i=t.total,e.push(t);const n=Object.getOwnPropertyNames(t.state.subjects).length;if(o+=n,n<s)break}let u={};for(let t=0;t<e.length;t++)n=e[t],n.state.subjects&&(u=Object.assign(u,n.state.subjects));n.offset=0,n.total=0,n.limit=0,n.state.subjects=u}return this._fixInfo(n),n}))}list(e=""){const t=(null==e?void 0:e.length)?{subject:e}:{},r=`${this.prefix}.STREAM.LIST`;return new o.ListerImpl(r,(e=>{const t=e;return t.streams.forEach((e=>{this._fixInfo(e)})),t.streams}),this,t)}_fixInfo(e){e.config.sealed=e.config.sealed||!1,e.config.deny_delete=e.config.deny_delete||!1,e.config.deny_purge=e.config.deny_purge||!1,e.config.allow_rollup_hdrs=e.config.allow_rollup_hdrs||!1}purge(e,t){return n(this,void 0,void 0,(function*(){if(t){const{keep:e,seq:r}=t;if("number"==typeof e&&"number"==typeof r)throw new Error("can specify one of keep or seq")}return(0,a.validateStreamName)(e),yield this._request(`${this.prefix}.STREAM.PURGE.${e}`,t)}))}deleteMessage(e,t,r=!0){return n(this,void 0,void 0,(function*(){(0,a.validateStreamName)(e);const n={seq:t};return r||(n.no_erase=!0),(yield this._request(`${this.prefix}.STREAM.MSG.DELETE.${e}`,n)).success}))}getMessage(e,t){return n(this,void 0,void 0,(function*(){(0,a.validateStreamName)(e);const r=yield this._request(`${this.prefix}.STREAM.MSG.GET.${e}`,t);return new w(r)}))}find(e){return this.findStream(e)}listKvs(){const e=`${this.prefix}.STREAM.LIST`;return new o.ListerImpl(e,(e=>{var t,r;const n=e.streams.filter((e=>e.config.name.startsWith(p.kvPrefix)));n.forEach((e=>{this._fixInfo(e)}));let i="";return n.length&&(i=null!==(r=null===(t=this.nc.info)||void 0===t?void 0:t.cluster)&&void 0!==r?r:""),n.map((e=>new u.KvStatusImpl(e,i)))}),this)}listObjectStores(){const e=`${this.prefix}.STREAM.LIST`;return new o.ListerImpl(e,(e=>{const t=e.streams.filter((e=>e.config.name.startsWith(l.osPrefix)));return t.forEach((e=>{this._fixInfo(e)})),t.map((e=>new l.ObjectStoreStatusImpl(e)))}),this)}names(e=""){const t=(null==e?void 0:e.length)?{subject:e}:{},r=`${this.prefix}.STREAM.NAMES`;return new o.ListerImpl(r,(e=>e.streams),this,t)}get(e){return n(this,void 0,void 0,(function*(){const t=yield this.info(e);return Promise.resolve(new v(this,t))}))}}t.StreamAPIImpl=_;class w{constructor(e){this.smr=e}get subject(){return this.smr.message.subject}get seq(){return this.smr.message.seq}get timestamp(){return this.smr.message.time}get time(){return new Date(Date.parse(this.timestamp))}get data(){return this.smr.message.data?this._parse(this.smr.message.data):i.Empty}get header(){if(!this._header)if(this.smr.message.hdrs){const e=this._parse(this.smr.message.hdrs);this._header=c.MsgHdrsImpl.decode(e)}else this._header=(0,c.headers)();return this._header}_parse(e){const t=atob(e),r=t.length,n=new Uint8Array(r);for(let e=0;e<r;e++)n[e]=t.charCodeAt(e);return n}json(e){return(0,h.JSONCodec)(e).decode(this.data)}string(){return d.TD.decode(this.data)}}t.StoredMsgImpl=w,t.StreamsImpl=class{constructor(e){this.api=e}get(e){return this.api.info(e).then((e=>new v(this.api,e)))}}},7349:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkJsErrorCode=t.isTerminal409=t.setMaxWaitingToFail=t.Js409Errors=t.checkJsError=t.newJsErrorMsg=t.isHeartbeatMsg=t.isFlowControlMsg=t.millis=t.nanos=t.validName=t.validateName=t.validateStreamName=t.validateDurableName=void 0;const n=r(3164),i=r(4076),s=r(4621),o=r(9550);function a(e,t=""){if(""===t)throw Error(`${e} name required`);return[".","*",">","/","\\"].forEach((r=>{if(-1!==t.indexOf(r))throw Error(`invalid ${e} name - ${e} name cannot contain '${r}'`)})),""}function c(e=""){if(""===e)throw Error("name required");const t=/^[-\w]+$/g;if(null===e.match(t))for(const r of e.split(""))if(null===r.match(t))return`cannot contain '${r}'`;return""}function u(e){if(e.data.length>0)return!1;const t=e.headers;return!!t&&t.code>=100&&t.code<200}var l;t.validateDurableName=function(e){return a("durable",e)},t.validateStreamName=function(e){return a("stream",e)},t.validateName=function(e,t=""){if(""===t)throw Error(`${e} name required`);const r=c(t);if(r.length)throw new Error(`invalid ${e} name - ${e} name ${r}`)},t.validName=c,t.nanos=function(e){return 1e6*e},t.millis=function(e){return Math.floor(e/1e6)},t.isFlowControlMsg=u,t.isHeartbeatMsg=function(e){var t;return u(e)&&"Idle Heartbeat"===(null===(t=e.headers)||void 0===t?void 0:t.description)},t.newJsErrorMsg=function(e,t,r){const o=(0,i.headers)(e,t),a=new s.MsgImpl({hdr:1,sid:0,size:0},n.Empty,{});return a._headers=o,a._subject=r,a},t.checkJsError=function(e){if(0!==e.data.length)return null;const t=e.headers;return t?d(t.code,t.description):null},function(e){e.MaxBatchExceeded="exceeded maxrequestbatch of",e.MaxExpiresExceeded="exceeded maxrequestexpires of",e.MaxBytesExceeded="exceeded maxrequestmaxbytes of",e.MaxMessageSizeExceeded="message size exceeds maxbytes",e.PushConsumer="consumer is push based",e.MaxWaitingExceeded="exceeded maxwaiting",e.IdleHeartbeatMissed="idle heartbeats missed",e.ConsumerDeleted="consumer deleted"}(l=t.Js409Errors||(t.Js409Errors={}));let h=!1;function d(e,t=""){if(e<300)return null;switch(t=t.toLowerCase(),e){case 404:return new o.NatsError(t,o.ErrorCode.JetStream404NoMessages);case 408:return new o.NatsError(t,o.ErrorCode.JetStream408RequestTimeout);case 409:{const e=t.startsWith(l.IdleHeartbeatMissed)?o.ErrorCode.JetStreamIdleHeartBeat:o.ErrorCode.JetStream409;return new o.NatsError(t,e)}case 503:return o.NatsError.errorForCode(o.ErrorCode.JetStreamNotEnabled,new Error(t));default:return""===t&&(t=o.ErrorCode.Unknown),new o.NatsError(t,`${e}`)}}t.setMaxWaitingToFail=function(e){h=e},t.isTerminal409=function(e){if(e.code!==o.ErrorCode.JetStream409)return!1;const t=[l.MaxBatchExceeded,l.MaxExpiresExceeded,l.MaxBytesExceeded,l.MaxMessageSizeExceeded,l.PushConsumer,l.IdleHeartbeatMissed,l.ConsumerDeleted];return h&&t.push(l.MaxWaitingExceeded),void 0!==t.find((t=>-1!==e.message.indexOf(t)))},t.checkJsErrorCode=d},6635:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.KvStatusImpl=t.Bucket=t.validateBucket=t.hasWildcards=t.validateSearchKey=t.validateKey=t.kvOperationHdr=t.defaultBucketOpts=t.NoopKvCodecs=t.Base64KeyCodec=void 0;const s=r(7349),o=r(4629),a=r(4076),c=r(2548),u=r(6369),l=r(3024),h=r(3164),d=r(9550),f=r(5738);function p(){return{replicas:1,history:1,timeout:2e3,maxBucketSize:-1,maxValueSize:-1,codec:{key:{encode:e=>e,decode:e=>e},value:{encode:e=>e,decode:e=>e}},storage:f.StorageType.File}}t.Base64KeyCodec=function(){return{encode:e=>btoa(e),decode:e=>atob(e)}},t.NoopKvCodecs=function(){return{key:{encode:e=>e,decode:e=>e},value:{encode:e=>e,decode:e=>e}}},t.defaultBucketOpts=p,t.kvOperationHdr="KV-Operation";const y=/^[-/=.\w]+$/,m=/^[-/=.>*\w]+$/,g=/^[-\w]+$/;function b(e){if(e.startsWith(".")||e.endsWith(".")||!y.test(e))throw new Error(`invalid key: ${e}`)}function v(e){if(e.startsWith(".")||e.endsWith(".")||!m.test(e))throw new Error(`invalid key: ${e}`)}function _(e){if(e.startsWith(".")||e.endsWith("."))throw new Error(`invalid key: ${e}`);const t=e.split(".");let r=!1;for(let n=0;n<t.length;n++)switch(t[n]){case"*":r=!0;break;case">":if(n!==t.length-1)throw new Error(`invalid key: ${e}`);r=!0}return r}function w(e){if(!g.test(e))throw new Error(`invalid bucket name: ${e}`)}t.validateKey=b,t.validateSearchKey=v,t.hasWildcards=_,t.validateBucket=w;class E{constructor(e,t,r){this.validateKey=b,this.validateSearchKey=v,this.hasWildcards=_,w(e),this.js=t,this.jsm=r,this.bucket=e,this.prefix="$KV",this.editPrefix="",this.useJsPrefix=!1,this._prefixLen=0}static create(e,t,r={}){return n(this,void 0,void 0,(function*(){w(t);const n=yield e.jetstreamManager(),i=new E(t,e,n);return yield i.init(r),i}))}static bind(e,t,r={}){var i;return n(this,void 0,void 0,(function*(){const n=yield e.jetstreamManager(),s=yield n.streams.info(`${c.kvPrefix}${t}`);w(s.config.name);const o=new E(t,e,n);return Object.assign(o,s),o.codec=r.codec||{key:{encode:e=>e,decode:e=>e},value:{encode:e=>e,decode:e=>e}},o.direct=null!==(i=s.config.allow_direct)&&void 0!==i&&i,o.initializePrefixes(s),o}))}init(e={}){var t,r;return n(this,void 0,void 0,(function*(){const n=Object.assign(p(),e);this.codec=n.codec;const i={};this.stream=i.name=null!==(t=e.streamName)&&void 0!==t?t:this.bucketName(),i.retention=f.RetentionPolicy.Limits,i.max_msgs_per_subject=n.history,n.maxBucketSize&&(n.max_bytes=n.maxBucketSize),n.max_bytes&&(i.max_bytes=n.max_bytes),i.max_msg_size=n.maxValueSize,i.storage=n.storage;const o=null!==(r=e.placementCluster)&&void 0!==r?r:"";if(o&&(e.placement={},e.placement.cluster=o,e.placement.tags=[]),e.placement&&(i.placement=e.placement),e.republish&&(i.republish=e.republish),e.description&&(i.description=e.description),e.mirror){const t=Object.assign({},e.mirror);t.name.startsWith(c.kvPrefix)||(t.name=`${c.kvPrefix}${t.name}`),i.mirror=t,i.mirror_direct=!0}else if(e.sources){const t=e.sources.map((e=>{const t=Object.assign({},e);t.name.startsWith(c.kvPrefix)||(t.name=`${c.kvPrefix}${t.name}`)}));i.sources=t}else i.subjects=[this.subjectForBucket()];const a=this.js.nc,l=a.getServerVersion(),h=!!l&&(0,u.compare)(l,(0,u.parseSemVer)("2.7.2"))>=0;i.discard=h?f.DiscardPolicy.New:f.DiscardPolicy.Old;const{ok:d,min:y}=a.features.get(u.Feature.JS_ALLOW_DIRECT);if(!d&&!0===e.allow_direct){const e=l?`${l.major}.${l.minor}.${l.micro}`:"unknown";return Promise.reject(new Error(`allow_direct is not available on server version ${e} - requires ${y}`))}let m;e.allow_direct="boolean"==typeof e.allow_direct?e.allow_direct:d,i.allow_direct=e.allow_direct,this.direct=i.allow_direct,i.num_replicas=n.replicas,n.ttl&&(i.max_age=(0,s.nanos)(n.ttl)),i.allow_rollup_hdrs=!0;try{m=yield this.jsm.streams.info(i.name),m.config.allow_direct||!0!==this.direct||(this.direct=!1)}catch(e){if("stream not found"!==e.message)throw e;m=yield this.jsm.streams.add(i)}this.initializePrefixes(m)}))}initializePrefixes(e){this._prefixLen=0,this.prefix=`$KV.${this.bucket}`,this.useJsPrefix="$JS.API"!==this.js.apiPrefix;const{mirror:t}=e.config;if(t){let e=t.name;if(e.startsWith(c.kvPrefix)&&(e=e.substring(c.kvPrefix.length)),t.external&&""!==t.external.api){const r=t.name.substring(c.kvPrefix.length);this.useJsPrefix=!1,this.prefix=`$KV.${r}`,this.editPrefix=`${t.external.api}.$KV.${e}`}else this.editPrefix=this.prefix}}bucketName(){var e;return null!==(e=this.stream)&&void 0!==e?e:`${c.kvPrefix}${this.bucket}`}subjectForBucket(){return`${this.prefix}.${this.bucket}.>`}subjectForKey(e,t=!1){const r=[];return t?(this.useJsPrefix&&r.push(this.js.apiPrefix),""!==this.editPrefix?r.push(this.editPrefix):r.push(this.prefix)):this.prefix&&r.push(this.prefix),r.push(e),r.join(".")}fullKeyName(e){return""!==this.prefix?`${this.prefix}.${e}`:`$KV.${this.bucket}.${e}`}get prefixLen(){return 0===this._prefixLen&&(this._prefixLen=this.prefix.length+1),this._prefixLen}encodeKey(e){const t=[];for(const r of e.split("."))switch(r){case">":case"*":t.push(r);break;default:t.push(this.codec.key.encode(r))}return t.join(".")}decodeKey(e){const t=[];for(const r of e.split("."))switch(r){case">":case"*":t.push(r);break;default:t.push(this.codec.key.decode(r))}return t.join(".")}close(){return Promise.resolve()}dataLen(e,t){const r=t&&t.get(c.JsHeaders.MessageSizeHdr)||"";return""!==r?parseInt(r,10):e.length}smToEntry(e){return new S(this.bucket,this.prefixLen,e)}jmToEntry(e){const t=this.decodeKey(e.subject.substring(this.prefixLen));return new O(this.bucket,t,e)}create(e,t){var r;return n(this,void 0,void 0,(function*(){let n;try{const r=yield this.put(e,t,{previousSeq:0});return Promise.resolve(r)}catch(e){if(n=e,10071!==(null===(r=null==e?void 0:e.api_error)||void 0===r?void 0:r.err_code))return Promise.reject(e)}let i=0;try{const r=yield this.get(e);return"DEL"===(null==r?void 0:r.operation)||"PURGE"===(null==r?void 0:r.operation)?(i=null!==r?r.revision:0,this.update(e,t,i)):Promise.reject(n)}catch(e){return Promise.reject(e)}}))}update(e,t,r){if(r<=0)throw new Error("version must be greater than 0");return this.put(e,t,{previousSeq:r})}put(e,t,r={}){var i,s;return n(this,void 0,void 0,(function*(){const n=this.encodeKey(e);this.validateKey(n);const o={};if(void 0!==r.previousSeq){const e=(0,a.headers)();o.headers=e,e.set("Nats-Expected-Last-Subject-Sequence",`${r.previousSeq}`)}try{return(yield this.js.publish(this.subjectForKey(n,!0),t,o)).seq}catch(e){const t=e;return t.isJetStreamError()?(t.message=null===(i=t.api_error)||void 0===i?void 0:i.description,t.code=`${null===(s=t.api_error)||void 0===s?void 0:s.code}`,Promise.reject(t)):Promise.reject(e)}}))}get(e,t){return n(this,void 0,void 0,(function*(){const r=this.encodeKey(e);this.validateKey(r);let n,i={last_by_subj:this.subjectForKey(r)};t&&t.revision>0&&(i={seq:t.revision});try{if(this.direct){const e=this.jsm.direct;n=yield e.getMessage(this.bucketName(),i)}else n=yield this.jsm.streams.getMessage(this.bucketName(),i);const e=this.smToEntry(n);return e.key!==r?null:e}catch(e){if(e.code===d.ErrorCode.JetStream404NoMessages)return null;throw e}}))}purge(e){return this._deleteOrPurge(e,"PURGE")}delete(e){return this._deleteOrPurge(e,"DEL")}purgeDeletes(e=18e5){return n(this,void 0,void 0,(function*(){const t=(0,l.deferred)(),r=[],s=yield this.watch({key:">",initializedFn:()=>{t.resolve()}});(()=>n(this,void 0,void 0,(function*(){var e,t,n,o;try{for(var a,c=!0,u=i(s);!(e=(a=yield u.next()).done);){o=a.value,c=!1;try{const e=o;"DEL"!==e.operation&&"PURGE"!==e.operation||r.push(e)}finally{c=!0}}}catch(e){t={error:e}}finally{try{c||e||!(n=u.return)||(yield n.call(u))}finally{if(t)throw t.error}}})))().then(),yield t,s.stop();const o=Date.now()-e,a=r.map((e=>{const t=this.subjectForKey(e.key);return e.created.getTime()>=o?this.jsm.streams.purge(this.stream,{filter:t,keep:1}):this.jsm.streams.purge(this.stream,{filter:t,keep:0})})),c=yield Promise.all(a);return c.unshift({success:!0,purged:0}),c.reduce(((e,t)=>(e.purged+=t.purged,e)))}))}_deleteOrPurge(e,t){var r,s,o,a;return n(this,void 0,void 0,(function*(){if(!this.hasWildcards(e))return this._doDeleteOrPurge(e,t);const n=yield this.keys(e),c=[];try{for(var u,l=!0,h=i(n);u=yield h.next(),!(r=u.done);){a=u.value,l=!1;try{const e=a;c.push(this._doDeleteOrPurge(e,t)),100===c.length&&(yield Promise.all(c),c.length=0)}finally{l=!0}}}catch(e){s={error:e}}finally{try{l||r||!(o=h.return)||(yield o.call(h))}finally{if(s)throw s.error}}c.length>0&&(yield Promise.all(c))}))}_doDeleteOrPurge(e,r){return n(this,void 0,void 0,(function*(){const n=this.encodeKey(e);this.validateKey(n);const i=(0,a.headers)();i.set(t.kvOperationHdr,r),"PURGE"===r&&i.set(c.JsHeaders.RollupHdr,c.JsHeaders.RollupValueSubject),yield this.js.publish(this.subjectForKey(n,!0),h.Empty,{headers:i})}))}_buildCC(e,t=!1,r={}){const n=this.encodeKey(e);return this.validateSearchKey(e),Object.assign({deliver_policy:t?f.DeliverPolicy.All:f.DeliverPolicy.LastPerSubject,ack_policy:f.AckPolicy.None,filter_subject:this.fullKeyName(n),flow_control:!0,idle_heartbeat:(0,s.nanos)(5e3)},r)}remove(e){return this.purge(e)}history(e={}){var t;return n(this,void 0,void 0,(function*(){const r=null!==(t=e.key)&&void 0!==t?t:">",n=new o.QueuedIteratorImpl,i={};let s;i.headers_only=e.headers_only||!1,s=()=>{n.stop()};let a=0;const u=this._buildCC(r,!0,i),l=u.filter_subject,h=(0,c.consumerOpts)(u);h.bindStream(this.stream),h.orderedConsumer(),h.callback(((e,t)=>{if(e)n.stop(e);else if(t){const e=this.jmToEntry(t);n.push(e),n.received++,(s&&a>0&&n.received>=a||0===t.info.pending)&&(n.push(s),s=void 0)}}));const d=yield this.js.subscribe(l,h);if(s){const{info:{last:e}}=d,t=e.num_pending+e.delivered.consumer_seq;if(0===t||n.received>=t)try{s()}catch(e){n.stop(e)}finally{s=void 0}else a=t}return n._data=d,n.iterClosed.then((()=>{d.unsubscribe()})),d.closed.then((()=>{n.stop()})).catch((e=>{n.stop(e)})),n}))}watch(e={}){var t;return n(this,void 0,void 0,(function*(){const r=null!==(t=e.key)&&void 0!==t?t:">",n=new o.QueuedIteratorImpl,i={};i.headers_only=e.headers_only||!1;let s=e.initializedFn,a=0;const u=this._buildCC(r,!1,i),l=u.filter_subject,h=(0,c.consumerOpts)(u);h.bindStream(this.stream),h.orderedConsumer(),h.callback(((e,t)=>{if(e)n.stop(e);else if(t){const e=this.jmToEntry(t);n.push(e),n.received++,s&&(a>0&&n.received>=a||0===t.info.pending)&&(n.push(s),s=void 0)}}));const d=yield this.js.subscribe(l,h);if(s){const{info:{last:e}}=d,t=e.num_pending+e.delivered.consumer_seq;if(0===t||n.received>=t)try{s()}catch(e){n.stop(e)}finally{s=void 0}else a=t}return n._data=d,n.iterClosed.then((()=>{d.unsubscribe()})),d.closed.then((()=>{n.stop()})).catch((e=>{n.stop(e)})),n}))}keys(e=">"){return n(this,void 0,void 0,(function*(){const r=new o.QueuedIteratorImpl,s=this._buildCC(e,!1,{headers_only:!0}),a=s.filter_subject,u=(0,c.consumerOpts)(s);u.bindStream(this.stream),u.orderedConsumer();const l=yield this.js.subscribe(a,u);return(()=>n(this,void 0,void 0,(function*(){var e,n,s,o,a;try{for(var c,u=!0,h=i(l);!(e=(c=yield h.next()).done);){o=c.value,u=!1;try{const e=o,n=null===(a=e.headers)||void 0===a?void 0:a.get(t.kvOperationHdr);if("DEL"!==n&&"PURGE"!==n){const t=this.decodeKey(e.subject.substring(this.prefixLen));r.push(t)}0===e.info.pending&&l.unsubscribe()}finally{u=!0}}}catch(e){n={error:e}}finally{try{u||e||!(s=h.return)||(yield s.call(h))}finally{if(n)throw n.error}}})))().then((()=>{r.stop()})).catch((e=>{r.stop(e)})),0===l.info.last.num_pending&&l.unsubscribe(),r}))}purgeBucket(e){return this.jsm.streams.purge(this.bucketName(),e)}destroy(){return this.jsm.streams.delete(this.bucketName())}status(){var e,t;return n(this,void 0,void 0,(function*(){const r=this.js.nc,n=null!==(t=null===(e=r.info)||void 0===e?void 0:e.cluster)&&void 0!==t?t:"",i=this.bucketName(),s=yield this.jsm.streams.info(i);return new P(s,n)}))}}t.Bucket=E;class P{constructor(e,t=""){this.si=e,this.cluster=t}get bucket(){return this.si.config.name.startsWith(c.kvPrefix)?this.si.config.name.substring(c.kvPrefix.length):this.si.config.name}get values(){return this.si.state.messages}get history(){return this.si.config.max_msgs_per_subject}get ttl(){return(0,s.millis)(this.si.config.max_age)}get bucket_location(){return this.cluster}get backingStore(){return this.si.config.storage}get storage(){return this.si.config.storage}get replicas(){return this.si.config.num_replicas}get description(){var e;return null!==(e=this.si.config.description)&&void 0!==e?e:""}get maxBucketSize(){return this.si.config.max_bytes}get maxValueSize(){return this.si.config.max_msg_size}get max_bytes(){return this.si.config.max_bytes}get placement(){return this.si.config.placement||{cluster:"",tags:[]}}get placementCluster(){var e,t;return null!==(t=null===(e=this.si.config.placement)||void 0===e?void 0:e.cluster)&&void 0!==t?t:""}get republish(){var e;return null!==(e=this.si.config.republish)&&void 0!==e?e:{src:"",dest:""}}get streamInfo(){return this.si}get size(){return this.si.state.bytes}}t.KvStatusImpl=P;class S{constructor(e,t,r){this.bucket=e,this.prefixLen=t,this.sm=r}get key(){return this.sm.subject.substring(this.prefixLen)}get value(){return this.sm.data}get delta(){return 0}get created(){return this.sm.time}get revision(){return this.sm.seq}get operation(){return this.sm.header.get(t.kvOperationHdr)||"PUT"}get length(){const e=this.sm.header.get(c.JsHeaders.MessageSizeHdr)||"";return""!==e?parseInt(e,10):this.sm.data.length}json(){return this.sm.json()}string(){return this.sm.string()}}class O{constructor(e,t,r){this.bucket=e,this.key=t,this.sm=r}get value(){return this.sm.data}get created(){return new Date((0,s.millis)(this.sm.info.timestampNanos))}get revision(){return this.sm.seq}get operation(){var e;return(null===(e=this.sm.headers)||void 0===e?void 0:e.get(t.kvOperationHdr))||"PUT"}get delta(){return this.sm.info.pending}get length(){var e;const t=(null===(e=this.sm.headers)||void 0===e?void 0:e.get(c.JsHeaders.MessageSizeHdr))||"";return""!==t?parseInt(t,10):this.sm.data.length}json(){return this.sm.json()}string(){return this.sm.string()}}},9439:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.consumerOpts=t.StorageType=t.RetentionPolicy=t.RepublishHeaders=t.ReplayPolicy=t.JsHeaders=t.DiscardPolicy=t.DirectMsgHeaders=t.DeliverPolicy=t.ConsumerEvents=t.ConsumerDebugEvents=t.AdvisoryKind=t.AckPolicy=t.nanos=t.millis=t.isHeartbeatMsg=t.isFlowControlMsg=t.checkJsError=void 0;var n=r(5261);Object.defineProperty(t,"checkJsError",{enumerable:!0,get:function(){return n.checkJsError}}),Object.defineProperty(t,"isFlowControlMsg",{enumerable:!0,get:function(){return n.isFlowControlMsg}}),Object.defineProperty(t,"isHeartbeatMsg",{enumerable:!0,get:function(){return n.isHeartbeatMsg}}),Object.defineProperty(t,"millis",{enumerable:!0,get:function(){return n.millis}}),Object.defineProperty(t,"nanos",{enumerable:!0,get:function(){return n.nanos}});var i=r(5261);Object.defineProperty(t,"AckPolicy",{enumerable:!0,get:function(){return i.AckPolicy}}),Object.defineProperty(t,"AdvisoryKind",{enumerable:!0,get:function(){return i.AdvisoryKind}}),Object.defineProperty(t,"ConsumerDebugEvents",{enumerable:!0,get:function(){return i.ConsumerDebugEvents}}),Object.defineProperty(t,"ConsumerEvents",{enumerable:!0,get:function(){return i.ConsumerEvents}}),Object.defineProperty(t,"DeliverPolicy",{enumerable:!0,get:function(){return i.DeliverPolicy}}),Object.defineProperty(t,"DirectMsgHeaders",{enumerable:!0,get:function(){return i.DirectMsgHeaders}}),Object.defineProperty(t,"DiscardPolicy",{enumerable:!0,get:function(){return i.DiscardPolicy}}),Object.defineProperty(t,"JsHeaders",{enumerable:!0,get:function(){return i.JsHeaders}}),Object.defineProperty(t,"ReplayPolicy",{enumerable:!0,get:function(){return i.ReplayPolicy}}),Object.defineProperty(t,"RepublishHeaders",{enumerable:!0,get:function(){return i.RepublishHeaders}}),Object.defineProperty(t,"RetentionPolicy",{enumerable:!0,get:function(){return i.RetentionPolicy}}),Object.defineProperty(t,"StorageType",{enumerable:!0,get:function(){return i.StorageType}});var s=r(2548);Object.defineProperty(t,"consumerOpts",{enumerable:!0,get:function(){return s.consumerOpts}})},3851:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectStoreImpl=t.ObjectStoreStatusImpl=t.objectStoreBucketName=t.objectStoreStreamName=t.digestType=t.osPrefix=void 0;const s=r(6635),o=r(2936),a=r(2941),c=r(7751),u=r(3024),l=r(9481),h=r(4076),d=r(2548),f=r(4629),p=r(8007),y=r(5738);function m(e){return(0,s.validateBucket)(e),`${t.osPrefix}${e}`}function g(e){return e.startsWith(t.osPrefix)?e.substring(4):e}t.osPrefix="OBJ_",t.digestType="SHA-256=",t.objectStoreStreamName=m,t.objectStoreBucketName=g;class b{constructor(e){this.si=e,this.backingStore="JetStream"}get bucket(){return g(this.si.config.name)}get description(){var e;return null!==(e=this.si.config.description)&&void 0!==e?e:""}get ttl(){return this.si.config.max_age}get storage(){return this.si.config.storage}get replicas(){return this.si.config.num_replicas}get sealed(){return this.si.config.sealed}get size(){return this.si.state.bytes}get streamInfo(){return this.si}}t.ObjectStoreStatusImpl=b;class v{constructor(e){this.info=e}get name(){return this.info.name}get description(){var e;return null!==(e=this.info.description)&&void 0!==e?e:""}get headers(){return this.hdrs||(this.hdrs=h.MsgHdrsImpl.fromRecord(this.info.headers||{})),this.hdrs}get options(){return this.info.options}get bucket(){return this.info.bucket}get chunks(){return this.info.chunks}get deleted(){var e;return null!==(e=this.info.deleted)&&void 0!==e&&e}get digest(){return this.info.digest}get mtime(){return this.info.mtime}get nuid(){return this.info.nuid}get size(){return this.info.size}get revision(){return this.info.revision}}function _(e){var t;const r={name:e.name,description:null!==(t=e.description)&&void 0!==t?t:"",options:e.options};if(e.headers){const t=e.headers;r.headers=t.toRecord()}return r}class w{constructor(e,t,r){this.name=e,this.jsm=t,this.js=r}_sanitizeName(e){if(!e||0===e.length)return{name:e,error:new Error("name cannot be empty")};let t;e=e.replace(/[. ]/g,"_");try{(0,s.validateKey)(e)}catch(e){t=e}return{name:e,error:t}}info(e){return n(this,void 0,void 0,(function*(){const t=yield this.rawInfo(e);return t?new v(t):null}))}list(){var e,t,r,s;return n(this,void 0,void 0,(function*(){const n=[],o=yield this.watch({ignoreDeletes:!0,includeHistory:!0});try{for(var a,c=!0,u=i(o);a=yield u.next(),!(e=a.done);){s=a.value,c=!1;try{const e=s;if(null===e)break;n.push(e)}finally{c=!0}}}catch(e){t={error:e}}finally{try{c||e||!(r=u.return)||(yield r.call(u))}finally{if(t)throw t.error}}return Promise.resolve(n)}))}rawInfo(e){return n(this,void 0,void 0,(function*(){const{name:t,error:r}=this._sanitizeName(e);if(r)return Promise.reject(r);const n=this._metaSubject(t);try{const e=yield this.jsm.streams.getMessage(this.stream,{last_by_subj:n}),t=(0,a.JSONCodec)().decode(e.data);return t.revision=e.seq,t}catch(e){return"404"===e.code?null:Promise.reject(e)}}))}_si(e){return n(this,void 0,void 0,(function*(){try{return yield this.jsm.streams.info(this.stream,e)}catch(e){return"404"===e.code?null:Promise.reject(e)}}))}seal(){return n(this,void 0,void 0,(function*(){let e=yield this._si();return null===e?Promise.reject(new Error("object store not found")):(e.config.sealed=!0,e=yield this.jsm.streams.update(this.stream,e.config),Promise.resolve(new b(e)))}))}status(e){return n(this,void 0,void 0,(function*(){const t=yield this._si(e);return null===t?Promise.reject(new Error("object store not found")):Promise.resolve(new b(t))}))}destroy(){return this.jsm.streams.delete(this.stream)}_put(e,r,i){var s,o;return n(this,void 0,void 0,(function*(){const n=this.js.getOptions();(i=i||{timeout:n.timeout}).timeout=i.timeout||n.timeout,i.previousRevision=null!==(s=i.previousRevision)&&void 0!==s?s:void 0;const{timeout:f,previousRevision:y}=i,m=this.js.nc.info,g=(null==m?void 0:m.max_payload)||1024;(e=e||{}).options=e.options||{};let b=(null===(o=e.options)||void 0===o?void 0:o.max_chunk_size)||131072;b=b>g?g:b,e.options.max_chunk_size=b;const w=yield this.info(e.name),{name:E,error:P}=this._sanitizeName(e.name);if(P)return Promise.reject(P);const S=c.nuid.next(),O=this._chunkSubject(S),A=this._metaSubject(E),C=Object.assign({bucket:this.name,nuid:S,size:0,chunks:0},_(e)),j=(0,u.deferred)(),x=[],I=new l.DataBuffer;try{const n=r?r.getReader():null,i=new p.SHA256;for(;;){const{done:r,value:s}=n?yield n.read():{done:!0,value:void 0};if(r){if(I.size()>0){const e=I.drain();i.update(e),C.chunks++,C.size+=e.length,x.push(this.js.publish(O,e,{timeout:f}))}yield Promise.all(x),x.length=0,C.mtime=(new Date).toISOString();const e=i.digest("base64"),r=e.length%3,n=r>0?"=".repeat(r):"";C.digest=`${t.digestType}${e}${n}`,C.deleted=!1;const s=(0,h.headers)();"number"==typeof y&&s.set("Nats-Expected-Last-Subject-Sequence",`${y}`),s.set(d.JsHeaders.RollupHdr,d.JsHeaders.RollupValueSubject);const o=yield this.js.publish(A,(0,a.JSONCodec)().encode(C),{headers:s,timeout:f});if(C.revision=o.seq,w)try{yield this.jsm.streams.purge(this.stream,{filter:`$O.${this.name}.C.${w.nuid}`})}catch(e){}j.resolve(new v(C));break}if(s)for(I.fill(s);I.size()>b;){C.chunks++,C.size+=b;const t=I.drain(e.options.max_chunk_size);i.update(t),x.push(this.js.publish(O,t,{timeout:f}))}}}catch(e){yield this.jsm.streams.purge(this.stream,{filter:O}),j.reject(e)}return j}))}putBlob(e,t,r){return null===t&&(t=new Uint8Array(0)),this.put(e,function(e){return new ReadableStream({pull(t){t.enqueue(e),t.close()}})}(t),r)}put(e,t,r){var n;return(null===(n=null==e?void 0:e.options)||void 0===n?void 0:n.link)?Promise.reject(new Error("link cannot be set when putting the object in bucket")):this._put(e,t,r)}getBlob(e){return n(this,void 0,void 0,(function*(){const t=yield this.get(e);if(null===t)return Promise.resolve(null);const r=yield Promise.all([t.error,function(e){return n(this,void 0,void 0,(function*(){const t=new l.DataBuffer,r=e.getReader();for(;;){const{done:e,value:n}=yield r.read();if(e)return t.drain();n&&n.length&&t.fill(n)}}))}(t.data)]);return r[0]?Promise.reject(r[0]):Promise.resolve(r[1])}))}get(e){return n(this,void 0,void 0,(function*(){const r=yield this.rawInfo(e);if(null===r)return Promise.resolve(null);if(r.deleted)return Promise.resolve(null);if(r.options&&r.options.link){const e=r.options.link.name||"";if(""===e)throw new Error("link is a bucket");return(yield w.create(this.js,r.options.link.bucket)).get(e)}const s=(0,u.deferred)(),o={info:new v(r),error:s};if(0===r.size)return o.data=new ReadableStream({pull(e){e.enqueue(new Uint8Array(0)),e.close()}}),s.resolve(null),Promise.resolve(o);let a;const c=(0,d.consumerOpts)();c.orderedConsumer();const l=new p.SHA256,h=`$O.${this.name}.C.${r.nuid}`,f=yield this.js.subscribe(h,c);return(()=>n(this,void 0,void 0,(function*(){var e,n,s,o;try{for(var c,u=!0,h=i(f);!(e=(c=yield h.next()).done);){o=c.value,u=!1;try{const e=o;if(e.data.length>0&&(l.update(e.data),a.enqueue(e.data)),0===e.info.pending){const e=l.digest("base64"),n=e.length%3,i=n>0?"=".repeat(n):"",s=`${t.digestType}${e}${i}`;s!==r.digest?a.error(new Error(`received a corrupt object, digests do not match received: ${r.digest} calculated ${s}`)):a.close(),f.unsubscribe()}}finally{u=!0}}}catch(e){n={error:e}}finally{try{u||e||!(s=h.return)||(yield s.call(h))}finally{if(n)throw n.error}}})))().then((()=>{s.resolve()})).catch((e=>{a.error(e),s.reject(e)})),o.data=new ReadableStream({start(e){a=e},cancel(){f.unsubscribe()}}),o}))}linkStore(e,t){if(!(t instanceof w))return Promise.reject("bucket required");const r=t,{name:n,error:i}=this._sanitizeName(e);if(i)return Promise.reject(i);const s={name:n,options:{link:{bucket:r.name}}};return this._put(s,null)}link(e,t){return n(this,void 0,void 0,(function*(){if(t.deleted)return Promise.reject(new Error("object is deleted"));const{name:r,error:n}=this._sanitizeName(e);if(n)return Promise.reject(n);if(this.name===t.bucket){const e=Object.assign({},{name:(i=t).name,description:i.description,headers:i.headers,options:i.options});e.name=r;try{return yield this.update(t.name,e),yield this.info(r)}catch(e){return Promise.reject(e)}}var i;const s={name:r,options:{link:{bucket:t.bucket,name:t.name}}};return this._put(s,null)}))}delete(e){return n(this,void 0,void 0,(function*(){const t=yield this.rawInfo(e);if(null===t)return Promise.resolve({purged:0,success:!1});t.deleted=!0,t.size=0,t.chunks=0,t.digest="";const r=(0,a.JSONCodec)(),n=(0,h.headers)();return n.set(d.JsHeaders.RollupHdr,d.JsHeaders.RollupValueSubject),yield this.js.publish(this._metaSubject(t.name),r.encode(t),{headers:n}),this.jsm.streams.purge(this.stream,{filter:this._chunkSubject(t.nuid)})}))}update(e,t={}){var r;return n(this,void 0,void 0,(function*(){const n=yield this.rawInfo(e);if(null===n)return Promise.reject(new Error("object not found"));if(n.deleted)return Promise.reject(new Error("cannot update meta for a deleted object"));t.name=null!==(r=t.name)&&void 0!==r?r:n.name;const{name:i,error:s}=this._sanitizeName(t.name);if(s)return Promise.reject(s);if(e!==t.name){const e=yield this.info(t.name);if(e&&!e.deleted)return Promise.reject(new Error("an object already exists with that name"))}t.name=i;const o=Object.assign({},n,_(t)),c=(0,a.JSONCodec)();return this.js.publish(this._metaSubject(o.name),c.encode(o))}))}watch(e={}){var t,r;return n(this,void 0,void 0,(function*(){e.includeHistory=null!==(t=e.includeHistory)&&void 0!==t&&t,e.ignoreDeletes=null!==(r=e.ignoreDeletes)&&void 0!==r&&r;let n=!1;const i=new f.QueuedIteratorImpl,s=this._metaSubjectAll();try{yield this.jsm.streams.getMessage(this.stream,{last_by_subj:s})}catch(e){"404"===e.code?(i.push(null),n=!0):i.stop(e)}const o=(0,a.JSONCodec)(),c=(0,d.consumerOpts)();c.orderedConsumer(),e.includeHistory?c.deliverLastPerSubject():(n=!0,c.deliverNew()),c.callback(((t,r)=>{var s;if(t)i.stop(t);else if(null!==r){const t=o.decode(r.data);t.deleted&&!0===e.ignoreDeletes||i.push(t),0!==(null===(s=r.info)||void 0===s?void 0:s.pending)||n||(n=!0,i.push(null))}}));const u=yield this.js.subscribe(s,c);return i._data=u,i.iterClosed.then((()=>{u.unsubscribe()})),u.closed.then((()=>{i.stop()})).catch((e=>{i.stop(e)})),i}))}_chunkSubject(e){return`$O.${this.name}.C.${e}`}_metaSubject(e){return`$O.${this.name}.M.${o.Base64UrlPaddedCodec.encode(e)}`}_metaSubjectAll(){return`$O.${this.name}.M.>`}init(e={}){return n(this,void 0,void 0,(function*(){try{this.stream=m(this.name)}catch(e){return Promise.reject(e)}const t=Object.assign({},e);t.name=this.stream,t.allow_rollup_hdrs=!0,t.discard=y.DiscardPolicy.New,t.subjects=[`$O.${this.name}.C.>`,`$O.${this.name}.M.>`],e.placement&&(t.placement=e.placement);try{yield this.jsm.streams.info(t.name)}catch(e){"stream not found"===e.message&&(yield this.jsm.streams.add(t))}}))}static create(e,t,r={}){return n(this,void 0,void 0,(function*(){const n=yield e.jetstreamManager(),i=new w(t,n,e);return yield i.init(r),Promise.resolve(i)}))}}t.ObjectStoreImpl=w},2548:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isConsumerOptsBuilder=t.consumerOpts=t.ConsumerOptsBuilderImpl=t.kvPrefix=t.RepublishHeaders=t.DirectMsgHeaders=t.JsHeaders=t.AdvisoryKind=void 0;const n=r(5738),i=r(7349);var s,o,a,c;(c=t.AdvisoryKind||(t.AdvisoryKind={})).API="api_audit",c.StreamAction="stream_action",c.ConsumerAction="consumer_action",c.SnapshotCreate="snapshot_create",c.SnapshotComplete="snapshot_complete",c.RestoreCreate="restore_create",c.RestoreComplete="restore_complete",c.MaxDeliver="max_deliver",c.Terminated="terminated",c.Ack="consumer_ack",c.StreamLeaderElected="stream_leader_elected",c.StreamQuorumLost="stream_quorum_lost",c.ConsumerLeaderElected="consumer_leader_elected",c.ConsumerQuorumLost="consumer_quorum_lost",(a=t.JsHeaders||(t.JsHeaders={})).StreamSourceHdr="Nats-Stream-Source",a.LastConsumerSeqHdr="Nats-Last-Consumer",a.LastStreamSeqHdr="Nats-Last-Stream",a.ConsumerStalledHdr="Nats-Consumer-Stalled",a.MessageSizeHdr="Nats-Msg-Size",a.RollupHdr="Nats-Rollup",a.RollupValueSubject="sub",a.RollupValueAll="all",(o=t.DirectMsgHeaders||(t.DirectMsgHeaders={})).Stream="Nats-Stream",o.Sequence="Nats-Sequence",o.TimeStamp="Nats-Time-Stamp",o.Subject="Nats-Subject",(s=t.RepublishHeaders||(t.RepublishHeaders={})).Stream="Nats-Stream",s.Subject="Nats-Subject",s.Sequence="Nats-Sequence",s.LastSequence="Nats-Last-Sequence",s.Size="Nats-Msg-Size",t.kvPrefix="KV_";class u{constructor(e){this.stream="",this.mack=!1,this.ordered=!1,this.config=(0,n.defaultConsumer)("",e||{})}getOpts(){var e;const t={};if(t.config=Object.assign({},this.config),t.config.filter_subject&&(this.filterSubject(t.config.filter_subject),t.config.filter_subject=void 0),t.config.filter_subjects&&(null===(e=t.config.filter_subjects)||void 0===e||e.forEach((e=>{this.filterSubject(e)})),t.config.filter_subjects=void 0),t.mack=this.mack,t.stream=this.stream,t.callbackFn=this.callbackFn,t.max=this.max,t.queue=this.qname,t.ordered=this.ordered,t.config.ack_policy=t.ordered?n.AckPolicy.None:t.config.ack_policy,t.isBind=t.isBind||!1,this.filters)switch(this.filters.length){case 0:break;case 1:t.config.filter_subject=this.filters[0];break;default:t.config.filter_subjects=this.filters}return t}description(e){return this.config.description=e,this}deliverTo(e){return this.config.deliver_subject=e,this}durable(e){return(0,i.validateDurableName)(e),this.config.durable_name=e,this}startSequence(e){if(e<=0)throw new Error("sequence must be greater than 0");return this.config.deliver_policy=n.DeliverPolicy.StartSequence,this.config.opt_start_seq=e,this}startTime(e){return this.config.deliver_policy=n.DeliverPolicy.StartTime,this.config.opt_start_time=e.toISOString(),this}deliverAll(){return this.config.deliver_policy=n.DeliverPolicy.All,this}deliverLastPerSubject(){return this.config.deliver_policy=n.DeliverPolicy.LastPerSubject,this}deliverLast(){return this.config.deliver_policy=n.DeliverPolicy.Last,this}deliverNew(){return this.config.deliver_policy=n.DeliverPolicy.New,this}startAtTimeDelta(e){return this.startTime(new Date(Date.now()-e)),this}headersOnly(){return this.config.headers_only=!0,this}ackNone(){return this.config.ack_policy=n.AckPolicy.None,this}ackAll(){return this.config.ack_policy=n.AckPolicy.All,this}ackExplicit(){return this.config.ack_policy=n.AckPolicy.Explicit,this}ackWait(e){return this.config.ack_wait=(0,i.nanos)(e),this}maxDeliver(e){return this.config.max_deliver=e,this}filterSubject(e){return this.filters=this.filters||[],this.filters.push(e),this}replayInstantly(){return this.config.replay_policy=n.ReplayPolicy.Instant,this}replayOriginal(){return this.config.replay_policy=n.ReplayPolicy.Original,this}sample(e){if((e=Math.trunc(e))<0||e>100)throw new Error("value must be between 0-100");return this.config.sample_freq=`${e}%`,this}limit(e){return this.config.rate_limit_bps=e,this}maxWaiting(e){return this.config.max_waiting=e,this}maxAckPending(e){return this.config.max_ack_pending=e,this}idleHeartbeat(e){return this.config.idle_heartbeat=(0,i.nanos)(e),this}flowControl(){return this.config.flow_control=!0,this}deliverGroup(e){return this.queue(e),this}manualAck(){return this.mack=!0,this}maxMessages(e){return this.max=e,this}callback(e){return this.callbackFn=e,this}queue(e){return this.qname=e,this.config.deliver_group=e,this}orderedConsumer(){return this.ordered=!0,this}bind(e,t){return this.stream=e,this.config.durable_name=t,this.isBind=!0,this}bindStream(e){return this.stream=e,this}inactiveEphemeralThreshold(e){return this.config.inactive_threshold=(0,i.nanos)(e),this}maxPullBatch(e){return this.config.max_batch=e,this}maxPullRequestExpires(e){return this.config.max_expires=(0,i.nanos)(e),this}memory(){return this.config.mem_storage=!0,this}numReplicas(e){return this.config.num_replicas=e,this}}t.ConsumerOptsBuilderImpl=u,t.consumerOpts=function(e){return new u(e)},t.isConsumerOptsBuilder=function(e){return"function"==typeof e.getOpts}},5136:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.credsAuthenticator=t.jwtAuthenticator=t.nkeyAuthenticator=t.tokenAuthenticator=t.usernamePasswordAuthenticator=t.noAuthFn=t.multiAuthenticator=void 0;const n=r(1614),i=r(3164),s=r(9550);function o(e){return t=>{const r="function"==typeof e?e():e,s=r?n.nkeys.fromSeed(r):void 0,o=s?s.getPublicKey():"",a=i.TE.encode(t||""),c=void 0!==s&&t?s.sign(a):void 0;return{nkey:o,sig:c?n.nkeys.encode(c):""}}}function a(e,t){return r=>{const n="function"==typeof e?e():e,i=o(t),{nkey:s,sig:a}=i(r);return{jwt:n,nkey:s,sig:a}}}t.multiAuthenticator=function(e){return t=>{let r={};return e.forEach((e=>{const n=e(t)||{};r=Object.assign(r,n)})),r}},t.noAuthFn=function(){return()=>{}},t.usernamePasswordAuthenticator=function(e,t){return()=>({user:"function"==typeof e?e():e,pass:"function"==typeof t?t():t})},t.tokenAuthenticator=function(e){return()=>({auth_token:"function"==typeof e?e():e})},t.nkeyAuthenticator=o,t.jwtAuthenticator=a,t.credsAuthenticator=function(e){const t="function"!=typeof e?()=>e:e,r=()=>{const e=/\s*(?:(?:[-]{3,}[^\n]*[-]{3,}\n)(.+)(?:\n\s*[-]{3,}[^\n]*[-]{3,}\n))/gi,r=i.TD.decode(t());let n=e.exec(r);if(!n)throw s.NatsError.errorForCode(s.ErrorCode.BadCreds);const o=n[1].trim();if(n=e.exec(r),!n)throw s.NatsError.errorForCode(s.ErrorCode.BadCreds);if(!n)throw s.NatsError.errorForCode(s.ErrorCode.BadCreds);return{jwt:o,seed:i.TE.encode(n[1].trim())}};return a((()=>{const{jwt:e}=r();return e}),(()=>{const{seed:e}=r();return e}))}},2936:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Base64UrlPaddedCodec=t.Base64UrlCodec=t.Base64Codec=void 0;class r{static encode(e){if("string"==typeof e)return btoa(e);const t=Array.from(e);return btoa(String.fromCharCode(...t))}static decode(e,t=!1){const r=atob(e);return t?Uint8Array.from(r,(e=>e.charCodeAt(0))):r}}t.Base64Codec=r;class n{static encode(e){return n.toB64URLEncoding(r.encode(e))}static decode(e,t=!1){return r.decode(n.fromB64URLEncoding(e),t)}static toB64URLEncoding(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}static fromB64URLEncoding(e){return e.replace(/_/g,"/").replace(/-/g,"+")}}t.Base64UrlCodec=n;class i{static encode(e){return i.toB64URLEncoding(r.encode(e))}static decode(e,t=!1){return i.decode(i.fromB64URLEncoding(e),t)}static toB64URLEncoding(e){return e.replace(/\+/g,"-").replace(/\//g,"_")}static fromB64URLEncoding(e){return e.replace(/_/g,"/").replace(/-/g,"+")}}t.Base64UrlPaddedCodec=i},7548:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bench=t.Metric=void 0;const s=r(1740),o=r(7751),a=r(3024),c=r(9550);class u{constructor(e,t){this.name=e,this.duration=t,this.date=Date.now(),this.payload=0,this.msgs=0,this.bytes=0}toString(){const e=this.duration/1e3,t=Math.round(this.msgs/e),r=this.asyncRequests?"asyncRequests":"";let n="";return this.max&&(n=`${this.min}/${this.max}`),`${this.name}${r?" [asyncRequests]":""} ${o=t,o.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")} msgs/sec - [${e.toFixed(2)} secs] ~ ${i=this.bytes,s=e,function(e,t=!1){const r=t?1e3:1024,n=t?["k","M","G","T","P","E"]:["K","M","G","T","P","E"],i=t?"iB":"B";if(e<r)return`${e.toFixed(2)} ${i}/sec`;const s=parseInt(Math.log(e)/Math.log(r)+""),o=parseInt(s-1+"");return`${(e/Math.pow(r,s)).toFixed(2)} ${n[o]}${i}/sec`}(i/s)} ${n}`;var i,s,o}toCsv(){return`"${this.name}",${new Date(this.date).toISOString()},${this.lang},${this.version},${this.msgs},${this.payload},${this.bytes},${this.duration},${!!this.asyncRequests&&this.asyncRequests}\n`}static header(){return"Test,Date,Lang,Version,Count,MsgPayload,Bytes,Millis,Async\n"}}t.Metric=u,t.Bench=class{constructor(e,t={msgs:1e5,size:128,subject:"",asyncRequests:!1,pub:!1,sub:!1,req:!1,rep:!1}){if(this.nc=e,this.callbacks=t.callbacks||!1,this.msgs=t.msgs||0,this.size=t.size||0,this.subject=t.subject||o.nuid.next(),this.asyncRequests=t.asyncRequests||!1,this.pub=t.pub||!1,this.sub=t.sub||!1,this.req=t.req||!1,this.rep=t.rep||!1,this.perf=new a.Perf,this.payload=this.size?new Uint8Array(this.size):s.Empty,!(this.pub||this.sub||this.req||this.rep))throw new Error("no bench option selected")}run(){return n(this,void 0,void 0,(function*(){return this.nc.closed().then((e=>{if(e)throw new c.NatsError(`bench closed with an error: ${e.message}`,c.ErrorCode.Unknown,e)})),this.callbacks?yield this.runCallbacks():yield this.runAsync(),this.processMetrics()}))}processMetrics(){const e=this.nc,{lang:t,version:r}=e.protocol.transport;this.pub&&this.sub&&this.perf.measure("pubsub","pubStart","subStop"),this.req&&this.rep&&this.perf.measure("reqrep","reqStart","reqStop");const n=this.perf.getEntries(),i=n.find((e=>"pubsub"===e.name)),s=n.find((e=>"reqrep"===e.name)),o=n.find((e=>"req"===e.name)),a=n.find((e=>"rep"===e.name)),c=n.find((e=>"pub"===e.name)),l=n.find((e=>"sub"===e.name)),h=this.nc.stats(),d=[];if(i){const{name:e,duration:n}=i,s=new u(e,n);s.msgs=2*this.msgs,s.bytes=h.inBytes+h.outBytes,s.lang=t,s.version=r,s.payload=this.payload.length,d.push(s)}if(s){const{name:e,duration:n}=s,i=new u(e,n);i.msgs=2*this.msgs,i.bytes=h.inBytes+h.outBytes,i.lang=t,i.version=r,i.payload=this.payload.length,d.push(i)}if(c){const{name:e,duration:n}=c,i=new u(e,n);i.msgs=this.msgs,i.bytes=h.outBytes,i.lang=t,i.version=r,i.payload=this.payload.length,d.push(i)}if(l){const{name:e,duration:n}=l,i=new u(e,n);i.msgs=this.msgs,i.bytes=h.inBytes,i.lang=t,i.version=r,i.payload=this.payload.length,d.push(i)}if(a){const{name:e,duration:n}=a,i=new u(e,n);i.msgs=this.msgs,i.bytes=h.inBytes+h.outBytes,i.lang=t,i.version=r,i.payload=this.payload.length,d.push(i)}if(o){const{name:e,duration:n}=o,i=new u(e,n);i.msgs=this.msgs,i.bytes=h.inBytes+h.outBytes,i.lang=t,i.version=r,i.payload=this.payload.length,d.push(i)}return d}runCallbacks(){return n(this,void 0,void 0,(function*(){const e=[];if(this.sub){const t=(0,a.deferred)();e.push(t);let r=0;this.nc.subscribe(this.subject,{max:this.msgs,callback:()=>{r++,1===r&&this.perf.mark("subStart"),r===this.msgs&&(this.perf.mark("subStop"),this.perf.measure("sub","subStart","subStop"),t.resolve())}})}if(this.rep){const t=(0,a.deferred)();e.push(t);let r=0;this.nc.subscribe(this.subject,{max:this.msgs,callback:(e,n)=>{n.respond(this.payload),r++,1===r&&this.perf.mark("repStart"),r===this.msgs&&(this.perf.mark("repStop"),this.perf.measure("rep","repStart","repStop"),t.resolve())}})}if(this.pub){const t=(()=>n(this,void 0,void 0,(function*(){this.perf.mark("pubStart");for(let e=0;e<this.msgs;e++)this.nc.publish(this.subject,this.payload);yield this.nc.flush(),this.perf.mark("pubStop"),this.perf.measure("pub","pubStart","pubStop")})))();e.push(t)}if(this.req){const t=(()=>n(this,void 0,void 0,(function*(){if(this.asyncRequests){this.perf.mark("reqStart");const e=[];for(let t=0;t<this.msgs;t++)e.push(this.nc.request(this.subject,this.payload,{timeout:2e4}));yield Promise.all(e),this.perf.mark("reqStop"),this.perf.measure("req","reqStart","reqStop")}else{this.perf.mark("reqStart");for(let e=0;e<this.msgs;e++)yield this.nc.request(this.subject);this.perf.mark("reqStop"),this.perf.measure("req","reqStart","reqStop")}})))();e.push(t)}yield Promise.all(e)}))}runAsync(){return n(this,void 0,void 0,(function*(){const e=[];if(this.rep){let t=!1;const r=this.nc.subscribe(this.subject,{max:this.msgs}),s=(()=>n(this,void 0,void 0,(function*(){var e,n,s,o;try{for(var a,c=!0,u=i(r);!(e=(a=yield u.next()).done);){o=a.value,c=!1;try{const e=o;t||(this.perf.mark("repStart"),t=!0),e.respond(this.payload)}finally{c=!0}}}catch(e){n={error:e}}finally{try{c||e||!(s=u.return)||(yield s.call(u))}finally{if(n)throw n.error}}yield this.nc.flush(),this.perf.mark("repStop"),this.perf.measure("rep","repStart","repStop")})))();e.push(s)}if(this.sub){let t=!1;const r=this.nc.subscribe(this.subject,{max:this.msgs}),s=(()=>n(this,void 0,void 0,(function*(){var e,n,s;try{for(var o,a=!0,c=i(r);!(e=(o=yield c.next()).done);){o.value,a=!1;try{t||(this.perf.mark("subStart"),t=!0)}finally{a=!0}}}catch(e){n={error:e}}finally{try{a||e||!(s=c.return)||(yield s.call(c))}finally{if(n)throw n.error}}this.perf.mark("subStop"),this.perf.measure("sub","subStart","subStop")})))();e.push(s)}if(this.pub){const t=(()=>n(this,void 0,void 0,(function*(){this.perf.mark("pubStart");for(let e=0;e<this.msgs;e++)this.nc.publish(this.subject,this.payload);yield this.nc.flush(),this.perf.mark("pubStop"),this.perf.measure("pub","pubStart","pubStop")})))();e.push(t)}if(this.req){const t=(()=>n(this,void 0,void 0,(function*(){if(this.asyncRequests){this.perf.mark("reqStart");const e=[];for(let t=0;t<this.msgs;t++)e.push(this.nc.request(this.subject,this.payload,{timeout:2e4}));yield Promise.all(e),this.perf.mark("reqStop"),this.perf.measure("req","reqStart","reqStop")}else{this.perf.mark("reqStart");for(let e=0;e<this.msgs;e++)yield this.nc.request(this.subject);this.perf.mark("reqStop"),this.perf.measure("req","reqStart","reqStop")}})))();e.push(t)}yield Promise.all(e)}))}}},2941:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSONCodec=t.StringCodec=void 0;const n=r(3164),i=r(9550);t.StringCodec=function(){return{encode:e=>n.TE.encode(e),decode:e=>n.TD.decode(e)}},t.JSONCodec=function(e){return{encode(e){try{return void 0===e&&(e=null),n.TE.encode(JSON.stringify(e))}catch(e){throw i.NatsError.errorForCode(i.ErrorCode.BadJson,e)}},decode(t){try{return JSON.parse(n.TD.decode(t),e)}catch(e){throw i.NatsError.errorForCode(i.ErrorCode.BadJson,e)}}}}},9550:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ServiceVerb=t.DEFAULT_HOST=t.DEFAULT_PORT=t.createInbox=t.ServiceError=t.ServiceErrorCodeHeader=t.ServiceErrorHeader=t.ServiceResponseType=t.RequestStrategy=t.Match=t.NatsError=t.Messages=t.isNatsError=t.ErrorCode=t.DebugEvents=t.Events=void 0;const n=r(7751);var i,s,o;(o=t.Events||(t.Events={})).Disconnect="disconnect",o.Reconnect="reconnect",o.Update="update",o.LDM="ldm",o.Error="error",(s=t.DebugEvents||(t.DebugEvents={})).Reconnecting="reconnecting",s.PingTimer="pingTimer",s.StaleConnection="staleConnection",function(e){e.ApiError="BAD API",e.BadAuthentication="BAD_AUTHENTICATION",e.BadCreds="BAD_CREDS",e.BadHeader="BAD_HEADER",e.BadJson="BAD_JSON",e.BadPayload="BAD_PAYLOAD",e.BadSubject="BAD_SUBJECT",e.Cancelled="CANCELLED",e.ConnectionClosed="CONNECTION_CLOSED",e.ConnectionDraining="CONNECTION_DRAINING",e.ConnectionRefused="CONNECTION_REFUSED",e.ConnectionTimeout="CONNECTION_TIMEOUT",e.Disconnect="DISCONNECT",e.InvalidOption="INVALID_OPTION",e.InvalidPayload="INVALID_PAYLOAD",e.MaxPayloadExceeded="MAX_PAYLOAD_EXCEEDED",e.NoResponders="503",e.NotFunction="NOT_FUNC",e.RequestError="REQUEST_ERROR",e.ServerOptionNotAvailable="SERVER_OPT_NA",e.SubClosed="SUB_CLOSED",e.SubDraining="SUB_DRAINING",e.Timeout="TIMEOUT",e.Tls="TLS",e.Unknown="UNKNOWN_ERROR",e.WssRequired="WSS_REQUIRED",e.JetStreamInvalidAck="JESTREAM_INVALID_ACK",e.JetStream404NoMessages="404",e.JetStream408RequestTimeout="408",e.JetStream409MaxAckPendingExceeded="409",e.JetStream409="409",e.JetStreamNotEnabled="503",e.JetStreamIdleHeartBeat="IDLE_HEARTBEAT",e.AuthorizationViolation="AUTHORIZATION_VIOLATION",e.AuthenticationExpired="AUTHENTICATION_EXPIRED",e.ProtocolError="NATS_PROTOCOL_ERR",e.PermissionsViolation="PERMISSIONS_VIOLATION"}(i=t.ErrorCode||(t.ErrorCode={})),t.isNatsError=function(e){return"string"==typeof e.code};class a{constructor(){this.messages=new Map,this.messages.set(i.InvalidPayload,"Invalid payload type - payloads can be 'binary', 'string', or 'json'"),this.messages.set(i.BadJson,"Bad JSON"),this.messages.set(i.WssRequired,"TLS is required, therefore a secure websocket connection is also required")}static getMessage(e){return c.getMessage(e)}getMessage(e){return this.messages.get(e)||e}}t.Messages=a;const c=new a;class u extends Error{constructor(e,t,r){super(e),this.name="NatsError",this.message=e,this.code=t,this.chainedError=r}static errorForCode(e,t){const r=a.getMessage(e);return new u(r,e,t)}isAuthError(){return this.code===i.AuthenticationExpired||this.code===i.AuthorizationViolation}isPermissionError(){return this.code===i.PermissionsViolation}isProtocolError(){return this.code===i.ProtocolError}isJetStreamError(){return void 0!==this.api_error}jsError(){return this.api_error?this.api_error:null}}var l,h,d,f;t.NatsError=u,(d=t.Match||(t.Match={}))[d.Exact=0]="Exact",d[d.CanonicalMIME=1]="CanonicalMIME",d[d.IgnoreCase=2]="IgnoreCase",(h=t.RequestStrategy||(t.RequestStrategy={})).Timer="timer",h.Count="count",h.JitterTimer="jitterTimer",h.SentinelMsg="sentinelMsg",(l=t.ServiceResponseType||(t.ServiceResponseType={})).STATS="io.nats.micro.v1.stats_response",l.INFO="io.nats.micro.v1.info_response",l.PING="io.nats.micro.v1.ping_response",t.ServiceErrorHeader="Nats-Service-Error",t.ServiceErrorCodeHeader="Nats-Service-Error-Code";class p extends Error{constructor(e,t){super(t),this.code=e}static isServiceError(e){return null!==p.toServiceError(e)}static toServiceError(e){var r,n;const i=(null===(r=null==e?void 0:e.headers)||void 0===r?void 0:r.get(t.ServiceErrorCodeHeader))||"";if(""!==i){const r=parseInt(i)||400,s=(null===(n=null==e?void 0:e.headers)||void 0===n?void 0:n.get(t.ServiceErrorHeader))||"";return new p(r,s.length?s:i)}return null}}t.ServiceError=p,t.createInbox=function(e=""){if("string"!=typeof(e=e||"_INBOX"))throw new Error("prefix must be a string");return e.split(".").forEach((t=>{if("*"===t||">"===t)throw new Error(`inbox prefixes cannot have wildcards '${e}'`)})),`${e}.${n.nuid.next()}`},t.DEFAULT_PORT=4222,t.DEFAULT_HOST="127.0.0.1",(f=t.ServiceVerb||(t.ServiceVerb={})).PING="PING",f.STATS="STATS",f.INFO="INFO"},9481:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataBuffer=void 0;const n=r(3164);t.DataBuffer=class{constructor(){this.buffers=[],this.byteLength=0}static concat(...e){let t=0;for(let r=0;r<e.length;r++)t+=e[r].length;const r=new Uint8Array(t);let n=0;for(let t=0;t<e.length;t++)r.set(e[t],n),n+=e[t].length;return r}static fromAscii(e){return e||(e=""),n.TE.encode(e)}static toAscii(e){return n.TD.decode(e)}reset(){this.buffers.length=0,this.byteLength=0}pack(){if(this.buffers.length>1){const e=new Uint8Array(this.byteLength);let t=0;for(let r=0;r<this.buffers.length;r++)e.set(this.buffers[r],t),t+=this.buffers[r].length;this.buffers.length=0,this.buffers.push(e)}}shift(){if(this.buffers.length){const e=this.buffers.shift();if(e)return this.byteLength-=e.length,e}return new Uint8Array(0)}drain(e){if(this.buffers.length){this.pack();const t=this.buffers.pop();if(t){const r=this.byteLength;(void 0===e||e>r)&&(e=r);const n=t.subarray(0,e);return r>e&&this.buffers.push(t.subarray(e)),this.byteLength=r-e,n}}return new Uint8Array(0)}fill(e,...t){e&&(this.buffers.push(e),this.byteLength+=e.length);for(let e=0;e<t.length;e++)t[e]&&t[e].length&&(this.buffers.push(t[e]),this.byteLength+=t[e].length)}peek(){return this.buffers.length?(this.pack(),this.buffers[0]):new Uint8Array(0)}size(){return this.byteLength}length(){return this.buffers.length}}},2203:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.writeAll=t.readAll=t.DenoBuffer=t.append=t.concat=t.MAX_SIZE=t.assert=t.AssertionError=void 0;const n=r(3164);class i extends Error{constructor(e){super(e),this.name="AssertionError"}}function s(e,t="Assertion failed."){if(!e)throw new i(t)}function o(e,t,r=0){const n=t.byteLength-r;return e.byteLength>n&&(e=e.subarray(0,n)),t.set(e,r),e.byteLength}function a(e,t){if(void 0===e&&void 0===t)return new Uint8Array(0);if(void 0===e)return t;if(void 0===t)return e;const r=new Uint8Array(e.length+t.length);return r.set(e,0),r.set(t,e.length),r}t.AssertionError=i,t.assert=s,t.MAX_SIZE=Math.pow(2,32)-2,t.concat=a,t.append=function(e,t){return a(e,Uint8Array.of(t))};class c{constructor(e){this._off=0,this._buf=null!=e?new Uint8Array(e):new Uint8Array(0)}bytes(e={copy:!0}){return!1===e.copy?this._buf.subarray(this._off):this._buf.slice(this._off)}empty(){return this._buf.byteLength<=this._off}get length(){return this._buf.byteLength-this._off}get capacity(){return this._buf.buffer.byteLength}truncate(e){if(0!==e){if(e<0||e>this.length)throw Error("bytes.Buffer: truncation out of range");this._reslice(this._off+e)}else this.reset()}reset(){this._reslice(0),this._off=0}_tryGrowByReslice(e){const t=this._buf.byteLength;return e<=this.capacity-t?(this._reslice(t+e),t):-1}_reslice(e){s(e<=this._buf.buffer.byteLength),this._buf=new Uint8Array(this._buf.buffer,0,e)}readByte(){const e=new Uint8Array(1);return this.read(e)?e[0]:null}read(e){if(this.empty())return this.reset(),0===e.byteLength?0:null;const t=o(this._buf.subarray(this._off),e);return this._off+=t,t}writeByte(e){return this.write(Uint8Array.of(e))}writeString(e){return this.write(n.TE.encode(e))}write(e){const t=this._grow(e.byteLength);return o(e,this._buf,t)}_grow(e){const r=this.length;0===r&&0!==this._off&&this.reset();const n=this._tryGrowByReslice(e);if(n>=0)return n;const i=this.capacity;if(e<=Math.floor(i/2)-r)o(this._buf.subarray(this._off),this._buf);else{if(i+e>t.MAX_SIZE)throw new Error("The buffer cannot be grown beyond the maximum size.");{const r=new Uint8Array(Math.min(2*i+e,t.MAX_SIZE));o(this._buf.subarray(this._off),r),this._buf=r}}return this._off=0,this._reslice(Math.min(r+e,t.MAX_SIZE)),r}grow(e){if(e<0)throw Error("Buffer._grow: negative count");const t=this._grow(e);this._reslice(t)}readFrom(e){let t=0;const r=new Uint8Array(32768);for(;;){const n=this.capacity-this.length<32768,i=n?r:new Uint8Array(this._buf.buffer,this.length),s=e.read(i);if(null===s)return t;n?this.write(i.subarray(0,s)):this._reslice(this.length+s),t+=s}}}t.DenoBuffer=c,t.readAll=function(e){const t=new c;return t.readFrom(e),t.bytes()},t.writeAll=function(e,t){let r=0;for(;r<t.length;)r+=e.write(t.subarray(r))}},3164:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=t.TD=t.TE=t.Empty=void 0,t.Empty=new Uint8Array(0),t.TE=new TextEncoder,t.TD=new TextDecoder,t.encode=function(...e){const r=[];for(let n=0;n<e.length;n++)r.push(t.TE.encode(e[n]));return 0===r.length?t.Empty:1===r.length?r[0]:function(...e){let t=0;for(let r=0;r<e.length;r++)t+=e[r].length;const r=new Uint8Array(t);let n=0;for(let t=0;t<e.length;t++)r.set(e[t],n),n+=e[t].length;return r}(...r)},t.decode=function(e){return e&&0!==e.length?t.TD.decode(e):""}},4076:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MsgHdrsImpl=t.headers=t.canonicalMIMEHeaderKey=void 0;const n=r(3164),i=r(9550);function s(e){let t=!0;const r=new Array(e.length);for(let n=0;n<e.length;n++){let s=e.charCodeAt(n);if(58===s||s<33||s>126)throw new i.NatsError(`'${e[n]}' is not a valid character for a header key`,i.ErrorCode.BadHeader);t&&97<=s&&s<=122?s-=32:!t&&65<=s&&s<=90&&(s+=32),r[n]=s,t=45==s}return String.fromCharCode(...r)}t.canonicalMIMEHeaderKey=s,t.headers=function(e=0,t=""){if(0===e&&""!==t||e>0&&""===t)throw new Error("setting status requires both code and description");return new a(e,t)};const o="NATS/1.0";class a{constructor(e=0,t=""){this._code=e,this._description=t,this.headers=new Map}[Symbol.iterator](){return this.headers.entries()}size(){return this.headers.size}equals(e){if(e&&this.headers.size===e.headers.size&&this._code===e._code){for(const[t,r]of this.headers){const n=e.values(t);if(r.length!==n.length)return!1;const i=[...r].sort(),s=[...n].sort();for(let e=0;e<i.length;e++)if(i[e]!==s[e])return!1}return!0}return!1}static decode(e){const t=new a,r=n.TD.decode(e).split("\r\n"),i=r[0];if(i!==o){let e=i.replace(o,"").trim();if(e.length>0){t._code=parseInt(e,10),isNaN(t._code)&&(t._code=0);const r=t._code.toString();e=e.replace(r,""),t._description=e.trim()}}return r.length>=1&&r.slice(1).map((e=>{if(e){const r=e.indexOf(":");if(r>-1){const n=e.slice(0,r),i=e.slice(r+1).trim();t.append(n,i)}}})),t}toString(){if(0===this.headers.size&&0===this._code)return"";let e=o;this._code>0&&""!==this._description&&(e+=` ${this._code} ${this._description}`);for(const[t,r]of this.headers)for(let n=0;n<r.length;n++)e=`${e}\r\n${t}: ${r[n]}`;return`${e}\r\n\r\n`}encode(){return n.TE.encode(this.toString())}static validHeaderValue(e){if(/[\r\n]/.test(e))throw new i.NatsError("invalid header value - \\r and \\n are not allowed.",i.ErrorCode.BadHeader);return e.trim()}keys(){const e=[];for(const t of this.headers.keys())e.push(t);return e}findKeys(e,t=i.Match.Exact){const r=this.keys();switch(t){case i.Match.Exact:return r.filter((t=>t===e));case i.Match.CanonicalMIME:return e=s(e),r.filter((t=>t===e));default:{const t=e.toLowerCase();return r.filter((e=>t===e.toLowerCase()))}}}get(e,t=i.Match.Exact){const r=this.findKeys(e,t);if(r.length){const e=this.headers.get(r[0]);if(e)return Array.isArray(e)?e[0]:e}return""}has(e,t=i.Match.Exact){return this.findKeys(e,t).length>0}set(e,t,r=i.Match.Exact){this.delete(e,r),this.append(e,t,r)}append(e,t,r=i.Match.Exact){const n=s(e);r===i.Match.CanonicalMIME&&(e=n);const o=this.findKeys(e,r);e=o.length>0?o[0]:e;const c=a.validHeaderValue(t);let u=this.headers.get(e);u||(u=[],this.headers.set(e,u)),u.push(c)}values(e,t=i.Match.Exact){const r=[];return this.findKeys(e,t).forEach((e=>{const t=this.headers.get(e);t&&r.push(...t)})),r}delete(e,t=i.Match.Exact){this.findKeys(e,t).forEach((e=>{this.headers.delete(e)}))}get hasError(){return this._code>=300}get status(){return`${this._code} ${this._description}`.trim()}toRecord(){const e={};return this.keys().forEach((t=>{e[t]=this.values(t)})),e}get code(){return this._code}get description(){return this._description}static fromRecord(e){const t=new a;for(const r in e)t.headers.set(r,e[r]);return t}}t.MsgHdrsImpl=a},4992:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Heartbeat=void 0;const n=r(3024),i=r(9550);t.Heartbeat=class{constructor(e,t,r){this.ph=e,this.interval=t,this.maxOut=r,this.pendings=[]}start(){this.cancel(),this._schedule()}cancel(e){this.timer&&(clearTimeout(this.timer),this.timer=void 0),this._reset(),e&&this.ph.disconnect()}_schedule(){this.timer=setTimeout((()=>{if(this.ph.dispatchStatus({type:i.DebugEvents.PingTimer,data:`${this.pendings.length+1}`}),this.pendings.length===this.maxOut)return void this.cancel(!0);const e=(0,n.deferred)();this.ph.flush(e).then((()=>{this._reset()})).catch((()=>{this.cancel()})),this.pendings.push(e),this._schedule()}),this.interval)}_reset(){this.pendings=this.pendings.filter((e=>(e.resolve(),!1)))}}},9668:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IdleHeartbeat=void 0,t.IdleHeartbeat=class{constructor(e,t,r={maxOut:2}){this.interval=e,this.maxOut=(null==r?void 0:r.maxOut)||2,this.cancelAfter=(null==r?void 0:r.cancelAfter)||0,this.last=Date.now(),this.missed=0,this.count=0,this.callback=t,this._schedule()}cancel(){this.autoCancelTimer&&clearTimeout(this.autoCancelTimer),this.timer&&clearInterval(this.timer),this.timer=0,this.autoCancelTimer=0}work(){this.last=Date.now(),this.missed=0}_change(e,t=0,r=2){this.interval=e,this.maxOut=r,this.cancelAfter=t,this.restart()}restart(){this.cancel(),this._schedule()}_schedule(){this.cancelAfter>0&&(this.autoCancelTimer=setTimeout((()=>{this.cancel()}),this.cancelAfter)),this.timer=setInterval((()=>{if(this.count++,Date.now()-this.last>this.interval&&this.missed++,this.missed>=this.maxOut)try{!0===this.callback(this.missed)&&this.cancel()}catch(e){console.log(e)}}),this.interval)}}},2238:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.NoopKvCodecs=t.defaultBucketOpts=t.Bucket=t.Base64KeyCodec=t.TypedSubscription=t.parseIP=t.isIP=t.TE=t.TD=t.Metric=t.Bench=t.writeAll=t.readAll=t.MAX_SIZE=t.DenoBuffer=t.State=t.Parser=t.Kind=t.QueuedIteratorImpl=t.StringCodec=t.JSONCodec=t.usernamePasswordAuthenticator=t.tokenAuthenticator=t.nkeyAuthenticator=t.jwtAuthenticator=t.credsAuthenticator=t.RequestOne=t.checkUnsupportedOption=t.checkOptions=t.buildAuthenticator=t.DataBuffer=t.MuxSubscription=t.Heartbeat=t.MsgHdrsImpl=t.headers=t.canonicalMIMEHeaderKey=t.timeout=t.render=t.extend=t.delay=t.deferred=t.collect=t.ProtocolHandler=t.INFO=t.Connect=t.setTransportFactory=t.MsgImpl=t.nuid=t.Nuid=t.NatsConnectionImpl=void 0,t.ServiceVerb=t.Subscriptions=t.SubscriptionImpl=t.ServiceError=t.NatsError=t.Match=t.isNatsError=t.ErrorCode=t.createInbox=t.ServiceErrorHeader=t.ServiceErrorCodeHeader=t.ServiceResponseType=t.RequestStrategy=t.Events=t.DebugEvents=t.extractProtocolMessage=t.Empty=t.parseSemVer=t.compare=void 0;var s=r(8231);Object.defineProperty(t,"NatsConnectionImpl",{enumerable:!0,get:function(){return s.NatsConnectionImpl}});var o=r(7751);Object.defineProperty(t,"Nuid",{enumerable:!0,get:function(){return o.Nuid}}),Object.defineProperty(t,"nuid",{enumerable:!0,get:function(){return o.nuid}});var a=r(4621);Object.defineProperty(t,"MsgImpl",{enumerable:!0,get:function(){return a.MsgImpl}});var c=r(7256);Object.defineProperty(t,"setTransportFactory",{enumerable:!0,get:function(){return c.setTransportFactory}});var u=r(3546);Object.defineProperty(t,"Connect",{enumerable:!0,get:function(){return u.Connect}}),Object.defineProperty(t,"INFO",{enumerable:!0,get:function(){return u.INFO}}),Object.defineProperty(t,"ProtocolHandler",{enumerable:!0,get:function(){return u.ProtocolHandler}});var l=r(3024);Object.defineProperty(t,"collect",{enumerable:!0,get:function(){return l.collect}}),Object.defineProperty(t,"deferred",{enumerable:!0,get:function(){return l.deferred}}),Object.defineProperty(t,"delay",{enumerable:!0,get:function(){return l.delay}}),Object.defineProperty(t,"extend",{enumerable:!0,get:function(){return l.extend}}),Object.defineProperty(t,"render",{enumerable:!0,get:function(){return l.render}}),Object.defineProperty(t,"timeout",{enumerable:!0,get:function(){return l.timeout}});var h=r(4076);Object.defineProperty(t,"canonicalMIMEHeaderKey",{enumerable:!0,get:function(){return h.canonicalMIMEHeaderKey}}),Object.defineProperty(t,"headers",{enumerable:!0,get:function(){return h.headers}}),Object.defineProperty(t,"MsgHdrsImpl",{enumerable:!0,get:function(){return h.MsgHdrsImpl}});var d=r(4992);Object.defineProperty(t,"Heartbeat",{enumerable:!0,get:function(){return d.Heartbeat}});var f=r(2002);Object.defineProperty(t,"MuxSubscription",{enumerable:!0,get:function(){return f.MuxSubscription}});var p=r(9481);Object.defineProperty(t,"DataBuffer",{enumerable:!0,get:function(){return p.DataBuffer}});var y=r(6336);Object.defineProperty(t,"buildAuthenticator",{enumerable:!0,get:function(){return y.buildAuthenticator}}),Object.defineProperty(t,"checkOptions",{enumerable:!0,get:function(){return y.checkOptions}}),Object.defineProperty(t,"checkUnsupportedOption",{enumerable:!0,get:function(){return y.checkUnsupportedOption}});var m=r(4701);Object.defineProperty(t,"RequestOne",{enumerable:!0,get:function(){return m.RequestOne}});var g=r(5136);Object.defineProperty(t,"credsAuthenticator",{enumerable:!0,get:function(){return g.credsAuthenticator}}),Object.defineProperty(t,"jwtAuthenticator",{enumerable:!0,get:function(){return g.jwtAuthenticator}}),Object.defineProperty(t,"nkeyAuthenticator",{enumerable:!0,get:function(){return g.nkeyAuthenticator}}),Object.defineProperty(t,"tokenAuthenticator",{enumerable:!0,get:function(){return g.tokenAuthenticator}}),Object.defineProperty(t,"usernamePasswordAuthenticator",{enumerable:!0,get:function(){return g.usernamePasswordAuthenticator}});var b=r(2941);Object.defineProperty(t,"JSONCodec",{enumerable:!0,get:function(){return b.JSONCodec}}),Object.defineProperty(t,"StringCodec",{enumerable:!0,get:function(){return b.StringCodec}}),i(r(1614),t);var v=r(4629);Object.defineProperty(t,"QueuedIteratorImpl",{enumerable:!0,get:function(){return v.QueuedIteratorImpl}});var _=r(4335);Object.defineProperty(t,"Kind",{enumerable:!0,get:function(){return _.Kind}}),Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return _.Parser}}),Object.defineProperty(t,"State",{enumerable:!0,get:function(){return _.State}});var w=r(2203);Object.defineProperty(t,"DenoBuffer",{enumerable:!0,get:function(){return w.DenoBuffer}}),Object.defineProperty(t,"MAX_SIZE",{enumerable:!0,get:function(){return w.MAX_SIZE}}),Object.defineProperty(t,"readAll",{enumerable:!0,get:function(){return w.readAll}}),Object.defineProperty(t,"writeAll",{enumerable:!0,get:function(){return w.writeAll}});var E=r(7548);Object.defineProperty(t,"Bench",{enumerable:!0,get:function(){return E.Bench}}),Object.defineProperty(t,"Metric",{enumerable:!0,get:function(){return E.Metric}});var P=r(3164);Object.defineProperty(t,"TD",{enumerable:!0,get:function(){return P.TD}}),Object.defineProperty(t,"TE",{enumerable:!0,get:function(){return P.TE}});var S=r(9204);Object.defineProperty(t,"isIP",{enumerable:!0,get:function(){return S.isIP}}),Object.defineProperty(t,"parseIP",{enumerable:!0,get:function(){return S.parseIP}});var O=r(1449);Object.defineProperty(t,"TypedSubscription",{enumerable:!0,get:function(){return O.TypedSubscription}});var A=r(6635);Object.defineProperty(t,"Base64KeyCodec",{enumerable:!0,get:function(){return A.Base64KeyCodec}}),Object.defineProperty(t,"Bucket",{enumerable:!0,get:function(){return A.Bucket}}),Object.defineProperty(t,"defaultBucketOpts",{enumerable:!0,get:function(){return A.defaultBucketOpts}}),Object.defineProperty(t,"NoopKvCodecs",{enumerable:!0,get:function(){return A.NoopKvCodecs}});var C=r(6369);Object.defineProperty(t,"compare",{enumerable:!0,get:function(){return C.compare}}),Object.defineProperty(t,"parseSemVer",{enumerable:!0,get:function(){return C.parseSemVer}});var j=r(1740);Object.defineProperty(t,"Empty",{enumerable:!0,get:function(){return j.Empty}});var x=r(7256);Object.defineProperty(t,"extractProtocolMessage",{enumerable:!0,get:function(){return x.extractProtocolMessage}});var I=r(9550);Object.defineProperty(t,"DebugEvents",{enumerable:!0,get:function(){return I.DebugEvents}}),Object.defineProperty(t,"Events",{enumerable:!0,get:function(){return I.Events}}),Object.defineProperty(t,"RequestStrategy",{enumerable:!0,get:function(){return I.RequestStrategy}}),Object.defineProperty(t,"ServiceResponseType",{enumerable:!0,get:function(){return I.ServiceResponseType}});var k=r(9550);Object.defineProperty(t,"ServiceErrorCodeHeader",{enumerable:!0,get:function(){return k.ServiceErrorCodeHeader}}),Object.defineProperty(t,"ServiceErrorHeader",{enumerable:!0,get:function(){return k.ServiceErrorHeader}});var M=r(9550);Object.defineProperty(t,"createInbox",{enumerable:!0,get:function(){return M.createInbox}}),Object.defineProperty(t,"ErrorCode",{enumerable:!0,get:function(){return M.ErrorCode}}),Object.defineProperty(t,"isNatsError",{enumerable:!0,get:function(){return M.isNatsError}}),Object.defineProperty(t,"Match",{enumerable:!0,get:function(){return M.Match}}),Object.defineProperty(t,"NatsError",{enumerable:!0,get:function(){return M.NatsError}}),Object.defineProperty(t,"ServiceError",{enumerable:!0,get:function(){return M.ServiceError}});var N=r(3546);Object.defineProperty(t,"SubscriptionImpl",{enumerable:!0,get:function(){return N.SubscriptionImpl}});var T=r(3546);Object.defineProperty(t,"Subscriptions",{enumerable:!0,get:function(){return T.Subscriptions}});var R=r(9550);Object.defineProperty(t,"ServiceVerb",{enumerable:!0,get:function(){return R.ServiceVerb}})},9204:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseIP=t.isIP=t.ipV4=void 0;const r=4,n=16,i=48,s=57,o=65,a=70,c=97,u=102,l=16777215;function h(e,t,r,i){const s=new Uint8Array(n);return[0,0,0,0,0,0,0,0,0,0,255,255].forEach(((e,t)=>{s[t]=e})),s[12]=e,s[13]=t,s[14]=r,s[15]=i,s}function d(e){for(let t=0;t<e.length;t++)switch(e[t]){case".":return f(e);case":":return p(e)}}function f(e){const t=new Uint8Array(r);for(let n=0;n<r;n++){if(0===e.length)return;if(n>0){if("."!==e[0])return;e=e.substring(1)}const{n:r,c:i,ok:s}=y(e);if(!s||r>255)return;e=e.substring(i),t[n]=r}return h(t[0],t[1],t[2],t[3])}function p(e){const t=new Uint8Array(n);let i=-1;if(e.length>=2&&":"===e[0]&&":"===e[1]&&(i=0,0===(e=e.substring(2)).length))return t;let s=0;for(;s<n;){const{n:o,c:a,ok:c}=m(e);if(!c||o>65535)return;if(a<e.length&&"."===e[a]){if(i<0&&s!=n-r)return;if(s+r>n)return;const o=f(e);if(void 0===o)return;t[s]=o[12],t[s+1]=o[13],t[s+2]=o[14],t[s+3]=o[15],e="",s+=r;break}if(t[s]=o>>8,t[s+1]=o,s+=2,0===(e=e.substring(a)).length)break;if(":"!==e[0]||1==e.length)return;if(":"===(e=e.substring(1))[0]){if(i>=0)return;if(i=s,0===(e=e.substring(1)).length)break}}if(0===e.length){if(s<n){if(i<0)return;const e=n-s;for(let r=s-1;r>=i;r--)t[r+e]=t[r];for(let r=i+e-1;r>=i;r--)t[r]=0}else if(i>=0)return;return t}}function y(e){let t=0,r=0;for(t=0;t<e.length&&i<=e.charCodeAt(t)&&e.charCodeAt(t)<=s;t++)if(r=10*r+(e.charCodeAt(t)-i),r>=l)return{n:l,c:t,ok:!1};return 0===t?{n:0,c:0,ok:!1}:{n:r,c:t,ok:!0}}function m(e){let t=0,r=0;for(r=0;r<e.length;r++){if(i<=e.charCodeAt(r)&&e.charCodeAt(r)<=s)t*=16,t+=e.charCodeAt(r)-i;else if(c<=e.charCodeAt(r)&&e.charCodeAt(r)<=u)t*=16,t+=e.charCodeAt(r)-c+10;else{if(!(o<=e.charCodeAt(r)&&e.charCodeAt(r)<=a))break;t*=16,t+=e.charCodeAt(r)-o+10}if(t>=l)return{n:0,c:r,ok:!1}}return 0===r?{n:0,c:r,ok:!1}:{n:t,c:r,ok:!0}}t.ipV4=h,t.isIP=function(e){return void 0!==d(e)},t.parseIP=d},7658:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.usernamePasswordAuthenticator=t.tokenAuthenticator=t.StringCodec=t.ServiceVerb=t.ServiceResponseType=t.ServiceErrorHeader=t.ServiceErrorCodeHeader=t.ServiceError=t.RequestStrategy=t.nuid=t.Nuid=t.nkeys=t.nkeyAuthenticator=t.NatsError=t.MsgHdrsImpl=t.Metric=t.Match=t.jwtAuthenticator=t.JSONCodec=t.headers=t.Events=t.ErrorCode=t.Empty=t.deferred=t.DebugEvents=t.credsAuthenticator=t.createInbox=t.canonicalMIMEHeaderKey=t.buildAuthenticator=t.Bench=void 0;var n=r(2238);Object.defineProperty(t,"Bench",{enumerable:!0,get:function(){return n.Bench}}),Object.defineProperty(t,"buildAuthenticator",{enumerable:!0,get:function(){return n.buildAuthenticator}}),Object.defineProperty(t,"canonicalMIMEHeaderKey",{enumerable:!0,get:function(){return n.canonicalMIMEHeaderKey}}),Object.defineProperty(t,"createInbox",{enumerable:!0,get:function(){return n.createInbox}}),Object.defineProperty(t,"credsAuthenticator",{enumerable:!0,get:function(){return n.credsAuthenticator}}),Object.defineProperty(t,"DebugEvents",{enumerable:!0,get:function(){return n.DebugEvents}}),Object.defineProperty(t,"deferred",{enumerable:!0,get:function(){return n.deferred}}),Object.defineProperty(t,"Empty",{enumerable:!0,get:function(){return n.Empty}}),Object.defineProperty(t,"ErrorCode",{enumerable:!0,get:function(){return n.ErrorCode}}),Object.defineProperty(t,"Events",{enumerable:!0,get:function(){return n.Events}}),Object.defineProperty(t,"headers",{enumerable:!0,get:function(){return n.headers}}),Object.defineProperty(t,"JSONCodec",{enumerable:!0,get:function(){return n.JSONCodec}}),Object.defineProperty(t,"jwtAuthenticator",{enumerable:!0,get:function(){return n.jwtAuthenticator}}),Object.defineProperty(t,"Match",{enumerable:!0,get:function(){return n.Match}}),Object.defineProperty(t,"Metric",{enumerable:!0,get:function(){return n.Metric}}),Object.defineProperty(t,"MsgHdrsImpl",{enumerable:!0,get:function(){return n.MsgHdrsImpl}}),Object.defineProperty(t,"NatsError",{enumerable:!0,get:function(){return n.NatsError}}),Object.defineProperty(t,"nkeyAuthenticator",{enumerable:!0,get:function(){return n.nkeyAuthenticator}}),Object.defineProperty(t,"nkeys",{enumerable:!0,get:function(){return n.nkeys}}),Object.defineProperty(t,"Nuid",{enumerable:!0,get:function(){return n.Nuid}}),Object.defineProperty(t,"nuid",{enumerable:!0,get:function(){return n.nuid}}),Object.defineProperty(t,"RequestStrategy",{enumerable:!0,get:function(){return n.RequestStrategy}}),Object.defineProperty(t,"ServiceError",{enumerable:!0,get:function(){return n.ServiceError}}),Object.defineProperty(t,"ServiceErrorCodeHeader",{enumerable:!0,get:function(){return n.ServiceErrorCodeHeader}}),Object.defineProperty(t,"ServiceErrorHeader",{enumerable:!0,get:function(){return n.ServiceErrorHeader}}),Object.defineProperty(t,"ServiceResponseType",{enumerable:!0,get:function(){return n.ServiceResponseType}}),Object.defineProperty(t,"ServiceVerb",{enumerable:!0,get:function(){return n.ServiceVerb}}),Object.defineProperty(t,"StringCodec",{enumerable:!0,get:function(){return n.StringCodec}}),Object.defineProperty(t,"tokenAuthenticator",{enumerable:!0,get:function(){return n.tokenAuthenticator}}),Object.defineProperty(t,"usernamePasswordAuthenticator",{enumerable:!0,get:function(){return n.usernamePasswordAuthenticator}})},4621:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MsgImpl=t.isRequestError=void 0;const n=r(4076),i=r(3164),s=r(2941),o=r(9550);t.isRequestError=function(e){var t;return e&&0===e.data.length&&503===(null===(t=e.headers)||void 0===t?void 0:t.code)?o.NatsError.errorForCode(o.ErrorCode.NoResponders):null},t.MsgImpl=class{constructor(e,t,r){this._msg=e,this._rdata=t,this.publisher=r}get subject(){return this._subject||(this._subject=i.TD.decode(this._msg.subject)),this._subject}get reply(){return this._reply||(this._reply=i.TD.decode(this._msg.reply)),this._reply}get sid(){return this._msg.sid}get headers(){if(this._msg.hdr>-1&&!this._headers){const e=this._rdata.subarray(0,this._msg.hdr);this._headers=n.MsgHdrsImpl.decode(e)}return this._headers}get data(){return this._rdata?this._msg.hdr>-1?this._rdata.subarray(this._msg.hdr):this._rdata:new Uint8Array(0)}respond(e=i.Empty,t){return!!this.reply&&(this.publisher.publish(this.reply,e,t),!0)}size(){var e;return this._msg.subject.length+((null===(e=this._msg.reply)||void 0===e?void 0:e.length)||0)+(-1===this._msg.size?0:this._msg.size)}json(e){return(0,s.JSONCodec)(e).decode(this.data)}string(){return i.TD.decode(this.data)}}},2002:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MuxSubscription=void 0;const n=r(4621),i=r(9550);t.MuxSubscription=class{constructor(){this.reqs=new Map}size(){return this.reqs.size}init(e){return this.baseInbox=`${(0,i.createInbox)(e)}.`,this.baseInbox}add(e){isNaN(e.received)||(e.received=0),this.reqs.set(e.token,e)}get(e){return this.reqs.get(e)}cancel(e){this.reqs.delete(e.token)}getToken(e){const t=e.subject||"";return 0===t.indexOf(this.baseInbox)?t.substring(this.baseInbox.length):null}all(){return Array.from(this.reqs.values())}handleError(e,t){if(t&&t.permissionContext){if(e)return this.all().forEach((e=>{e.resolver(t,{})})),!0;const r=t.permissionContext;if("publish"===r.operation){const e=this.all().find((e=>e.requestSubject===r.subject));if(e)return e.resolver(t,{}),!0}}return!1}dispatcher(){return(e,t)=>{const r=this.getToken(t);if(r){const i=this.get(r);i&&(null===e&&t.headers&&(e=(0,n.isRequestError)(t)),i.resolver(e,t))}}}close(){const e=i.NatsError.errorForCode(i.ErrorCode.Timeout);this.reqs.forEach((t=>{t.resolver(e,{})}))}}},8231:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ServicesFactory=t.NatsConnectionImpl=void 0;const s=r(3024),o=r(3546),a=r(3164),c=r(1740),u=r(6369),l=r(6336),h=r(4629),d=r(4701),f=r(4621),p=r(938),y=r(1739),m=r(6087),g=r(7418),b=r(9550);class v{constructor(e){this.draining=!1,this.options=(0,l.parseOptions)(e),this.listeners=[]}static connect(e={}){return new Promise(((t,r)=>{const s=new v(e);o.ProtocolHandler.connect(s.options,s).then((e=>{s.protocol=e,function(){var t,r,o,a;n(this,void 0,void 0,(function*(){try{for(var n,c=!0,u=i(e.status());n=yield u.next(),!(t=n.done);){a=n.value,c=!1;try{const e=a;s.listeners.forEach((t=>{t.push(e)}))}finally{c=!0}}}catch(e){r={error:e}}finally{try{c||t||!(o=u.return)||(yield o.call(u))}finally{if(r)throw r.error}}}))}(),t(s)})).catch((e=>{r(e)}))}))}closed(){return this.protocol.closed}close(){return n(this,void 0,void 0,(function*(){yield this.protocol.close()}))}_check(e,t,r){if(this.isClosed())throw c.NatsError.errorForCode(b.ErrorCode.ConnectionClosed);if(t&&this.isDraining())throw c.NatsError.errorForCode(b.ErrorCode.ConnectionDraining);if(r&&this.protocol.noMorePublishing)throw c.NatsError.errorForCode(b.ErrorCode.ConnectionDraining);if(0===(e=e||"").length)throw c.NatsError.errorForCode(b.ErrorCode.BadSubject)}publish(e,t,r){this._check(e,!1,!0),this.protocol.publish(e,t,r)}subscribe(e,t={}){this._check(e,!0,!1);const r=new o.SubscriptionImpl(this.protocol,e,t);return this.protocol.subscribe(r),r}_resub(e,t,r){this._check(t,!0,!1);const n=e;n.max=r,r&&(n.max=r+n.received),this.protocol.resub(n,t)}requestMany(e,t=a.Empty,r={maxWait:1e3,maxMessages:-1}){try{this._check(e,!0,!0)}catch(e){return Promise.reject(e)}if(r.strategy=r.strategy||b.RequestStrategy.Timer,r.maxWait=r.maxWait||1e3,r.maxWait<1)return Promise.reject(new c.NatsError("timeout",b.ErrorCode.InvalidOption));const n=new h.QueuedIteratorImpl;function i(e){n.push((()=>{n.stop(e)}))}function s(e,t){e||null===t?i(null===e?void 0:e):n.push(t)}if(r.noMux){const t=(new Error).stack;let o="number"==typeof r.maxMessages&&r.maxMessages>0?r.maxMessages:-1;const u=this.subscribe((0,b.createInbox)(this.options.inboxPrefix),{callback:(e,n)=>{var i,a;if(0===(null===(i=null==n?void 0:n.data)||void 0===i?void 0:i.length)&&(null===(a=null==n?void 0:n.headers)||void 0===a?void 0:a.status)===b.ErrorCode.NoResponders&&(e=c.NatsError.errorForCode(b.ErrorCode.NoResponders)),e)return e.stack+=`\n\n${t}`,void l(e);s(null,n),r.strategy===b.RequestStrategy.Count&&(o--,0===o&&l()),r.strategy===b.RequestStrategy.JitterTimer&&(d(),h=setTimeout((()=>{l()}),300)),r.strategy===b.RequestStrategy.SentinelMsg&&n&&0===n.data.length&&l()}});u.closed.then((()=>{i()})).catch((e=>{n.stop(e)}));const l=e=>{e&&n.push((()=>{throw e})),d(),u.drain().then((()=>{i()})).catch((e=>{i()}))};n.iterClosed.then((()=>{d(),null==u||u.unsubscribe()})).catch((e=>{d(),null==u||u.unsubscribe()}));try{this.publish(e,a.Empty,{reply:u.getSubject()})}catch(e){l(e)}let h=setTimeout((()=>{l()}),r.maxWait);const d=()=>{h&&clearTimeout(h)}}else{const i=r;i.callback=s,n.iterClosed.then((()=>{o.cancel()})).catch((e=>{o.cancel(e)}));const o=new d.RequestMany(this.protocol.muxSubscriptions,e,i);this.protocol.request(o);try{this.publish(e,t,{reply:`${this.protocol.muxSubscriptions.baseInbox}${o.token}`,headers:r.headers})}catch(e){o.cancel(e)}}return Promise.resolve(n)}request(e,t,r={timeout:1e3,noMux:!1}){try{this._check(e,!0,!0)}catch(e){return Promise.reject(e)}if(r.timeout=r.timeout||1e3,r.timeout<1)return Promise.reject(new c.NatsError("timeout",b.ErrorCode.InvalidOption));if(!r.noMux&&r.reply)return Promise.reject(new c.NatsError("reply can only be used with noMux",b.ErrorCode.InvalidOption));if(r.noMux){const n=r.reply?r.reply:(0,b.createInbox)(this.options.inboxPrefix),i=(0,s.deferred)(),o=new Error;return this.subscribe(n,{max:1,timeout:r.timeout,callback:(e,t)=>{e?(e.code!==b.ErrorCode.Timeout&&(e.stack+=`\n\n${o.stack}`),i.reject(e)):(e=(0,f.isRequestError)(t))?(e.stack+=`\n\n${o.stack}`,i.reject(e)):i.resolve(t)}}).requestSubject=e,this.protocol.publish(e,t,{reply:n,headers:r.headers}),i}{const n=new d.RequestOne(this.protocol.muxSubscriptions,e,r);this.protocol.request(n);try{this.publish(e,t,{reply:`${this.protocol.muxSubscriptions.baseInbox}${n.token}`,headers:r.headers})}catch(e){n.cancel(e)}const i=Promise.race([n.timer,n.deferred]);return i.catch((()=>{n.cancel()})),i}}flush(){return this.isClosed()?Promise.reject(c.NatsError.errorForCode(b.ErrorCode.ConnectionClosed)):this.protocol.flush()}drain(){return this.isClosed()?Promise.reject(c.NatsError.errorForCode(b.ErrorCode.ConnectionClosed)):this.isDraining()?Promise.reject(c.NatsError.errorForCode(b.ErrorCode.ConnectionDraining)):(this.draining=!0,this.protocol.drain())}isClosed(){return this.protocol.isClosed()}isDraining(){return this.draining}getServer(){const e=this.protocol.getServer();return e?e.listen:""}status(){const e=new h.QueuedIteratorImpl;return e.iterClosed.then((()=>{const t=this.listeners.indexOf(e);this.listeners.splice(t,1)})),this.listeners.push(e),e}get info(){return this.protocol.isClosed()?void 0:this.protocol.info}stats(){return{inBytes:this.protocol.inBytes,outBytes:this.protocol.outBytes,inMsgs:this.protocol.inMsgs,outMsgs:this.protocol.outMsgs}}jetstreamManager(e={}){return n(this,void 0,void 0,(function*(){const t=new p.JetStreamManagerImpl(this,e);try{yield t.getAccountInfo()}catch(e){const t=e;throw t.code===b.ErrorCode.NoResponders&&(t.code=b.ErrorCode.JetStreamNotEnabled),t}return t}))}jetstream(e={}){return new y.JetStreamClientImpl(this,e)}getServerVersion(){const e=this.info;return e?(0,u.parseSemVer)(e.version):void 0}rtt(){return n(this,void 0,void 0,(function*(){if(!this.protocol._closed&&!this.protocol.connected)throw c.NatsError.errorForCode(b.ErrorCode.Disconnect);const e=Date.now();return yield this.flush(),Date.now()-e}))}get features(){return this.protocol.features}get services(){return this._services||(this._services=new _(this)),this._services}}t.NatsConnectionImpl=v;class _{constructor(e){this.nc=e}add(e){try{return new m.ServiceImpl(this.nc,e).start()}catch(e){return Promise.reject(e)}}client(e,t){return new g.ServiceClientImpl(this.nc,e,t)}}t.ServicesFactory=_},1614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nkeys=void 0,t.nkeys=r(6115)},7751:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nuid=t.Nuid=void 0;const r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",n=0xcfd41b9100000;class i{constructor(){this.buf=new Uint8Array(22),this.init()}init(){this.setPre(),this.initSeqAndInc(),this.fillSeq()}initSeqAndInc(){this.seq=Math.floor(Math.random()*n),this.inc=Math.floor(300*Math.random()+33)}setPre(){const e=new Uint8Array(12);var t,n;t=e,(null===(n=null===globalThis||void 0===globalThis?void 0:globalThis.crypto)||void 0===n?void 0:n.getRandomValues)?globalThis.crypto.getRandomValues(t):function(e){for(let t=0;t<e.length;t++)e[t]=Math.floor(255*Math.random())}(t);for(let t=0;t<12;t++){const n=e[t]%36;this.buf[t]=r.charCodeAt(n)}}fillSeq(){let e=this.seq;for(let t=21;t>=12;t--)this.buf[t]=r.charCodeAt(e%36),e=Math.floor(e/36)}next(){return this.seq+=this.inc,this.seq>n&&(this.setPre(),this.initSeqAndInc()),this.fillSeq(),String.fromCharCode.apply(String,this.buf)}reset(){this.init()}}t.Nuid=i,t.nuid=new i},6336:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkUnsupportedOption=t.checkOptions=t.parseOptions=t.buildAuthenticator=t.defaultOptions=t.DEFAULT_RECONNECT_TIME_WAIT=t.DEFAULT_MAX_PING_OUT=t.DEFAULT_PING_INTERVAL=t.DEFAULT_JITTER_TLS=t.DEFAULT_JITTER=t.DEFAULT_MAX_RECONNECT_ATTEMPTS=void 0;const n=r(3024),i=r(7256),s=r(9550),o=r(5136),a=r(9550);function c(){return{maxPingOut:t.DEFAULT_MAX_PING_OUT,maxReconnectAttempts:t.DEFAULT_MAX_RECONNECT_ATTEMPTS,noRandomize:!1,pedantic:!1,pingInterval:t.DEFAULT_PING_INTERVAL,reconnect:!0,reconnectJitter:t.DEFAULT_JITTER,reconnectJitterTLS:t.DEFAULT_JITTER_TLS,reconnectTimeWait:t.DEFAULT_RECONNECT_TIME_WAIT,tls:void 0,verbose:!1,waitOnFirstConnect:!1,ignoreAuthErrorAbort:!1}}function u(e){const t=[];return"function"==typeof e.authenticator&&t.push(e.authenticator),Array.isArray(e.authenticator)&&t.push(...e.authenticator),e.token&&t.push((0,o.tokenAuthenticator)(e.token)),e.user&&t.push((0,o.usernamePasswordAuthenticator)(e.user,e.pass)),0===t.length?(0,o.noAuthFn)():(0,o.multiAuthenticator)(t)}t.DEFAULT_MAX_RECONNECT_ATTEMPTS=10,t.DEFAULT_JITTER=100,t.DEFAULT_JITTER_TLS=1e3,t.DEFAULT_PING_INTERVAL=12e4,t.DEFAULT_MAX_PING_OUT=2,t.DEFAULT_RECONNECT_TIME_WAIT=2e3,t.defaultOptions=c,t.buildAuthenticator=u,t.parseOptions=function(e){const t=`${a.DEFAULT_HOST}:${(0,i.defaultPort)()}`;if((e=e||{servers:[t]}).servers=e.servers||[],"string"==typeof e.servers&&(e.servers=[e.servers]),e.servers.length>0&&e.port)throw new a.NatsError("port and servers options are mutually exclusive",a.ErrorCode.InvalidOption);0===e.servers.length&&e.port&&(e.servers=[`${a.DEFAULT_HOST}:${e.port}`]),e.servers&&0===e.servers.length&&(e.servers=[t]);const r=(0,n.extend)(c(),e);if(r.authenticator=u(r),["reconnectDelayHandler","authenticator"].forEach((e=>{if(r[e]&&"function"!=typeof r[e])throw new a.NatsError(`${e} option should be a function`,a.ErrorCode.NotFunction)})),r.reconnectDelayHandler||(r.reconnectDelayHandler=()=>{let e=r.tls?r.reconnectJitterTLS:r.reconnectJitter;return e&&(e++,e=Math.floor(Math.random()*e)),r.reconnectTimeWait+e}),r.inboxPrefix)try{(0,s.createInbox)(r.inboxPrefix)}catch(e){throw new a.NatsError(e.message,a.ErrorCode.ApiError)}if(r.resolve&&"function"!=typeof(0,i.getResolveFn)())throw new a.NatsError("'resolve' is not supported on this client",a.ErrorCode.InvalidOption);return r},t.checkOptions=function(e,t){const{proto:r,tls_required:n,tls_available:i}=e;if((void 0===r||r<1)&&t.noEcho)throw new a.NatsError("noEcho",a.ErrorCode.ServerOptionNotAvailable);const s=n||i||!1;if(t.tls&&!s)throw new a.NatsError("tls",a.ErrorCode.ServerOptionNotAvailable)},t.checkUnsupportedOption=function(e,t){if(t)throw new a.NatsError(e,a.ErrorCode.InvalidOption)}},4335:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.State=t.Parser=t.describe=t.Kind=void 0;const n=r(2203),i=r(3164);var s,o,a;!function(e){e[e.OK=0]="OK",e[e.ERR=1]="ERR",e[e.MSG=2]="MSG",e[e.INFO=3]="INFO",e[e.PING=4]="PING",e[e.PONG=5]="PONG"}(s=t.Kind||(t.Kind={})),t.describe=function(e){let t,r="";switch(e.kind){case s.MSG:t="MSG";break;case s.OK:t="OK";break;case s.ERR:t="ERR",r=i.TD.decode(e.data);break;case s.PING:t="PING";break;case s.PONG:t="PONG";break;case s.INFO:t="INFO",r=i.TD.decode(e.data)}return`${t}: ${r}`},t.Parser=class{constructor(e){this.dispatcher=e,this.state=o.OP_START,this.as=0,this.drop=0,this.hdr=0}parse(e){let t;for(t=0;t<e.length;t++){const r=e[t];switch(this.state){case o.OP_START:switch(r){case a.M:case a.m:this.state=o.OP_M,this.hdr=-1,this.ma={sid:-1,hdr:-1,size:-1};break;case a.H:case a.h:this.state=o.OP_H,this.hdr=0,this.ma={sid:-1,hdr:-1,size:-1};break;case a.P:case a.p:this.state=o.OP_P;break;case a.PLUS:this.state=o.OP_PLUS;break;case a.MINUS:this.state=o.OP_MINUS;break;case a.I:case a.i:this.state=o.OP_I;break;default:throw this.fail(e.subarray(t))}break;case o.OP_H:switch(r){case a.M:case a.m:this.state=o.OP_M;break;default:throw this.fail(e.subarray(t))}break;case o.OP_M:switch(r){case a.S:case a.s:this.state=o.OP_MS;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MS:switch(r){case a.G:case a.g:this.state=o.OP_MSG;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MSG:switch(r){case a.SPACE:case a.TAB:this.state=o.OP_MSG_SPC;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MSG_SPC:switch(r){case a.SPACE:case a.TAB:continue;default:this.state=o.MSG_ARG,this.as=t}break;case o.MSG_ARG:switch(r){case a.CR:this.drop=1;break;case a.NL:{const r=this.argBuf?this.argBuf.bytes():e.subarray(this.as,t-this.drop);this.processMsgArgs(r),this.drop=0,this.as=t+1,this.state=o.MSG_PAYLOAD,t=this.as+this.ma.size-1;break}default:this.argBuf&&this.argBuf.writeByte(r)}break;case o.MSG_PAYLOAD:if(this.msgBuf)if(this.msgBuf.length>=this.ma.size){const e=this.msgBuf.bytes({copy:!1});this.dispatcher.push({kind:s.MSG,msg:this.ma,data:e}),this.argBuf=void 0,this.msgBuf=void 0,this.state=o.MSG_END}else{let n=this.ma.size-this.msgBuf.length;const i=e.length-t;i<n&&(n=i),n>0?(this.msgBuf.write(e.subarray(t,t+n)),t=t+n-1):this.msgBuf.writeByte(r)}else t-this.as>=this.ma.size&&(this.dispatcher.push({kind:s.MSG,msg:this.ma,data:e.subarray(this.as,t)}),this.argBuf=void 0,this.msgBuf=void 0,this.state=o.MSG_END);break;case o.MSG_END:if(r!==a.NL)continue;this.drop=0,this.as=t+1,this.state=o.OP_START;break;case o.OP_PLUS:switch(r){case a.O:case a.o:this.state=o.OP_PLUS_O;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PLUS_O:switch(r){case a.K:case a.k:this.state=o.OP_PLUS_OK;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PLUS_OK:r===a.NL&&(this.dispatcher.push({kind:s.OK}),this.drop=0,this.state=o.OP_START);break;case o.OP_MINUS:switch(r){case a.E:case a.e:this.state=o.OP_MINUS_E;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MINUS_E:switch(r){case a.R:case a.r:this.state=o.OP_MINUS_ER;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MINUS_ER:switch(r){case a.R:case a.r:this.state=o.OP_MINUS_ERR;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MINUS_ERR:switch(r){case a.SPACE:case a.TAB:this.state=o.OP_MINUS_ERR_SPC;break;default:throw this.fail(e.subarray(t))}break;case o.OP_MINUS_ERR_SPC:switch(r){case a.SPACE:case a.TAB:continue;default:this.state=o.MINUS_ERR_ARG,this.as=t}break;case o.MINUS_ERR_ARG:switch(r){case a.CR:this.drop=1;break;case a.NL:{let r;this.argBuf?(r=this.argBuf.bytes(),this.argBuf=void 0):r=e.subarray(this.as,t-this.drop),this.dispatcher.push({kind:s.ERR,data:r}),this.drop=0,this.as=t+1,this.state=o.OP_START;break}default:this.argBuf&&this.argBuf.write(Uint8Array.of(r))}break;case o.OP_P:switch(r){case a.I:case a.i:this.state=o.OP_PI;break;case a.O:case a.o:this.state=o.OP_PO;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PO:switch(r){case a.N:case a.n:this.state=o.OP_PON;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PON:switch(r){case a.G:case a.g:this.state=o.OP_PONG;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PONG:r===a.NL&&(this.dispatcher.push({kind:s.PONG}),this.drop=0,this.state=o.OP_START);break;case o.OP_PI:switch(r){case a.N:case a.n:this.state=o.OP_PIN;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PIN:switch(r){case a.G:case a.g:this.state=o.OP_PING;break;default:throw this.fail(e.subarray(t))}break;case o.OP_PING:r===a.NL&&(this.dispatcher.push({kind:s.PING}),this.drop=0,this.state=o.OP_START);break;case o.OP_I:switch(r){case a.N:case a.n:this.state=o.OP_IN;break;default:throw this.fail(e.subarray(t))}break;case o.OP_IN:switch(r){case a.F:case a.f:this.state=o.OP_INF;break;default:throw this.fail(e.subarray(t))}break;case o.OP_INF:switch(r){case a.O:case a.o:this.state=o.OP_INFO;break;default:throw this.fail(e.subarray(t))}break;case o.OP_INFO:switch(r){case a.SPACE:case a.TAB:this.state=o.OP_INFO_SPC;break;default:throw this.fail(e.subarray(t))}break;case o.OP_INFO_SPC:switch(r){case a.SPACE:case a.TAB:continue;default:this.state=o.INFO_ARG,this.as=t}break;case o.INFO_ARG:switch(r){case a.CR:this.drop=1;break;case a.NL:{let r;this.argBuf?(r=this.argBuf.bytes(),this.argBuf=void 0):r=e.subarray(this.as,t-this.drop),this.dispatcher.push({kind:s.INFO,data:r}),this.drop=0,this.as=t+1,this.state=o.OP_START;break}default:this.argBuf&&this.argBuf.writeByte(r)}break;default:throw this.fail(e.subarray(t))}}this.state!==o.MSG_ARG&&this.state!==o.MINUS_ERR_ARG&&this.state!==o.INFO_ARG||this.argBuf||(this.argBuf=new n.DenoBuffer(e.subarray(this.as,t-this.drop))),this.state!==o.MSG_PAYLOAD||this.msgBuf||(this.argBuf||this.cloneMsgArg(),this.msgBuf=new n.DenoBuffer(e.subarray(this.as)))}cloneMsgArg(){const e=this.ma.subject.length,t=this.ma.reply?this.ma.reply.length:0,r=new Uint8Array(e+t);r.set(this.ma.subject),this.ma.reply&&r.set(this.ma.reply,e),this.argBuf=new n.DenoBuffer(r),this.ma.subject=r.subarray(0,e),this.ma.reply&&(this.ma.reply=r.subarray(e))}processMsgArgs(e){if(this.hdr>=0)return this.processHeaderMsgArgs(e);const t=[];let r=-1;for(let n=0;n<e.length;n++)switch(e[n]){case a.SPACE:case a.TAB:case a.CR:case a.NL:r>=0&&(t.push(e.subarray(r,n)),r=-1);break;default:r<0&&(r=n)}switch(r>=0&&t.push(e.subarray(r)),t.length){case 3:this.ma.subject=t[0],this.ma.sid=this.protoParseInt(t[1]),this.ma.reply=void 0,this.ma.size=this.protoParseInt(t[2]);break;case 4:this.ma.subject=t[0],this.ma.sid=this.protoParseInt(t[1]),this.ma.reply=t[2],this.ma.size=this.protoParseInt(t[3]);break;default:throw this.fail(e,"processMsgArgs Parse Error")}if(this.ma.sid<0)throw this.fail(e,"processMsgArgs Bad or Missing Sid Error");if(this.ma.size<0)throw this.fail(e,"processMsgArgs Bad or Missing Size Error")}fail(e,t=""){return t=t?`${t} [${this.state}]`:`parse error [${this.state}]`,new Error(`${t}: ${i.TD.decode(e)}`)}processHeaderMsgArgs(e){const t=[];let r=-1;for(let n=0;n<e.length;n++)switch(e[n]){case a.SPACE:case a.TAB:case a.CR:case a.NL:r>=0&&(t.push(e.subarray(r,n)),r=-1);break;default:r<0&&(r=n)}switch(r>=0&&t.push(e.subarray(r)),t.length){case 4:this.ma.subject=t[0],this.ma.sid=this.protoParseInt(t[1]),this.ma.reply=void 0,this.ma.hdr=this.protoParseInt(t[2]),this.ma.size=this.protoParseInt(t[3]);break;case 5:this.ma.subject=t[0],this.ma.sid=this.protoParseInt(t[1]),this.ma.reply=t[2],this.ma.hdr=this.protoParseInt(t[3]),this.ma.size=this.protoParseInt(t[4]);break;default:throw this.fail(e,"processHeaderMsgArgs Parse Error")}if(this.ma.sid<0)throw this.fail(e,"processHeaderMsgArgs Bad or Missing Sid Error");if(this.ma.hdr<0||this.ma.hdr>this.ma.size)throw this.fail(e,"processHeaderMsgArgs Bad or Missing Header Size Error");if(this.ma.size<0)throw this.fail(e,"processHeaderMsgArgs Bad or Missing Size Error")}protoParseInt(e){if(0===e.length)return-1;let t=0;for(let r=0;r<e.length;r++){if(e[r]<48||e[r]>57)return-1;t=10*t+(e[r]-48)}return t}},function(e){e[e.OP_START=0]="OP_START",e[e.OP_PLUS=1]="OP_PLUS",e[e.OP_PLUS_O=2]="OP_PLUS_O",e[e.OP_PLUS_OK=3]="OP_PLUS_OK",e[e.OP_MINUS=4]="OP_MINUS",e[e.OP_MINUS_E=5]="OP_MINUS_E",e[e.OP_MINUS_ER=6]="OP_MINUS_ER",e[e.OP_MINUS_ERR=7]="OP_MINUS_ERR",e[e.OP_MINUS_ERR_SPC=8]="OP_MINUS_ERR_SPC",e[e.MINUS_ERR_ARG=9]="MINUS_ERR_ARG",e[e.OP_M=10]="OP_M",e[e.OP_MS=11]="OP_MS",e[e.OP_MSG=12]="OP_MSG",e[e.OP_MSG_SPC=13]="OP_MSG_SPC",e[e.MSG_ARG=14]="MSG_ARG",e[e.MSG_PAYLOAD=15]="MSG_PAYLOAD",e[e.MSG_END=16]="MSG_END",e[e.OP_H=17]="OP_H",e[e.OP_P=18]="OP_P",e[e.OP_PI=19]="OP_PI",e[e.OP_PIN=20]="OP_PIN",e[e.OP_PING=21]="OP_PING",e[e.OP_PO=22]="OP_PO",e[e.OP_PON=23]="OP_PON",e[e.OP_PONG=24]="OP_PONG",e[e.OP_I=25]="OP_I",e[e.OP_IN=26]="OP_IN",e[e.OP_INF=27]="OP_INF",e[e.OP_INFO=28]="OP_INFO",e[e.OP_INFO_SPC=29]="OP_INFO_SPC",e[e.INFO_ARG=30]="INFO_ARG"}(o=t.State||(t.State={})),function(e){e[e.CR="\r".charCodeAt(0)]="CR",e[e.E="E".charCodeAt(0)]="E",e[e.e="e".charCodeAt(0)]="e",e[e.F="F".charCodeAt(0)]="F",e[e.f="f".charCodeAt(0)]="f",e[e.G="G".charCodeAt(0)]="G",e[e.g="g".charCodeAt(0)]="g",e[e.H="H".charCodeAt(0)]="H",e[e.h="h".charCodeAt(0)]="h",e[e.I="I".charCodeAt(0)]="I",e[e.i="i".charCodeAt(0)]="i",e[e.K="K".charCodeAt(0)]="K",e[e.k="k".charCodeAt(0)]="k",e[e.M="M".charCodeAt(0)]="M",e[e.m="m".charCodeAt(0)]="m",e[e.MINUS="-".charCodeAt(0)]="MINUS",e[e.N="N".charCodeAt(0)]="N",e[e.n="n".charCodeAt(0)]="n",e[e.NL="\n".charCodeAt(0)]="NL",e[e.O="O".charCodeAt(0)]="O",e[e.o="o".charCodeAt(0)]="o",e[e.P="P".charCodeAt(0)]="P",e[e.p="p".charCodeAt(0)]="p",e[e.PLUS="+".charCodeAt(0)]="PLUS",e[e.R="R".charCodeAt(0)]="R",e[e.r="r".charCodeAt(0)]="r",e[e.S="S".charCodeAt(0)]="S",e[e.s="s".charCodeAt(0)]="s",e[e.SPACE=" ".charCodeAt(0)]="SPACE",e[e.TAB="\t".charCodeAt(0)]="TAB"}(a||(a={}))},3546:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProtocolHandler=t.Subscriptions=t.SubscriptionImpl=t.Connect=t.INFO=void 0;const s=r(3164),o=r(7256),a=r(3024),c=r(9481),u=r(1782),l=r(4629),h=r(2002),d=r(4992),f=r(4335),p=r(4621),y=r(6369),m=r(9550),g=r(6336);t.INFO=/^INFO\s+([^\r\n]+)\r\n/i;const b=(0,s.encode)("PONG\r\n"),v=(0,s.encode)("PING\r\n");class _{constructor(e,t,r){this.protocol=1,this.version=e.version,this.lang=e.lang,this.echo=!t.noEcho&&void 0,this.verbose=t.verbose,this.pedantic=t.pedantic,this.tls_required=!!t.tls||void 0,this.name=t.name;const n=(t&&"function"==typeof t.authenticator?t.authenticator(r):{})||{};(0,a.extend)(this,n)}}t.Connect=_;class w extends l.QueuedIteratorImpl{constructor(e,t,r={}){super(),(0,a.extend)(this,r),this.protocol=e,this.subject=t,this.draining=!1,this.noIterator="function"==typeof r.callback,this.closed=(0,a.deferred)(),r.timeout&&(this.timer=(0,a.timeout)(r.timeout),this.timer.then((()=>{this.timer=void 0})).catch((e=>{this.stop(e),this.noIterator&&this.callback(e,{})}))),this.noIterator||this.iterClosed.then((()=>{this.closed.resolve(),this.unsubscribe()}))}setPrePostHandlers(e){if(this.noIterator){const t=this.callback,r=e.ingestionFilterFn?e.ingestionFilterFn:()=>({ingest:!0,protocol:!1}),n=e.protocolFilterFn?e.protocolFilterFn:()=>!0,i=e.dispatchedFn?e.dispatchedFn:()=>{};this.callback=(e,s)=>{const{ingest:o}=r(s);o&&n(s)&&(t(e,s),i(s))}}else this.protocolFilterFn=e.protocolFilterFn,this.dispatchedFn=e.dispatchedFn}callback(e,t){this.cancelTimeout(),e?this.stop(e):this.push(t)}close(){if(!this.isClosed()){this.cancelTimeout();const e=()=>{if(this.stop(),this.cleanupFn)try{this.cleanupFn(this,this.info)}catch(e){}this.closed.resolve()};this.noIterator?e():this.push(e)}}unsubscribe(e){this.protocol.unsubscribe(this,e)}cancelTimeout(){this.timer&&(this.timer.cancel(),this.timer=void 0)}drain(){return this.protocol.isClosed()?Promise.reject(m.NatsError.errorForCode(m.ErrorCode.ConnectionClosed)):this.isClosed()?Promise.reject(m.NatsError.errorForCode(m.ErrorCode.SubClosed)):(this.drained||(this.draining=!0,this.protocol.unsub(this),this.drained=this.protocol.flush((0,a.deferred)()).then((()=>{this.protocol.subscriptions.cancel(this)})).catch((()=>{this.protocol.subscriptions.cancel(this)}))),this.drained)}isDraining(){return this.draining}isClosed(){return this.done}getSubject(){return this.subject}getMax(){return this.max}getID(){return this.sid}}t.SubscriptionImpl=w;class E{constructor(){this.sidCounter=0,this.mux=null,this.subs=new Map}size(){return this.subs.size}add(e){return this.sidCounter++,e.sid=this.sidCounter,this.subs.set(e.sid,e),e}setMux(e){return this.mux=e,e}getMux(){return this.mux}get(e){return this.subs.get(e)}resub(e){return this.sidCounter++,this.subs.delete(e.sid),e.sid=this.sidCounter,this.subs.set(e.sid,e),e}all(){return Array.from(this.subs.values())}cancel(e){e&&(e.close(),this.subs.delete(e.sid))}handleError(e){if(e&&e.permissionContext){const t=e.permissionContext,r=this.all();let n;if("subscription"===t.operation&&(n=r.find((e=>e.subject===t.subject))),"publish"===t.operation&&(n=r.find((e=>e.requestSubject===t.subject))),n)return n.callback(e,{}),n.close(),this.subs.delete(n.sid),n!==this.mux}return!1}close(){this.subs.forEach((e=>{e.close()}))}}t.Subscriptions=E;class P{constructor(e,t){this._closed=!1,this.connected=!1,this.connectedOnce=!1,this.infoReceived=!1,this.noMorePublishing=!1,this.abortReconnect=!1,this.listeners=[],this.pendingLimit=32768,this.outMsgs=0,this.inMsgs=0,this.outBytes=0,this.inBytes=0,this.options=e,this.publisher=t,this.subscriptions=new E,this.muxSubscriptions=new h.MuxSubscription,this.outbound=new c.DataBuffer,this.pongs=[],this.pendingLimit=e.pendingLimit||this.pendingLimit,this.features=new y.Features({major:0,minor:0,micro:0}),this.flusher=null;const r="string"==typeof e.servers?[e.servers]:e.servers;this.servers=new u.Servers(r,{randomize:!e.noRandomize}),this.closed=(0,a.deferred)(),this.parser=new f.Parser(this),this.heartbeats=new d.Heartbeat(this,this.options.pingInterval||g.DEFAULT_PING_INTERVAL,this.options.maxPingOut||g.DEFAULT_MAX_PING_OUT)}resetOutbound(){this.outbound.reset();const e=this.pongs;this.pongs=[];const t=m.NatsError.errorForCode(m.ErrorCode.Disconnect);t.stack="",e.forEach((e=>{e.reject(t)})),this.parser=new f.Parser(this),this.infoReceived=!1}dispatchStatus(e){this.listeners.forEach((t=>{t.push(e)}))}status(){const e=new l.QueuedIteratorImpl;return this.listeners.push(e),e}prepare(){this.info=void 0,this.resetOutbound();const e=(0,a.deferred)();return e.catch((()=>{})),this.pongs.unshift(e),this.connectError=t=>{e.reject(t)},this.transport=(0,o.newTransport)(),this.transport.closed().then((e=>n(this,void 0,void 0,(function*(){this.connected=!1,this.isClosed()||(yield this.disconnected(this.transport.closeError||this.lastError))})))),e}disconnect(){this.dispatchStatus({type:m.DebugEvents.StaleConnection,data:""}),this.transport.disconnect()}disconnected(e){return n(this,void 0,void 0,(function*(){this.dispatchStatus({type:m.Events.Disconnect,data:this.servers.getCurrentServer().toString()}),this.options.reconnect?yield this.dialLoop().then((()=>{var e;this.dispatchStatus({type:m.Events.Reconnect,data:this.servers.getCurrentServer().toString()}),(null===(e=this.lastError)||void 0===e?void 0:e.code)===m.ErrorCode.AuthenticationExpired&&(this.lastError=void 0)})).catch((e=>{this._close(e)})):yield this._close(e)}))}dial(e){return n(this,void 0,void 0,(function*(){const t=this.prepare();let r;try{r=(0,a.timeout)(this.options.timeout||2e4);const t=this.transport.connect(e,this.options);yield Promise.race([t,r]),(()=>n(this,void 0,void 0,(function*(){var e,t,r,n;try{try{for(var s,o=!0,a=i(this.transport);!(e=(s=yield a.next()).done);){n=s.value,o=!1;try{const e=n;this.parser.parse(e)}finally{o=!0}}}catch(e){t={error:e}}finally{try{o||e||!(r=a.return)||(yield r.call(a))}finally{if(t)throw t.error}}}catch(e){console.log("reader closed",e)}})))().then()}catch(e){t.reject(e)}try{yield Promise.race([r,t]),r&&r.cancel(),this.connected=!0,this.connectError=void 0,this.sendSubscriptions(),this.connectedOnce=!0,this.server.didConnect=!0,this.server.reconnects=0,this.flushPending(),this.heartbeats.start()}catch(e){throw r&&r.cancel(),yield this.transport.close(e),e}}))}_doDial(e){return n(this,void 0,void 0,(function*(){const t=yield e.resolve({fn:(0,o.getResolveFn)(),debug:this.options.debug,randomize:!this.options.noRandomize});let r=null;for(const e of t)try{return r=null,this.dispatchStatus({type:m.DebugEvents.Reconnecting,data:e.toString()}),void(yield this.dial(e))}catch(e){r=e}throw r}))}dialLoop(){return n(this,void 0,void 0,(function*(){let e;for(;;){this._closed&&this.servers.clear();const t=this.options.reconnectDelayHandler?this.options.reconnectDelayHandler():g.DEFAULT_RECONNECT_TIME_WAIT;let r=t;const n=this.selectServer();if(!n||this.abortReconnect)throw e||(this.lastError?this.lastError:m.NatsError.errorForCode(m.ErrorCode.ConnectionRefused));const i=Date.now();if(0===n.lastConnect||n.lastConnect+t<=i){n.lastConnect=Date.now();try{yield this._doDial(n);break}catch(t){if(e=t,!this.connectedOnce){if(this.options.waitOnFirstConnect)continue;this.servers.removeCurrentServer()}n.reconnects++;const r=this.options.maxReconnectAttempts||0;-1!==r&&n.reconnects>=r&&this.servers.removeCurrentServer()}}else r=Math.min(r,n.lastConnect+t-i),yield(0,a.delay)(r)}}))}static connect(e,t){return n(this,void 0,void 0,(function*(){const r=new P(e,t);return yield r.dialLoop(),r}))}static toError(e){const t=e?e.toLowerCase():"";if(-1!==t.indexOf("permissions violation")){const t=new m.NatsError(e,m.ErrorCode.PermissionsViolation),r=e.match(/(Publish|Subscription) to "(\S+)"/);return r&&(t.permissionContext={operation:r[1].toLowerCase(),subject:r[2]}),t}return-1!==t.indexOf("authorization violation")?new m.NatsError(e,m.ErrorCode.AuthorizationViolation):-1!==t.indexOf("user authentication expired")?new m.NatsError(e,m.ErrorCode.AuthenticationExpired):new m.NatsError(e,m.ErrorCode.ProtocolError)}processMsg(e,t){if(this.inMsgs++,this.inBytes+=t.length,!this.subscriptions.sidCounter)return;const r=this.subscriptions.get(e.sid);r&&(r.received+=1,r.callback&&r.callback(null,new p.MsgImpl(e,t,this)),void 0!==r.max&&r.received>=r.max&&r.unsubscribe())}processError(e){const t=(0,s.decode)(e),r=P.toError(t),n={type:m.Events.Error,data:r.code};if(r.isPermissionError()){let e=!1;if(r.permissionContext){n.permissionContext=r.permissionContext;const t=this.subscriptions.getMux();e=(null==t?void 0:t.subject)===r.permissionContext.subject}this.subscriptions.handleError(r),this.muxSubscriptions.handleError(e,r),e&&this.subscriptions.setMux(null)}this.dispatchStatus(n),this.handleError(r)}handleError(e){e.isAuthError()&&this.handleAuthError(e),e.isProtocolError()&&(this.lastError=e),e.isPermissionError()||(this.lastError=e)}handleAuthError(e){this.lastError&&e.code===this.lastError.code&&!1===this.options.ignoreAuthErrorAbort&&(this.abortReconnect=!0),this.connectError?this.connectError(e):this.disconnect()}processPing(){this.transport.send(b)}processPong(){const e=this.pongs.shift();e&&e.resolve()}processInfo(e){const t=JSON.parse((0,s.decode)(e));this.info=t;const r=this.options&&this.options.ignoreClusterUpdates?void 0:this.servers.update(t);if(!this.infoReceived){this.features.update((0,y.parseSemVer)(t.version)),this.infoReceived=!0,this.transport.isEncrypted()&&this.servers.updateTLSName();const{version:e,lang:r}=this.transport;try{const n=new _({version:e,lang:r},this.options,t.nonce);t.headers&&(n.headers=!0,n.no_responders=!0);const i=JSON.stringify(n);this.transport.send((0,s.encode)(`CONNECT ${i}${o.CR_LF}`)),this.transport.send(v)}catch(e){this._close(e)}}r&&this.dispatchStatus({type:m.Events.Update,data:r}),void 0!==t.ldm&&t.ldm&&this.dispatchStatus({type:m.Events.LDM,data:this.servers.getCurrentServer().toString()})}push(e){switch(e.kind){case f.Kind.MSG:{const{msg:t,data:r}=e;this.processMsg(t,r);break}case f.Kind.OK:break;case f.Kind.ERR:this.processError(e.data);break;case f.Kind.PING:this.processPing();break;case f.Kind.PONG:this.processPong();break;case f.Kind.INFO:this.processInfo(e.data)}}sendCommand(e,...t){const r=this.outbound.length();let n;n="string"==typeof e?(0,s.encode)(e):e,this.outbound.fill(n,...t),0===r?this.flusher=setTimeout((()=>{this.flushPending()})):this.outbound.size()>=this.pendingLimit&&(this.flusher&&(clearTimeout(this.flusher),this.flusher=null),this.flushPending())}publish(e,t=s.Empty,r){let n;if(t instanceof Uint8Array)n=t;else{if("string"!=typeof t)throw m.NatsError.errorForCode(m.ErrorCode.BadPayload);n=s.TE.encode(t)}let i=n.length;(r=r||{}).reply=r.reply||"";let a,c=s.Empty,u=0;if(r.headers){if(this.info&&!this.info.headers)throw new m.NatsError("headers",m.ErrorCode.ServerOptionNotAvailable);c=r.headers.encode(),u=c.length,i=n.length+u}if(this.info&&i>this.info.max_payload)throw m.NatsError.errorForCode(m.ErrorCode.MaxPayloadExceeded);this.outBytes+=i,this.outMsgs++,r.headers?(a=r.reply?`HPUB ${e} ${r.reply} ${u} ${i}\r\n`:`HPUB ${e} ${u} ${i}\r\n`,this.sendCommand(a,c,n,o.CRLF)):(a=r.reply?`PUB ${e} ${r.reply} ${i}\r\n`:`PUB ${e} ${i}\r\n`,this.sendCommand(a,n,o.CRLF))}request(e){return this.initMux(),this.muxSubscriptions.add(e),e}subscribe(e){return this.subscriptions.add(e),this._subunsub(e),e}_sub(e){e.queue?this.sendCommand(`SUB ${e.subject} ${e.queue} ${e.sid}\r\n`):this.sendCommand(`SUB ${e.subject} ${e.sid}\r\n`)}_subunsub(e){return this._sub(e),e.max&&this.unsubscribe(e,e.max),e}unsubscribe(e,t){this.unsub(e,t),(void 0===e.max||e.received>=e.max)&&this.subscriptions.cancel(e)}unsub(e,t){e&&!this.isClosed()&&(t?this.sendCommand(`UNSUB ${e.sid} ${t}\r\n`):this.sendCommand(`UNSUB ${e.sid}\r\n`),e.max=t)}resub(e,t){e&&!this.isClosed()&&(e.subject=t,this.subscriptions.resub(e),this._sub(e))}flush(e){return e||(e=(0,a.deferred)()),this.pongs.push(e),this.sendCommand(v),e}sendSubscriptions(){const e=[];this.subscriptions.all().forEach((t=>{const r=t;r.queue?e.push(`SUB ${r.subject} ${r.queue} ${r.sid}${o.CR_LF}`):e.push(`SUB ${r.subject} ${r.sid}${o.CR_LF}`)})),e.length&&this.transport.send((0,s.encode)(e.join("")))}_close(e){return n(this,void 0,void 0,(function*(){this._closed||(this.heartbeats.cancel(),this.connectError&&(this.connectError(e),this.connectError=void 0),this.muxSubscriptions.close(),this.subscriptions.close(),this.listeners.forEach((e=>{e.stop()})),this._closed=!0,yield this.transport.close(e),yield this.closed.resolve(e))}))}close(){return this._close()}isClosed(){return this._closed}drain(){const e=this.subscriptions.all(),t=[];return e.forEach((e=>{t.push(e.drain())})),Promise.all(t).then((()=>n(this,void 0,void 0,(function*(){return this.noMorePublishing=!0,yield this.flush(),this.close()})))).catch((()=>{}))}flushPending(){if(this.infoReceived&&this.connected&&this.outbound.size()){const e=this.outbound.drain();this.transport.send(e)}}initMux(){if(!this.subscriptions.getMux()){const e=this.muxSubscriptions.init(this.options.inboxPrefix),t=new w(this,`${e}*`);t.callback=this.muxSubscriptions.dispatcher(),this.subscriptions.setMux(t),this.subscribe(t)}}selectServer(){const e=this.servers.selectServer();if(void 0!==e)return this.server=e,this.server}getServer(){return this.server}}t.ProtocolHandler=P},4629:function(e,t,r){"use strict";var n=this&&this.__await||function(e){return this instanceof n?(this.v=e,this):new n(e)},i=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,s=r.apply(e,t||[]),o=[];return i={},a("next"),a("throw"),a("return"),i[Symbol.asyncIterator]=function(){return this},i;function a(e){s[e]&&(i[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=s[e](t)).value instanceof n?Promise.resolve(r.value.v).then(u,l):h(o[0][2],r)}catch(e){h(o[0][3],e)}var r}function u(e){c("next",e)}function l(e){c("throw",e)}function h(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.QueuedIteratorImpl=void 0;const s=r(3024),o=r(9550);class a{constructor(){this.inflight=0,this.filtered=0,this.pendingFiltered=0,this.processed=0,this.received=0,this.noIterator=!1,this.done=!1,this.signal=(0,s.deferred)(),this.yields=[],this.iterClosed=(0,s.deferred)(),this.time=0}[Symbol.asyncIterator](){return this.iterate()}push(e){if(this.done)return;if("function"==typeof e)return this.yields.push(e),void this.signal.resolve();const{ingest:t,protocol:r}=this.ingestionFilterFn?this.ingestionFilterFn(e,this.ctx||this):{ingest:!0,protocol:!1};t&&(r&&(this.filtered++,this.pendingFiltered++),this.yields.push(e),this.signal.resolve())}iterate(){return i(this,arguments,(function*(){if(this.noIterator)throw new o.NatsError("unsupported iterator",o.ErrorCode.ApiError);try{for(;;){if(0===this.yields.length&&(yield n(this.signal)),this.err)throw this.err;const e=this.yields;this.inflight=e.length,this.yields=[];for(let t=0;t<e.length;t++)if("function"!=typeof e[t]){if(!this.protocolFilterFn||this.protocolFilterFn(e[t])){this.processed++;const r=Date.now();yield yield n(e[t]),this.time=Date.now()-r,this.dispatchedFn&&e[t]&&this.dispatchedFn(e[t])}else this.pendingFiltered--;this.inflight--}else{const r=e[t];try{r()}catch(e){throw e}if(this.err)throw this.err}if(this.done)break;0===this.yields.length&&(e.length=0,this.yields=e,this.signal=(0,s.deferred)())}}finally{this.stop()}}))}stop(e){this.done||(this.err=e,this.done=!0,this.signal.resolve(),this.iterClosed.resolve())}getProcessed(){return this.noIterator?this.received:this.processed}getPending(){return this.yields.length+this.inflight-this.pendingFiltered}getReceived(){return this.received-this.filtered}}t.QueuedIteratorImpl=a},4701:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RequestOne=t.RequestMany=t.BaseRequest=void 0;const n=r(3024),i=r(7751),s=r(9550);class o{constructor(e,t){this.mux=e,this.requestSubject=t,this.received=0,this.token=i.nuid.next(),this.ctx=new Error}}t.BaseRequest=o,t.RequestMany=class extends o{constructor(e,t,r={maxWait:1e3}){if(super(e,t),this.opts=r,"function"!=typeof this.opts.callback)throw new Error("callback is required");this.callback=this.opts.callback,this.max="number"==typeof r.maxMessages&&r.maxMessages>0?r.maxMessages:-1,this.done=(0,n.deferred)(),this.done.then((()=>{this.callback(null,null)})),this.timer=setTimeout((()=>{this.cancel()}),r.maxWait)}cancel(e){e&&this.callback(e,null),clearTimeout(this.timer),this.mux.cancel(this),this.done.resolve()}resolver(e,t){e?(e.stack+=`\n\n${this.ctx.stack}`,this.cancel(e)):(this.callback(null,t),this.opts.strategy===s.RequestStrategy.Count&&(this.max--,0===this.max&&this.cancel()),this.opts.strategy===s.RequestStrategy.JitterTimer&&(clearTimeout(this.timer),this.timer=setTimeout((()=>{this.cancel()}),this.opts.jitter||300)),this.opts.strategy===s.RequestStrategy.SentinelMsg&&t&&0===t.data.length&&this.cancel())}},t.RequestOne=class extends o{constructor(e,t,r={timeout:1e3}){super(e,t),this.deferred=(0,n.deferred)(),this.timer=(0,n.timeout)(r.timeout)}resolver(e,t){this.timer&&this.timer.cancel(),e?(e.stack+=`\n\n${this.ctx.stack}`,this.deferred.reject(e)):this.deferred.resolve(t),this.cancel()}cancel(e){this.timer&&this.timer.cancel(),this.mux.cancel(this),this.deferred.reject(e||s.NatsError.errorForCode(s.ErrorCode.Cancelled))}}},6369:(e,t)=>{"use strict";function r(e=""){const t=e.match(/(\d+).(\d+).(\d+)/);if(t)return{major:parseInt(t[1]),minor:parseInt(t[2]),micro:parseInt(t[3])};throw new Error(`'${e}' is not a semver value`)}function n(e,t){return e.major<t.major?-1:e.major>t.major?1:e.minor<t.minor?-1:e.minor>t.minor?1:e.micro<t.micro?-1:e.micro>t.micro?1:0}var i;Object.defineProperty(t,"__esModule",{value:!0}),t.Features=t.Feature=t.compare=t.parseSemVer=void 0,t.parseSemVer=r,t.compare=n,function(e){e.JS_KV="js_kv",e.JS_OBJECTSTORE="js_objectstore",e.JS_PULL_MAX_BYTES="js_pull_max_bytes",e.JS_NEW_CONSUMER_CREATE_API="js_new_consumer_create",e.JS_ALLOW_DIRECT="js_allow_direct",e.JS_MULTIPLE_CONSUMER_FILTER="js_multiple_consumer_filter",e.JS_SIMPLIFICATION="js_simplification",e.JS_STREAM_CONSUMER_METADATA="js_stream_consumer_metadata",e.JS_CONSUMER_FILTER_SUBJECTS="js_consumer_filter_subjects"}(i=t.Feature||(t.Feature={})),t.Features=class{constructor(e){this.features=new Map,this.disabled=[],this.update(e)}resetDisabled(){this.disabled.length=0,this.update(this.server)}disable(e){this.disabled.push(e),this.update(this.server)}isDisabled(e){return-1!==this.disabled.indexOf(e)}update(e){"string"==typeof e&&(e=r(e)),this.server=e,this.set(i.JS_KV,"2.6.2"),this.set(i.JS_OBJECTSTORE,"2.6.3"),this.set(i.JS_PULL_MAX_BYTES,"2.8.3"),this.set(i.JS_NEW_CONSUMER_CREATE_API,"2.9.0"),this.set(i.JS_ALLOW_DIRECT,"2.9.0"),this.set(i.JS_MULTIPLE_CONSUMER_FILTER,"2.10.0"),this.set(i.JS_SIMPLIFICATION,"2.9.4"),this.set(i.JS_STREAM_CONSUMER_METADATA,"2.10.0"),this.set(i.JS_CONSUMER_FILTER_SUBJECTS,"2.10.0"),this.disabled.forEach((e=>{this.features.delete(e)}))}set(e,t){this.features.set(e,{min:t,ok:n(this.server,r(t))>=0})}get(e){return this.features.get(e)||{min:"unknown",ok:!1}}supports(e){var t;return(null===(t=this.get(e))||void 0===t?void 0:t.ok)||!1}require(e){return"string"==typeof e&&(e=r(e)),n(this.server,e)>=0}}},1782:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Servers=t.ServerImpl=t.hostPort=t.isIPV4OrHostname=void 0;const i=r(7256),s=r(3024),o=r(9204),a=r(9550);function c(e){return-1!==e.indexOf(".")||-1===e.indexOf("[")&&-1===e.indexOf("::")&&e.split(":").length<=2}function u(e){return!c(e)}function l(e){(e=e.trim()).match(/^(.*:\/\/)(.*)/m)&&(e=e.replace(/^(.*:\/\/)(.*)/gm,"$2")),u(e=function(e){const t=e.toUpperCase().indexOf("::FFFF:");if(-1!==t&&-1!==e.indexOf(".")){let r=e.substring(t+7);return r=r.replace("[",""),r.replace("]","")}return e}(e))&&-1===e.indexOf("[")&&(e=`[${e}]`);const t=u(e)?e.match(/(]:)(\d+)/):e.match(/(:)(\d+)/),r=t&&3===t.length&&t[1]&&t[2]?parseInt(t[2]):a.DEFAULT_PORT,n=new URL(`${80===r?"https":"http"}://${e}`);n.port=`${r}`;let i=n.hostname;return"["===i.charAt(0)&&(i=i.substring(1,i.length-1)),{listen:n.host,hostname:i,port:r}}t.isIPV4OrHostname=c,t.hostPort=l;class h{constructor(e,t=!1){this.src=e,this.tlsName="";const r=l(e);this.listen=r.listen,this.hostname=r.hostname,this.port=r.port,this.didConnect=!1,this.reconnects=0,this.lastConnect=0,this.gossiped=t}toString(){return this.listen}resolve(e){return n(this,void 0,void 0,(function*(){if(!e.fn)return[this];const t=[];if((0,o.isIP)(this.hostname))return[this];{const r=yield e.fn(this.hostname);e.debug&&console.log(`resolve ${this.hostname} = ${r.join(",")}`);for(const e of r){const r=80===this.port?"https":"http",n=new URL(`${r}://${u(e)?"["+e+"]":e}`);n.port=`${this.port}`;const i=new h(n.host,!1);i.tlsName=this.hostname,t.push(i)}}return e.randomize&&(0,s.shuffle)(t),this.resolves=t,t}))}}t.ServerImpl=h,t.Servers=class{constructor(e=[],t={}){this.firstSelect=!0,this.servers=[],this.tlsName="",this.randomize=t.randomize||!1;const r=(0,i.getUrlParseFn)();e&&(e.forEach((e=>{e=r?r(e):e,this.servers.push(new h(e))})),this.randomize&&(this.servers=(0,s.shuffle)(this.servers))),0===this.servers.length&&this.addServer(`${a.DEFAULT_HOST}:${(0,i.defaultPort)()}`,!1),this.currentServer=this.servers[0]}clear(){this.servers.length=0}updateTLSName(){const e=this.getCurrentServer();(0,o.isIP)(e.hostname)||(this.tlsName=e.hostname,this.servers.forEach((e=>{e.gossiped&&(e.tlsName=this.tlsName)})))}getCurrentServer(){return this.currentServer}addServer(e,t=!1){const r=(0,i.getUrlParseFn)();e=r?r(e):e;const n=new h(e,t);(0,o.isIP)(n.hostname)&&(n.tlsName=this.tlsName),this.servers.push(n)}selectServer(){if(this.firstSelect)return this.firstSelect=!1,this.currentServer;const e=this.servers.shift();return e&&(this.servers.push(e),this.currentServer=e),e}removeCurrentServer(){this.removeServer(this.currentServer)}removeServer(e){if(e){const t=this.servers.indexOf(e);this.servers.splice(t,1)}}length(){return this.servers.length}next(){return this.servers.length?this.servers[0]:void 0}getServers(){return this.servers}update(e){const t=[];let r=[];const n=(0,i.getUrlParseFn)(),s=new Map;e.connect_urls&&e.connect_urls.length>0&&e.connect_urls.forEach((e=>{e=n?n(e):e;const t=new h(e,!0);s.set(e,t)}));const o=[];return this.servers.forEach(((e,t)=>{const r=e.listen;e.gossiped&&this.currentServer.listen!==r&&void 0===s.get(r)&&o.push(t),s.delete(r)})),o.reverse(),o.forEach((e=>{const t=this.servers.splice(e,1);r=r.concat(t[0].listen)})),s.forEach(((e,r)=>{this.servers.push(e),t.push(r)})),{added:t,deleted:r}}}},6087:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ServiceImpl=t.ServiceGroupImpl=t.ServiceMsgImpl=t.ServiceApiPrefix=void 0;const i=r(3024),s=r(4076),o=r(2941),a=r(7751),c=r(4629),u=r(7349),l=r(6369),h=r(3164),d=r(9550);t.ServiceApiPrefix="$SRV";class f{constructor(e){this.msg=e}get data(){return this.msg.data}get sid(){return this.msg.sid}get subject(){return this.msg.subject}get reply(){return this.msg.reply||""}get headers(){return this.msg.headers}respond(e,t){return this.msg.respond(e,t)}respondError(e,t,r,n){var i,o;return(n=n||{}).headers=n.headers||(0,s.headers)(),null===(i=n.headers)||void 0===i||i.set(d.ServiceErrorCodeHeader,`${e}`),null===(o=n.headers)||void 0===o||o.set(d.ServiceErrorHeader,t),this.msg.respond(r,n)}json(e){return this.msg.json(e)}string(){return this.msg.string()}}t.ServiceMsgImpl=f;class p{constructor(e,t=""){""!==t&&function(e,t){if(-1!==t.indexOf(" "))throw new Error(`${e} cannot contain spaces: '${t}'`);t.split(".").forEach((r=>{if(">"===r)throw new Error(`${e} name cannot contain internal '>': '${t}'`)}))}("service group",t);let r="";if(e instanceof y)this.srv=e,r="";else{if(!(e instanceof p))throw new Error("unknown ServiceGroup type");{const t=e;this.srv=t.srv,r=t.subject}}this.subject=this.calcSubject(r,t)}calcSubject(e,t=""){return""===t?e:""!==e?`${e}.${t}`:t}addEndpoint(e="",t){const r="function"==typeof(t=t||{subject:e})?{handler:t,subject:e}:t;(0,u.validateName)("endpoint",e);let{subject:n,handler:i,metadata:s}=r;n=n||e,function(e,t){if(""===t)throw new Error(`${e} cannot be empty`);if(-1!==t.indexOf(" "))throw new Error(`${e} cannot contain spaces: '${t}'`);const r=t.split(".");r.forEach(((n,i)=>{if(">"===n&&i!==r.length-1)throw new Error(`${e} cannot have internal '>': '${t}'`)}))}("endpoint subject",n),n=this.calcSubject(this.subject,n);const o={name:e,subject:n,handler:i,metadata:s};return this.srv._addEndpoint(o)}addGroup(e=""){return new p(this,e)}}t.ServiceGroupImpl=p;class y{static controlSubject(e,r="",n="",i){const s=null!=i?i:t.ServiceApiPrefix;return""===r&&""===n?`${s}.${e}`:((0,u.validateName)("control subject name",r),""!==n?((0,u.validateName)("control subject id",n),`${s}.${e}.${r}.${n}`):`${s}.${e}.${r}`)}constructor(e,t={name:"",version:""}){this.nc=e,this.config=t,(0,u.validateName)("name",this.config.name),(0,l.parseSemVer)(this.config.version),this._id=a.nuid.next(),this.internal=[],this._done=(0,i.deferred)(),this._stopped=!1,this.handlers=[],this.started=(new Date).toISOString(),this.reset(),this.nc.closed().then((()=>{this.close().catch()})).catch((e=>{this.close(e).catch()}))}get subjects(){return this.handlers.filter((e=>!1===e.internal)).map((e=>e.subject))}get id(){return this._id}get name(){return this.config.name}get description(){var e;return null!==(e=this.config.description)&&void 0!==e?e:""}get version(){return this.config.version}get metadata(){return this.config.metadata}errorToHeader(e){const t=(0,s.headers)();if(e instanceof d.ServiceError){const r=e;t.set(d.ServiceErrorHeader,r.message),t.set(d.ServiceErrorCodeHeader,`${r.code}`)}else t.set(d.ServiceErrorHeader,e.message),t.set(d.ServiceErrorCodeHeader,"500");return t}setupHandler(e,t=!1){const r=t?"":"q",{name:n,subject:i,handler:s}=e,o=e;o.internal=t,t&&this.internal.push(o),o.stats=new m(n,i);const a=s?(e,t)=>{if(e)return void this.close(e);const r=Date.now();try{s(e,new f(t))}catch(e){o.stats.countError(e),null==t||t.respond(h.Empty,{headers:this.errorToHeader(e)})}finally{o.stats.countLatency(r)}}:void 0;return o.sub=this.nc.subscribe(i,{callback:a,queue:r}),o.sub.closed.then((()=>{this._stopped||this.close(new Error(`required subscription ${e.subject} stopped`)).catch()})).catch((t=>{if(!this._stopped){const r=new Error(`required subscription ${e.subject} errored: ${t.message}`);r.stack=t.stack,this.close(r).catch()}})),o}info(){return{type:d.ServiceResponseType.INFO,name:this.name,id:this.id,version:this.version,description:this.description,metadata:this.metadata,endpoints:this.endpoints()}}endpoints(){return this.handlers.map((e=>{const{subject:t,metadata:r,name:n}=e;return{subject:t,metadata:r,name:n}}))}stats(){return n(this,void 0,void 0,(function*(){const e=[];for(const t of this.handlers){if("function"==typeof this.config.statsHandler)try{t.stats.data=yield this.config.statsHandler(t)}catch(e){t.stats.countError(e)}e.push(t.stats.stats(t.qi))}return{type:d.ServiceResponseType.STATS,name:this.name,id:this.id,version:this.version,started:this.started,metadata:this.metadata,endpoints:e}}))}addInternalHandler(e,t){const r=`${e}`.toUpperCase();this._doAddInternalHandler(`${r}-all`,e,t),this._doAddInternalHandler(`${r}-kind`,e,t,this.name),this._doAddInternalHandler(`${r}`,e,t,this.name,this.id)}_doAddInternalHandler(e,t,r,n="",i=""){const s={};s.name=e,s.subject=y.controlSubject(t,n,i),s.handler=r,this.setupHandler(s,!0)}start(){const e=(0,o.JSONCodec)(),t=e.encode(this.ping());return this.addInternalHandler(d.ServiceVerb.PING,((e,r)=>e?(this.close(e).then().catch(),Promise.reject(e)):(r.respond(t),Promise.resolve()))),this.addInternalHandler(d.ServiceVerb.STATS,((t,r)=>t?(this.close(t),Promise.reject(t)):this.stats().then((t=>(null==r||r.respond(e.encode(t)),Promise.resolve()))))),this.addInternalHandler(d.ServiceVerb.INFO,((t,r)=>t?(this.close(t),Promise.reject(t)):(null==r||r.respond(e.encode(this.info())),Promise.resolve()))),this.handlers.forEach((e=>{const{subject:t}=e;"string"==typeof t&&null!==e.handler&&this.setupHandler(e)})),Promise.resolve(this)}close(e){if(this._stopped)return this._done;this._stopped=!0;let t=[];return this.nc.isClosed()||(t=this.handlers.concat(this.internal).map((e=>e.sub.drain()))),Promise.allSettled(t).then((()=>{this._done.resolve(e||null)})),this._done}get stopped(){return this._done}get isStopped(){return this._stopped}stop(e){return this.close(e)}ping(){return{type:d.ServiceResponseType.PING,name:this.name,id:this.id,version:this.version,metadata:this.metadata}}reset(){if(this.started=(new Date).toISOString(),this.handlers)for(const e of this.handlers)e.stats.reset(e.qi)}addGroup(e){return new p(this,e)}addEndpoint(e,t){return new p(this).addEndpoint(e,t)}_addEndpoint(e){const t=new c.QueuedIteratorImpl;t.noIterator="function"==typeof e.handler,t.noIterator||(e.handler=(e,r)=>{e?this.stop(e).catch():t.push(new f(r))},t.iterClosed.then((()=>{this.close().catch()})));const r=this.setupHandler(e,!1);return r.qi=t,this.handlers.push(r),t}}t.ServiceImpl=y;class m{constructor(e,t){this.name=e,this.subject=t,this.average_processing_time=0,this.num_errors=0,this.num_requests=0,this.processing_time=0}reset(e){this.num_requests=0,this.processing_time=0,this.average_processing_time=0,this.num_errors=0,this.last_error=void 0,this.data=void 0;const t=e;t&&(t.time=0,t.processed=0)}countLatency(e){this.num_requests++,this.processing_time+=(0,u.nanos)(Date.now()-e),this.average_processing_time=Math.round(this.processing_time/this.num_requests)}countError(e){this.num_errors++,this.last_error=e.message}_stats(){const{name:e,subject:t,average_processing_time:r,num_errors:n,num_requests:i,processing_time:s,last_error:o,data:a}=this;return{name:e,subject:t,average_processing_time:r,num_errors:n,num_requests:i,processing_time:s,last_error:o,data:a}}stats(e){const t=e;return!1===(null==t?void 0:t.noIterator)&&(this.processing_time=t.time,this.num_requests=t.processed,this.average_processing_time=this.processing_time>0&&this.num_requests>0?this.processing_time/this.num_requests:0),this._stats()}}},7418:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ServiceClientImpl=void 0;const s=r(3164),o=r(2941),a=r(4629),c=r(9550),u=r(6087),l=r(9550);t.ServiceClientImpl=class{constructor(e,t={strategy:l.RequestStrategy.JitterTimer,maxWait:2e3},r){this.nc=e,this.prefix=r,this.opts=t}ping(e="",t=""){return this.q(c.ServiceVerb.PING,e,t)}stats(e="",t=""){return this.q(c.ServiceVerb.STATS,e,t)}info(e="",t=""){return this.q(c.ServiceVerb.INFO,e,t)}q(e,t="",r=""){return n(this,void 0,void 0,(function*(){const c=new a.QueuedIteratorImpl,l=(0,o.JSONCodec)(),h=u.ServiceImpl.controlSubject(e,t,r,this.prefix),d=yield this.nc.requestMany(h,s.Empty,this.opts);return(()=>n(this,void 0,void 0,(function*(){var e,t,r,n;try{for(var s,o=!0,a=i(d);!(e=(s=yield a.next()).done);){n=s.value,o=!1;try{const e=n;try{const t=l.decode(e.data);c.push(t)}catch(e){c.push((()=>{c.stop(e)}))}}finally{o=!0}}}catch(e){t={error:e}}finally{try{o||e||!(r=a.return)||(yield r.call(a))}finally{if(t)throw t.error}}c.push((()=>{c.stop()}))})))().catch((e=>{c.stop(e)})),c}))}}},8007:(e,t)=>{"use strict";function r(e){const t=e.length;let r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}Object.defineProperty(t,"__esModule",{value:!0}),t.sha256=t.SHA256=t.BYTES=void 0;const n=[],i=[],s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";for(let e=0,t=64;e<t;++e)n[e]=s[e],i[s.charCodeAt(e)]=e;const{byteLength:o,toUint8Array:a,fromUint8Array:c}=function(e,t,n=!1){function i(e,t){return Math.floor(3*(e+t)/4-t)}function s(t,r,n){const i=new Array((n-r)/3);for(let o=r,a=0;o<n;o+=3)i[a++]=(s=(t[o]<<16)+(t[o+1]<<8)+t[o+2],e[s>>18&63]+e[s>>12&63]+e[s>>6&63]+e[63&s]);var s;return i.join("")}return{byteLength:e=>i.apply(null,r(e)),toUint8Array(e){const[n,s]=r(e),o=new Uint8Array(i(n,s)),a=s?n-4:n;let c,u,l=0;for(u=0;u<a;u+=4)c=t[e.charCodeAt(u)]<<18|t[e.charCodeAt(u+1)]<<12|t[e.charCodeAt(u+2)]<<6|t[e.charCodeAt(u+3)],o[l++]=c>>16&255,o[l++]=c>>8&255,o[l++]=255&c;return 2===s?(c=t[e.charCodeAt(u)]<<2|t[e.charCodeAt(u+1)]>>4,o[l++]=255&c):1===s&&(c=t[e.charCodeAt(u)]<<10|t[e.charCodeAt(u+1)]<<4|t[e.charCodeAt(u+2)]>>2,o[l++]=c>>8&255,o[l++]=255&c),o},fromUint8Array(t){const r=t.length,i=r%3,o=r-i,a=new Array(Math.ceil(o/16383)+(i?1:0));let c,u,l=0;for(let e=0;e<o;e+=16383)c=e+16383,a[l++]=s(t,e,c>o?o:c);return 1===i?(u=t[o],a[l]=e[u>>2]+e[u<<4&63],n||(a[l]+="==")):2===i&&(u=t[o]<<8|255&t[o+1],a[l]=e[u>>10]+e[u>>4&63]+e[u<<2&63],n||(a[l]+="=")),a.join("")}}}(n,i,!0),u=new TextDecoder,l=new TextEncoder;t.BYTES=32;class h{constructor(){this.hashSize=32,this._buf=new Uint8Array(64),this._K=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),this.init()}init(){return this._H=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),this._bufIdx=0,this._count=new Uint32Array(2),this._buf.fill(0),this._finalized=!1,this}update(e,t){if(null===e)throw new TypeError("msg must be a string or Uint8Array.");"string"==typeof e&&(e=function(e,t="utf8"){if(/^utf-?8$/i.test(t))return l.encode(e);if(/^base64$/i.test(t))return a(e);if(/^hex(?:adecimal)?$/i.test(t))return function(e){const t=e.length;if(t%2||!/^[0-9a-fA-F]+$/.test(e))throw new TypeError("Invalid hex string.");e=e.toLowerCase();const r=new Uint8Array(Math.floor(t/2)),n=t/2;for(let t=0;t<n;++t)r[t]=parseInt(e.substr(2*t,2),16);return r}(e);throw new TypeError("Unsupported string encoding.")}(e,t));for(let t=0,r=e.length;t<r;t++)this._buf[this._bufIdx++]=e[t],64===this._bufIdx&&(this._transform(),this._bufIdx=0);const r=this._count;return(r[0]+=e.length<<3)<e.length<<3&&r[1]++,r[1]+=e.length>>>29,this}digest(e){if(this._finalized)throw new Error("digest has already been called.");this._finalized=!0;const t=this._buf;let r=this._bufIdx;for(t[r++]=128;56!==r;)64===r&&(this._transform(),r=0),t[r++]=0;const n=this._count;t[56]=n[1]>>>24&255,t[57]=n[1]>>>16&255,t[58]=n[1]>>>8&255,t[59]=n[1]>>>0&255,t[60]=n[0]>>>24&255,t[61]=n[0]>>>16&255,t[62]=n[0]>>>8&255,t[63]=n[0]>>>0&255,this._transform();const i=new Uint8Array(32);for(let e=0;e<8;e++)i[0+(e<<2)]=this._H[e]>>>24&255,i[1+(e<<2)]=this._H[e]>>>16&255,i[2+(e<<2)]=this._H[e]>>>8&255,i[3+(e<<2)]=this._H[e]>>>0&255;return this.init(),e?function(e,t="utf8"){if(/^utf-?8$/i.test(t))return u.decode(e);if(/^base64$/i.test(t))return c(e);if(/^hex(?:adecimal)?$/i.test(t))return function(e){return e.reduce(((e,t)=>`${e}${t<16?"0":""}${t.toString(16)}`),"")}(e);throw new TypeError("Unsupported string encoding.")}(i,e):i}_transform(){const e=this._H;let t=e[0],r=e[1],n=e[2],i=e[3],s=e[4],o=e[5],a=e[6],c=e[7];const u=new Uint32Array(16);let l;for(l=0;l<16;l++)u[l]=this._buf[3+(l<<2)]|this._buf[2+(l<<2)]<<8|this._buf[1+(l<<2)]<<16|this._buf[l<<2]<<24;for(l=0;l<64;l++){let e;if(l<16)e=u[l];else{let t=u[l+1&15],r=u[l+14&15];e=u[15&l]=(t>>>7^t>>>18^t>>>3^t<<25^t<<14)+(r>>>17^r>>>19^r>>>10^r<<15^r<<13)+u[15&l]+u[l+9&15]|0}e=e+c+(s>>>6^s>>>11^s>>>25^s<<26^s<<21^s<<7)+(a^s&(o^a))+this._K[l]|0,c=a,a=o,o=s,s=i+e,i=n,n=r,r=t,t=e+(r&n^i&(r^n))+(r>>>2^r>>>13^r>>>22^r<<30^r<<19^r<<10)|0}e[0]=e[0]+t|0,e[1]=e[1]+r|0,e[2]=e[2]+n|0,e[3]=e[3]+i|0,e[4]=e[4]+s|0,e[5]=e[5]+o|0,e[6]=e[6]+a|0,e[7]=e[7]+c|0}}t.SHA256=h,t.sha256=function(e,t,r){return(new h).update(e,t).digest(r)}},7256:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extractProtocolMessage=t.protoLen=t.LF=t.CR=t.CRLF=t.CR_LF_LEN=t.CR_LF=t.getResolveFn=t.newTransport=t.getUrlParseFn=t.defaultPort=t.setTransportFactory=void 0;const n=r(3164),i=r(9550),s=r(9481);let o;function a(e){for(let r=0;r<e.length;r++){const n=r+1;if(e.byteLength>n&&e[r]===t.CR&&e[n]===t.LF)return n+1}return 0}t.setTransportFactory=function(e){o=e},t.defaultPort=function(){return void 0!==o&&void 0!==o.defaultPort?o.defaultPort:i.DEFAULT_PORT},t.getUrlParseFn=function(){return void 0!==o&&o.urlParseFn?o.urlParseFn:void 0},t.newTransport=function(){if(!o||"function"!=typeof o.factory)throw new Error("transport fn is not set");return o.factory()},t.getResolveFn=function(){return void 0!==o&&o.dnsResolveFn?o.dnsResolveFn:void 0},t.CR_LF="\r\n",t.CR_LF_LEN=t.CR_LF.length,t.CRLF=s.DataBuffer.fromAscii(t.CR_LF),t.CR=new Uint8Array(t.CRLF)[0],t.LF=new Uint8Array(t.CRLF)[1],t.protoLen=a,t.extractProtocolMessage=function(e){const t=a(e);if(t>0){const r=new Uint8Array(e).slice(0,t);return n.TD.decode(r)}return""}},1449:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TypedSubscription=t.checkFn=void 0;const i=r(3024),s=r(4629),o=r(9550);function a(e,t,r=!1){if(!0===r&&!e)throw o.NatsError.errorForCode(o.ErrorCode.ApiError,new Error(`${t} is not a function`));if(e&&"function"!=typeof e)throw o.NatsError.errorForCode(o.ErrorCode.ApiError,new Error(`${t} is not a function`))}t.checkFn=a;class c extends s.QueuedIteratorImpl{constructor(e,t,r){super(),a(r.adapter,"adapter",!0),this.adapter=r.adapter,r.callback&&a(r.callback,"callback"),this.noIterator="function"==typeof r.callback,r.ingestionFilterFn&&(a(r.ingestionFilterFn,"ingestionFilterFn"),this.ingestionFilterFn=r.ingestionFilterFn),r.protocolFilterFn&&(a(r.protocolFilterFn,"protocolFilterFn"),this.protocolFilterFn=r.protocolFilterFn),r.dispatchedFn&&(a(r.dispatchedFn,"dispatchedFn"),this.dispatchedFn=r.dispatchedFn),r.cleanupFn&&a(r.cleanupFn,"cleanupFn");let s=(e,t)=>{this.callback(e,t)};if(r.callback){const e=r.callback;s=(t,r)=>{const[n,i]=this.adapter(t,r);if(n)return void e(n,null);const{ingest:s}=this.ingestionFilterFn?this.ingestionFilterFn(i,this):{ingest:!0};s&&(!this.protocolFilterFn||this.protocolFilterFn(i))&&(e(n,i),this.dispatchedFn&&i&&this.dispatchedFn(i))}}const{max:o,queue:c,timeout:u}=r,l={queue:c,timeout:u,callback:s};o&&o>0&&(l.max=o),this.sub=e.subscribe(t,l),r.cleanupFn&&(this.sub.cleanupFn=r.cleanupFn),this.noIterator||this.iterClosed.then((()=>{this.unsubscribe()})),this.subIterDone=(0,i.deferred)(),Promise.all([this.sub.closed,this.iterClosed]).then((()=>{this.subIterDone.resolve()})).catch((()=>{this.subIterDone.resolve()})),(e=>n(this,void 0,void 0,(function*(){yield e.closed,this.stop()})))(this.sub).then().catch()}unsubscribe(e){this.sub.unsubscribe(e)}drain(){return this.sub.drain()}isDraining(){return this.sub.isDraining()}isClosed(){return this.sub.isClosed()}callback(e,t){this.sub.cancelTimeout();const[r,n]=this.adapter(e,t);r&&this.stop(r),n&&this.push(n)}getSubject(){return this.sub.getSubject()}getReceived(){return this.sub.getReceived()}getProcessed(){return this.sub.getProcessed()}getPending(){return this.sub.getPending()}getID(){return this.sub.getID()}getMax(){return this.sub.getMax()}get closed(){return this.sub.closed}}t.TypedSubscription=c},1740:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Empty=t.NatsError=void 0;var n=r(9550);Object.defineProperty(t,"NatsError",{enumerable:!0,get:function(){return n.NatsError}});var i=r(3164);Object.defineProperty(t,"Empty",{enumerable:!0,get:function(){return i.Empty}})},3024:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleMutex=t.Perf=t.collect=t.shuffle=t.debugDeferred=t.deferred=t.deadline=t.delay=t.timeout=t.render=t.extend=void 0;const s=r(3164),o=r(9550);function a(){let e={};const t=new Promise(((t,r)=>{e={resolve:t,reject:r}}));return Object.assign(t,e)}t.extend=function(e,...t){for(let r=0;r<t.length;r++){const n=t[r];Object.keys(n).forEach((function(t){e[t]=n[t]}))}return e},t.render=function(e){return s.TD.decode(e).replace(/\n/g,"␊").replace(/\r/g,"␍")},t.timeout=function(e){const t=o.NatsError.errorForCode(o.ErrorCode.Timeout);let r,n;const i=new Promise(((i,s)=>{r={cancel:()=>{n&&clearTimeout(n)}},n=setTimeout((()=>{s(t)}),e)}));return Object.assign(i,r)},t.delay=function(e=0){return new Promise((t=>{setTimeout((()=>{t()}),e)}))},t.deadline=function(e,t=1e3){const r=new Error("deadline exceeded"),n=a(),i=setTimeout((()=>n.reject(r)),t);return Promise.race([e,n]).finally((()=>clearTimeout(i)))},t.deferred=a,t.debugDeferred=function(){let e={};const t=new Promise(((t,r)=>{e={resolve:e=>{console.trace("resolve",e),t(e)},reject:e=>{console.trace("reject"),r(e)}}}));return Object.assign(t,e)},t.shuffle=function(e){for(let t=e.length-1;t>0;t--){const r=Math.floor(Math.random()*(t+1));[e[t],e[r]]=[e[r],e[t]]}return e},t.collect=function(e){var t,r,s,o,a,c,u;return n(this,void 0,void 0,(function*(){const n=[];try{for(t=!0,r=i(e);s=yield r.next(),!(o=s.done);){u=s.value,t=!1;try{const e=u;n.push(e)}finally{t=!0}}}catch(e){a={error:e}}finally{try{t||o||!(c=r.return)||(yield c.call(r))}finally{if(a)throw a.error}}return n}))},t.Perf=class{constructor(){this.timers=new Map,this.measures=new Map}mark(e){this.timers.set(e,performance.now())}measure(e,t,r){const n=this.timers.get(t);if(void 0===n)throw new Error(`${t} is not defined`);const i=this.timers.get(r);if(void 0===i)throw new Error(`${r} is not defined`);this.measures.set(e,i-n)}getEntries(){const e=[];return this.measures.forEach(((t,r)=>{e.push({name:r,duration:t})})),e}},t.SimpleMutex=class{constructor(e=1){this.max=e,this.current=0,this.waiting=[]}lock(){if(this.current++,this.current<=this.max)return Promise.resolve();const e=a();return this.waiting.push(e),e}unlock(){this.current--;const e=this.waiting.pop();null==e||e.resolve()}}},6312:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.connect=t.wsUrlParseFn=void 0;const n=r(2238),i=r(319);function s(e){/^(.*:\/\/)(.*)/.test(e)||(e=`https://${e}`);let t=new URL(e);const r=t.protocol.toLowerCase();let n,i;"https:"!==r&&"http"!==r&&(e=e.replace(/^(.*:\/\/)(.*)/gm,"$2"),t=new URL(`http://${e}`));const s=t.hostname,o=t.pathname,a=t.search||"";switch(r){case"http:":case"ws:":case"nats:":i=t.port||"80",n="ws:";break;default:i=t.port||"443",n="wss:"}return`${n}//${s}:${i}${o}${a}`}t.wsUrlParseFn=s,t.connect=function(e={}){return(0,n.setTransportFactory)({defaultPort:443,urlParseFn:s,factory:()=>new i.WsTransport}),n.NatsConnectionImpl.connect(e)}},2787:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0,i(r(7658),t),i(r(9439),t);var s=r(6312);Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return s.connect}})},319:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{c(n.next(e))}catch(e){s(e)}}function a(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__await||function(e){return this instanceof i?(this.v=e,this):new i(e)},s=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,s=r.apply(e,t||[]),o=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){s[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||c(e,t)}))})}function c(e,t){try{(r=s[e](t)).value instanceof i?Promise.resolve(r.value.v).then(u,l):h(o[0][2],r)}catch(e){h(o[0][3],e)}var r}function u(e){c("next",e)}function l(e){c("throw",e)}function h(e,t){e(t),o.shift(),o.length&&c(o[0][0],o[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.WsTransport=void 0;const o=r(2238);class a{constructor(){this.version="1.16.1",this.lang="nats.ws",this.connected=!1,this.done=!1,this.socketClosed=!1,this.encrypted=!1,this.peeked=!1,this.yields=[],this.signal=(0,o.deferred)(),this.closedNotification=(0,o.deferred)()}connect(e,t){return n(this,void 0,void 0,(function*(){const r=(0,o.deferred)();if(t.tls)return r.reject(new o.NatsError("tls",o.ErrorCode.InvalidOption)),r;this.options=t;const n=e.src;if(t.wsFactory){const{socket:r,encrypted:n}=yield t.wsFactory(e.src,t);this.socket=r,this.encrypted=n}else this.encrypted=0===n.indexOf("wss://"),this.socket=new WebSocket(n);return this.socket.binaryType="arraybuffer",this.socket.onopen=()=>{},this.socket.onmessage=e=>{if(this.yields.push(new Uint8Array(e.data)),this.peeked)return void this.signal.resolve();const n=o.DataBuffer.concat(...this.yields),i=(0,o.extractProtocolMessage)(n);if(""!==i){const e=o.INFO.exec(i);if(!e)return t.debug&&console.error("!!!",(0,o.render)(n)),void r.reject(new Error("unexpected response from server"));try{const t=JSON.parse(e[1]);(0,o.checkOptions)(t,this.options),this.peeked=!0,this.connected=!0,this.signal.resolve(),r.resolve()}catch(e){return void r.reject(e)}}},this.socket.onclose=e=>{let t;this.socketClosed=!0,this.done||(e.wasClean||(t=new Error(e.reason)),this._closed(t))},this.socket.onerror=e=>{const t=e,n=new o.NatsError(t.message,o.ErrorCode.Unknown,new Error(t.error));r.reject(n)},r}))}disconnect(){this._closed(void 0,!0)}_closed(e,t=!0){return n(this,void 0,void 0,(function*(){if(this.connected&&!this.done){if(this.closeError=e,!e)for(;!this.socketClosed&&this.socket.bufferedAmount>0;)console.log(this.socket.bufferedAmount),yield(0,o.delay)(100);this.done=!0;try{this.socket.close(e?1002:1e3,e?e.message:void 0)}catch(e){}t&&this.closedNotification.resolve(e)}}))}get isClosed(){return this.done}[Symbol.asyncIterator](){return this.iterate()}iterate(){return s(this,arguments,(function*(){for(;;){0===this.yields.length&&(yield i(this.signal));const e=this.yields;this.yields=[];for(let t=0;t<e.length;t++)this.options.debug&&console.info(`> ${(0,o.render)(e[t])}`),yield yield i(e[t]);if(this.done)break;0===this.yields.length&&(e.length=0,this.yields=e,this.signal=(0,o.deferred)())}}))}isEncrypted(){return this.connected&&this.encrypted}send(e){if(!this.done)try{return this.socket.send(e.buffer),void(this.options.debug&&console.info(`< ${(0,o.render)(e)}`))}catch(t){this.options.debug&&console.error(`!!! ${(0,o.render)(e)}: ${t}`)}}close(e){return this._closed(e,!1)}closed(){return this.closedNotification}}t.WsTransport=a},4084:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.base32=void 0;const r="ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";t.base32=class{static encode(e){let t=0,n=0,i=new Uint8Array(e),s=new Uint8Array(2*e.byteLength),o=0;for(let e=0;e<i.byteLength;e++)for(n=n<<8|i[e],t+=8;t>=5;){let e=n>>>t-5&31;s[o++]=r.charAt(e).charCodeAt(0),t-=5}if(t>0){let e=n<<5-t&31;s[o++]=r.charAt(e).charCodeAt(0)}return s.slice(0,o)}static decode(e){let t=0,n=0,i=0,s=new Uint8Array(e),o=new Uint8Array(5*s.byteLength/8|0);for(let e=0;e<s.byteLength;e++){let a=String.fromCharCode(s[e]),c=r.indexOf(a);if(-1===c)throw new Error("Illegal Base32 character: "+s[e]);n=n<<5|c,t+=5,t>=8&&(o[i++]=n>>>t-8&255,t-=8)}return o.slice(0,i)}}},373:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Codec=void 0;const n=r(1150),i=r(925),s=r(4084);class o{static encode(e,t){if(!(t&&t instanceof Uint8Array))throw new i.NKeysError(i.NKeysErrorCode.SerializationError);if(!i.Prefixes.isValidPrefix(e))throw new i.NKeysError(i.NKeysErrorCode.InvalidPrefixByte);return o._encode(!1,e,t)}static encodeSeed(e,t){if(!t)throw new i.NKeysError(i.NKeysErrorCode.ApiError);if(!i.Prefixes.isValidPublicPrefix(e))throw new i.NKeysError(i.NKeysErrorCode.InvalidPrefixByte);if(32!==t.byteLength)throw new i.NKeysError(i.NKeysErrorCode.InvalidSeedLen);return o._encode(!0,e,t)}static decode(e,t){if(!i.Prefixes.isValidPrefix(e))throw new i.NKeysError(i.NKeysErrorCode.InvalidPrefixByte);const r=o._decode(t);if(r[0]!==e)throw new i.NKeysError(i.NKeysErrorCode.InvalidPrefixByte);return r.slice(1)}static decodeSeed(e){const t=o._decode(e),r=o._decodePrefix(t);if(r[0]!=i.Prefix.Seed)throw new i.NKeysError(i.NKeysErrorCode.InvalidSeed);if(!i.Prefixes.isValidPublicPrefix(r[1]))throw new i.NKeysError(i.NKeysErrorCode.InvalidPrefixByte);return{buf:t.slice(2),prefix:r[1]}}static _encode(e,t,r){const a=e?2:1,c=r.byteLength,u=a+c,l=new Uint8Array(a+c+2);if(e){const e=o._encodePrefix(i.Prefix.Seed,t);l.set(e)}else l[0]=t;l.set(r,a);const h=n.crc16.checksum(l.slice(0,u));return new DataView(l.buffer).setUint16(u,h,!0),s.base32.encode(l)}static _decode(e){if(e.byteLength<4)throw new i.NKeysError(i.NKeysErrorCode.InvalidEncoding);let t;try{t=s.base32.decode(e)}catch(e){throw new i.NKeysError(i.NKeysErrorCode.InvalidEncoding,e)}const r=t.byteLength-2,o=new DataView(t.buffer).getUint16(r,!0),a=t.slice(0,r);if(!n.crc16.validate(a,o))throw new i.NKeysError(i.NKeysErrorCode.InvalidChecksum);return a}static _encodePrefix(e,t){return new Uint8Array([e|t>>5,(31&t)<<3])}static _decodePrefix(e){const t=248&e[0],r=(7&e[0])<<5|(248&e[1])>>3;return new Uint8Array([t,r])}}t.Codec=o},1150:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.crc16=void 0;const r=new Uint16Array([0,4129,8258,12387,16516,20645,24774,28903,33032,37161,41290,45419,49548,53677,57806,61935,4657,528,12915,8786,21173,17044,29431,25302,37689,33560,45947,41818,54205,50076,62463,58334,9314,13379,1056,5121,25830,29895,17572,21637,42346,46411,34088,38153,58862,62927,50604,54669,13907,9842,5649,1584,30423,26358,22165,18100,46939,42874,38681,34616,63455,59390,55197,51132,18628,22757,26758,30887,2112,6241,10242,14371,51660,55789,59790,63919,35144,39273,43274,47403,23285,19156,31415,27286,6769,2640,14899,10770,56317,52188,64447,60318,39801,35672,47931,43802,27814,31879,19684,23749,11298,15363,3168,7233,60846,64911,52716,56781,44330,48395,36200,40265,32407,28342,24277,20212,15891,11826,7761,3696,65439,61374,57309,53244,48923,44858,40793,36728,37256,33193,45514,41451,53516,49453,61774,57711,4224,161,12482,8419,20484,16421,28742,24679,33721,37784,41979,46042,49981,54044,58239,62302,689,4752,8947,13010,16949,21012,25207,29270,46570,42443,38312,34185,62830,58703,54572,50445,13538,9411,5280,1153,29798,25671,21540,17413,42971,47098,34713,38840,59231,63358,50973,55100,9939,14066,1681,5808,26199,30326,17941,22068,55628,51565,63758,59695,39368,35305,47498,43435,22596,18533,30726,26663,6336,2273,14466,10403,52093,56156,60223,64286,35833,39896,43963,48026,19061,23124,27191,31254,2801,6864,10931,14994,64814,60687,56684,52557,48554,44427,40424,36297,31782,27655,23652,19525,15522,11395,7392,3265,61215,65342,53085,57212,44955,49082,36825,40952,28183,32310,20053,24180,11923,16050,3793,7920]);class n{static checksum(e){let t=0;for(let n=0;n<e.byteLength;n++){let i=e[n];t=t<<8&65535^r[255&(t>>8^i)]}return t}static validate(e,t){return n.checksum(e)==t}}t.crc16=n},7491:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0}),t.getEd25519Helper=t.setEd25519Helper=void 0,t.setEd25519Helper=function(e){r=e},t.getEd25519Helper=function(){return r}},6115:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0});const s=r(5548),o={randomBytes:s.randomBytes,verify:s.sign.detached.verify,fromSeed:s.sign.keyPair.fromSeed,sign:s.sign.detached};if("undefined"==typeof TextEncoder){const e=r(911);r.g.TextEncoder=e.TextEncoder,r.g.TextDecoder=e.TextDecoder}"undefined"==typeof atob&&(r.g.atob=e=>Buffer.from(e,"base64").toString("binary"),r.g.btoa=e=>Buffer.from(e,"binary").toString("base64"));const{setEd25519Helper:a}=r(7491);a(o),i(r(6387),t)},2907:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KP=void 0;const n=r(373),i=r(925),s=r(7491);t.KP=class{constructor(e){this.seed=e}getRawSeed(){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);return n.Codec.decodeSeed(this.seed).buf}getSeed(){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);return this.seed}getPublicKey(){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);const e=n.Codec.decodeSeed(this.seed),t=(0,s.getEd25519Helper)().fromSeed(this.getRawSeed()),r=n.Codec.encode(e.prefix,t.publicKey);return(new TextDecoder).decode(r)}getPrivateKey(){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);const e=(0,s.getEd25519Helper)().fromSeed(this.getRawSeed());return n.Codec.encode(i.Prefix.Private,e.secretKey)}sign(e){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);const t=(0,s.getEd25519Helper)().fromSeed(this.getRawSeed());return(0,s.getEd25519Helper)().sign(e,t.secretKey)}verify(e,t){if(!this.seed)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);const r=(0,s.getEd25519Helper)().fromSeed(this.getRawSeed());return(0,s.getEd25519Helper)().verify(e,t,r.publicKey)}clear(){this.seed&&(this.seed.fill(0),this.seed=void 0)}}},6387:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.encode=t.decode=t.Prefix=t.NKeysErrorCode=t.NKeysError=t.fromSeed=t.fromPublic=t.createUser=t.createServer=t.createPair=t.createOperator=t.createCluster=t.createAccount=void 0;var n=r(925);Object.defineProperty(t,"createAccount",{enumerable:!0,get:function(){return n.createAccount}}),Object.defineProperty(t,"createCluster",{enumerable:!0,get:function(){return n.createCluster}}),Object.defineProperty(t,"createOperator",{enumerable:!0,get:function(){return n.createOperator}}),Object.defineProperty(t,"createPair",{enumerable:!0,get:function(){return n.createPair}}),Object.defineProperty(t,"createServer",{enumerable:!0,get:function(){return n.createServer}}),Object.defineProperty(t,"createUser",{enumerable:!0,get:function(){return n.createUser}}),Object.defineProperty(t,"fromPublic",{enumerable:!0,get:function(){return n.fromPublic}}),Object.defineProperty(t,"fromSeed",{enumerable:!0,get:function(){return n.fromSeed}}),Object.defineProperty(t,"NKeysError",{enumerable:!0,get:function(){return n.NKeysError}}),Object.defineProperty(t,"NKeysErrorCode",{enumerable:!0,get:function(){return n.NKeysErrorCode}}),Object.defineProperty(t,"Prefix",{enumerable:!0,get:function(){return n.Prefix}});var i=r(2594);Object.defineProperty(t,"decode",{enumerable:!0,get:function(){return i.decode}}),Object.defineProperty(t,"encode",{enumerable:!0,get:function(){return i.encode}})},925:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NKeysError=t.NKeysErrorCode=t.Prefixes=t.Prefix=t.fromSeed=t.fromPublic=t.createServer=t.createCluster=t.createUser=t.createAccount=t.createOperator=t.createPair=void 0;const n=r(2907),i=r(3541),s=r(373),o=r(7491);function a(e){const t=(0,o.getEd25519Helper)().randomBytes(32);let r=s.Codec.encodeSeed(e,new Uint8Array(t));return new n.KP(r)}var c,u;t.createPair=a,t.createOperator=function(){return a(c.Operator)},t.createAccount=function(){return a(c.Account)},t.createUser=function(){return a(c.User)},t.createCluster=function(){return a(c.Cluster)},t.createServer=function(){return a(c.Server)},t.fromPublic=function(e){const t=(new TextEncoder).encode(e),r=s.Codec._decode(t),n=l.parsePrefix(r[0]);if(l.isValidPublicPrefix(n))return new i.PublicKey(t);throw new h(u.InvalidPublicKey)},t.fromSeed=function(e){return s.Codec.decodeSeed(e),new n.KP(e)},function(e){e[e.Seed=144]="Seed",e[e.Private=120]="Private",e[e.Operator=112]="Operator",e[e.Server=104]="Server",e[e.Cluster=16]="Cluster",e[e.Account=0]="Account",e[e.User=160]="User"}(c=t.Prefix||(t.Prefix={}));class l{static isValidPublicPrefix(e){return e==c.Server||e==c.Operator||e==c.Cluster||e==c.Account||e==c.User}static startsWithValidPrefix(e){let t=e[0];return"S"==t||"P"==t||"O"==t||"N"==t||"C"==t||"A"==t||"U"==t}static isValidPrefix(e){return-1!=this.parsePrefix(e)}static parsePrefix(e){switch(e){case c.Seed:return c.Seed;case c.Private:return c.Private;case c.Operator:return c.Operator;case c.Server:return c.Server;case c.Cluster:return c.Cluster;case c.Account:return c.Account;case c.User:return c.User;default:return-1}}}t.Prefixes=l,function(e){e.InvalidPrefixByte="nkeys: invalid prefix byte",e.InvalidKey="nkeys: invalid key",e.InvalidPublicKey="nkeys: invalid public key",e.InvalidSeedLen="nkeys: invalid seed length",e.InvalidSeed="nkeys: invalid seed",e.InvalidEncoding="nkeys: invalid encoded key",e.InvalidSignature="nkeys: signature verification failed",e.CannotSign="nkeys: cannot sign, no private key available",e.PublicKeyOnly="nkeys: no seed or private key available",e.InvalidChecksum="nkeys: invalid checksum",e.SerializationError="nkeys: serialization error",e.ApiError="nkeys: api error",e.ClearedPair="nkeys: pair is cleared"}(u=t.NKeysErrorCode||(t.NKeysErrorCode={}));class h extends Error{constructor(e,t){super(e),this.name="NKeysError",this.code=e,this.chainedError=t}}t.NKeysError=h},3541:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PublicKey=void 0;const n=r(373),i=r(925),s=r(7491);t.PublicKey=class{constructor(e){this.publicKey=e}getPublicKey(){if(!this.publicKey)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);return(new TextDecoder).decode(this.publicKey)}getPrivateKey(){if(!this.publicKey)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);throw new i.NKeysError(i.NKeysErrorCode.PublicKeyOnly)}getSeed(){if(!this.publicKey)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);throw new i.NKeysError(i.NKeysErrorCode.PublicKeyOnly)}sign(e){if(!this.publicKey)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);throw new i.NKeysError(i.NKeysErrorCode.CannotSign)}verify(e,t){if(!this.publicKey)throw new i.NKeysError(i.NKeysErrorCode.ClearedPair);let r=n.Codec._decode(this.publicKey);return(0,s.getEd25519Helper)().verify(e,t,r.slice(1))}clear(){this.publicKey&&(this.publicKey.fill(0),this.publicKey=void 0)}}},2594:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dump=t.decode=t.encode=void 0,t.encode=function(e){return btoa(String.fromCharCode(...e))},t.decode=function(e){const t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t.charCodeAt(e);return r},t.dump=function(e,t){t&&console.log(t);let r=[];for(let t=0;t<e.byteLength;t++){t%8==0&&r.push("\n");let n=e[t].toString(16);1===n.length&&(n="0"+n),r.push(n)}console.log(r.join("  "))}},5548:(e,t,r)=>{!function(e){"use strict";var t=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},n=function(){throw new Error("no PRNG")},i=new Uint8Array(16),s=new Uint8Array(32);s[0]=9;var o=t(),a=t([1]),c=t([56129,1]),u=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),l=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),h=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),d=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),f=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function p(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function y(e,t,r,n,i){var s,o=0;for(s=0;s<i;s++)o|=e[t+s]^r[n+s];return(1&o-1>>>8)-1}function m(e,t,r,n){return y(e,t,r,n,16)}function g(e,t,r,n){return y(e,t,r,n,32)}function b(e,t,r,n){!function(e,t,r,n){for(var i,s=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,u=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,l=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,h=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,d=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,f=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,p=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,y=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,g=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,b=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=s,E=o,P=a,S=c,O=u,A=l,C=h,j=d,x=f,I=p,k=y,M=m,N=g,T=b,R=v,U=_,B=0;B<20;B+=2)w^=(i=(N^=(i=(x^=(i=(O^=(i=w+N|0)<<7|i>>>25)+w|0)<<9|i>>>23)+O|0)<<13|i>>>19)+x|0)<<18|i>>>14,A^=(i=(E^=(i=(T^=(i=(I^=(i=A+E|0)<<7|i>>>25)+A|0)<<9|i>>>23)+I|0)<<13|i>>>19)+T|0)<<18|i>>>14,k^=(i=(C^=(i=(P^=(i=(R^=(i=k+C|0)<<7|i>>>25)+k|0)<<9|i>>>23)+R|0)<<13|i>>>19)+P|0)<<18|i>>>14,U^=(i=(M^=(i=(j^=(i=(S^=(i=U+M|0)<<7|i>>>25)+U|0)<<9|i>>>23)+S|0)<<13|i>>>19)+j|0)<<18|i>>>14,w^=(i=(S^=(i=(P^=(i=(E^=(i=w+S|0)<<7|i>>>25)+w|0)<<9|i>>>23)+E|0)<<13|i>>>19)+P|0)<<18|i>>>14,A^=(i=(O^=(i=(j^=(i=(C^=(i=A+O|0)<<7|i>>>25)+A|0)<<9|i>>>23)+C|0)<<13|i>>>19)+j|0)<<18|i>>>14,k^=(i=(I^=(i=(x^=(i=(M^=(i=k+I|0)<<7|i>>>25)+k|0)<<9|i>>>23)+M|0)<<13|i>>>19)+x|0)<<18|i>>>14,U^=(i=(R^=(i=(T^=(i=(N^=(i=U+R|0)<<7|i>>>25)+U|0)<<9|i>>>23)+N|0)<<13|i>>>19)+T|0)<<18|i>>>14;w=w+s|0,E=E+o|0,P=P+a|0,S=S+c|0,O=O+u|0,A=A+l|0,C=C+h|0,j=j+d|0,x=x+f|0,I=I+p|0,k=k+y|0,M=M+m|0,N=N+g|0,T=T+b|0,R=R+v|0,U=U+_|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=E>>>0&255,e[5]=E>>>8&255,e[6]=E>>>16&255,e[7]=E>>>24&255,e[8]=P>>>0&255,e[9]=P>>>8&255,e[10]=P>>>16&255,e[11]=P>>>24&255,e[12]=S>>>0&255,e[13]=S>>>8&255,e[14]=S>>>16&255,e[15]=S>>>24&255,e[16]=O>>>0&255,e[17]=O>>>8&255,e[18]=O>>>16&255,e[19]=O>>>24&255,e[20]=A>>>0&255,e[21]=A>>>8&255,e[22]=A>>>16&255,e[23]=A>>>24&255,e[24]=C>>>0&255,e[25]=C>>>8&255,e[26]=C>>>16&255,e[27]=C>>>24&255,e[28]=j>>>0&255,e[29]=j>>>8&255,e[30]=j>>>16&255,e[31]=j>>>24&255,e[32]=x>>>0&255,e[33]=x>>>8&255,e[34]=x>>>16&255,e[35]=x>>>24&255,e[36]=I>>>0&255,e[37]=I>>>8&255,e[38]=I>>>16&255,e[39]=I>>>24&255,e[40]=k>>>0&255,e[41]=k>>>8&255,e[42]=k>>>16&255,e[43]=k>>>24&255,e[44]=M>>>0&255,e[45]=M>>>8&255,e[46]=M>>>16&255,e[47]=M>>>24&255,e[48]=N>>>0&255,e[49]=N>>>8&255,e[50]=N>>>16&255,e[51]=N>>>24&255,e[52]=T>>>0&255,e[53]=T>>>8&255,e[54]=T>>>16&255,e[55]=T>>>24&255,e[56]=R>>>0&255,e[57]=R>>>8&255,e[58]=R>>>16&255,e[59]=R>>>24&255,e[60]=U>>>0&255,e[61]=U>>>8&255,e[62]=U>>>16&255,e[63]=U>>>24&255}(e,t,r,n)}function v(e,t,r,n){!function(e,t,r,n){for(var i,s=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,c=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,u=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,l=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,h=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,d=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,f=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,p=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,y=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,g=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,b=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,_=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=0;w<20;w+=2)s^=(i=(g^=(i=(f^=(i=(u^=(i=s+g|0)<<7|i>>>25)+s|0)<<9|i>>>23)+u|0)<<13|i>>>19)+f|0)<<18|i>>>14,l^=(i=(o^=(i=(b^=(i=(p^=(i=l+o|0)<<7|i>>>25)+l|0)<<9|i>>>23)+p|0)<<13|i>>>19)+b|0)<<18|i>>>14,y^=(i=(h^=(i=(a^=(i=(v^=(i=y+h|0)<<7|i>>>25)+y|0)<<9|i>>>23)+v|0)<<13|i>>>19)+a|0)<<18|i>>>14,_^=(i=(m^=(i=(d^=(i=(c^=(i=_+m|0)<<7|i>>>25)+_|0)<<9|i>>>23)+c|0)<<13|i>>>19)+d|0)<<18|i>>>14,s^=(i=(c^=(i=(a^=(i=(o^=(i=s+c|0)<<7|i>>>25)+s|0)<<9|i>>>23)+o|0)<<13|i>>>19)+a|0)<<18|i>>>14,l^=(i=(u^=(i=(d^=(i=(h^=(i=l+u|0)<<7|i>>>25)+l|0)<<9|i>>>23)+h|0)<<13|i>>>19)+d|0)<<18|i>>>14,y^=(i=(p^=(i=(f^=(i=(m^=(i=y+p|0)<<7|i>>>25)+y|0)<<9|i>>>23)+m|0)<<13|i>>>19)+f|0)<<18|i>>>14,_^=(i=(v^=(i=(b^=(i=(g^=(i=_+v|0)<<7|i>>>25)+_|0)<<9|i>>>23)+g|0)<<13|i>>>19)+b|0)<<18|i>>>14;e[0]=s>>>0&255,e[1]=s>>>8&255,e[2]=s>>>16&255,e[3]=s>>>24&255,e[4]=l>>>0&255,e[5]=l>>>8&255,e[6]=l>>>16&255,e[7]=l>>>24&255,e[8]=y>>>0&255,e[9]=y>>>8&255,e[10]=y>>>16&255,e[11]=y>>>24&255,e[12]=_>>>0&255,e[13]=_>>>8&255,e[14]=_>>>16&255,e[15]=_>>>24&255,e[16]=h>>>0&255,e[17]=h>>>8&255,e[18]=h>>>16&255,e[19]=h>>>24&255,e[20]=d>>>0&255,e[21]=d>>>8&255,e[22]=d>>>16&255,e[23]=d>>>24&255,e[24]=f>>>0&255,e[25]=f>>>8&255,e[26]=f>>>16&255,e[27]=f>>>24&255,e[28]=p>>>0&255,e[29]=p>>>8&255,e[30]=p>>>16&255,e[31]=p>>>24&255}(e,t,r,n)}var _=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function w(e,t,r,n,i,s,o){var a,c,u=new Uint8Array(16),l=new Uint8Array(64);for(c=0;c<16;c++)u[c]=0;for(c=0;c<8;c++)u[c]=s[c];for(;i>=64;){for(b(l,u,o,_),c=0;c<64;c++)e[t+c]=r[n+c]^l[c];for(a=1,c=8;c<16;c++)a=a+(255&u[c])|0,u[c]=255&a,a>>>=8;i-=64,t+=64,n+=64}if(i>0)for(b(l,u,o,_),c=0;c<i;c++)e[t+c]=r[n+c]^l[c];return 0}function E(e,t,r,n,i){var s,o,a=new Uint8Array(16),c=new Uint8Array(64);for(o=0;o<16;o++)a[o]=0;for(o=0;o<8;o++)a[o]=n[o];for(;r>=64;){for(b(c,a,i,_),o=0;o<64;o++)e[t+o]=c[o];for(s=1,o=8;o<16;o++)s=s+(255&a[o])|0,a[o]=255&s,s>>>=8;r-=64,t+=64}if(r>0)for(b(c,a,i,_),o=0;o<r;o++)e[t+o]=c[o];return 0}function P(e,t,r,n,i){var s=new Uint8Array(32);v(s,n,i,_);for(var o=new Uint8Array(8),a=0;a<8;a++)o[a]=n[a+16];return E(e,t,r,o,s)}function S(e,t,r,n,i,s,o){var a=new Uint8Array(32);v(a,s,o,_);for(var c=new Uint8Array(8),u=0;u<8;u++)c[u]=s[u+16];return w(e,t,r,n,i,c,a)}var O=function(e){var t,r,n,i,s,o,a,c;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|r<<3),n=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(r>>>10|n<<6),i=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(n>>>7|i<<9),s=255&e[8]|(255&e[9])<<8,this.r[4]=255&(i>>>4|s<<12),this.r[5]=s>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(s>>>14|o<<2),a=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(o>>>11|a<<5),c=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(a>>>8|c<<8),this.r[9]=c>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function A(e,t,r,n,i,s){var o=new O(s);return o.update(r,n,i),o.finish(e,t),0}function C(e,t,r,n,i,s){var o=new Uint8Array(16);return A(o,0,r,n,i,s),m(e,t,o,0)}function j(e,t,r,n,i){var s;if(r<32)return-1;for(S(e,0,t,0,r,n,i),A(e,16,e,32,r-32,e),s=0;s<16;s++)e[s]=0;return 0}function x(e,t,r,n,i){var s,o=new Uint8Array(32);if(r<32)return-1;if(P(o,0,32,n,i),0!==C(t,16,t,32,r-32,o))return-1;for(S(e,0,t,0,r,n,i),s=0;s<32;s++)e[s]=0;return 0}function I(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function k(e){var t,r,n=1;for(t=0;t<16;t++)r=e[t]+n+65535,n=Math.floor(r/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function M(e,t,r){for(var n,i=~(r-1),s=0;s<16;s++)n=i&(e[s]^t[s]),e[s]^=n,t[s]^=n}function N(e,r){var n,i,s,o=t(),a=t();for(n=0;n<16;n++)a[n]=r[n];for(k(a),k(a),k(a),i=0;i<2;i++){for(o[0]=a[0]-65517,n=1;n<15;n++)o[n]=a[n]-65535-(o[n-1]>>16&1),o[n-1]&=65535;o[15]=a[15]-32767-(o[14]>>16&1),s=o[15]>>16&1,o[14]&=65535,M(a,o,1-s)}for(n=0;n<16;n++)e[2*n]=255&a[n],e[2*n+1]=a[n]>>8}function T(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return N(r,e),N(n,t),g(r,0,n,0)}function R(e){var t=new Uint8Array(32);return N(t,e),1&t[0]}function U(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function B(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function F(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function L(e,t,r){var n,i,s=0,o=0,a=0,c=0,u=0,l=0,h=0,d=0,f=0,p=0,y=0,m=0,g=0,b=0,v=0,_=0,w=0,E=0,P=0,S=0,O=0,A=0,C=0,j=0,x=0,I=0,k=0,M=0,N=0,T=0,R=0,U=r[0],B=r[1],F=r[2],L=r[3],$=r[4],D=r[5],q=r[6],H=r[7],K=r[8],J=r[9],G=r[10],z=r[11],V=r[12],W=r[13],Y=r[14],X=r[15];s+=(n=t[0])*U,o+=n*B,a+=n*F,c+=n*L,u+=n*$,l+=n*D,h+=n*q,d+=n*H,f+=n*K,p+=n*J,y+=n*G,m+=n*z,g+=n*V,b+=n*W,v+=n*Y,_+=n*X,o+=(n=t[1])*U,a+=n*B,c+=n*F,u+=n*L,l+=n*$,h+=n*D,d+=n*q,f+=n*H,p+=n*K,y+=n*J,m+=n*G,g+=n*z,b+=n*V,v+=n*W,_+=n*Y,w+=n*X,a+=(n=t[2])*U,c+=n*B,u+=n*F,l+=n*L,h+=n*$,d+=n*D,f+=n*q,p+=n*H,y+=n*K,m+=n*J,g+=n*G,b+=n*z,v+=n*V,_+=n*W,w+=n*Y,E+=n*X,c+=(n=t[3])*U,u+=n*B,l+=n*F,h+=n*L,d+=n*$,f+=n*D,p+=n*q,y+=n*H,m+=n*K,g+=n*J,b+=n*G,v+=n*z,_+=n*V,w+=n*W,E+=n*Y,P+=n*X,u+=(n=t[4])*U,l+=n*B,h+=n*F,d+=n*L,f+=n*$,p+=n*D,y+=n*q,m+=n*H,g+=n*K,b+=n*J,v+=n*G,_+=n*z,w+=n*V,E+=n*W,P+=n*Y,S+=n*X,l+=(n=t[5])*U,h+=n*B,d+=n*F,f+=n*L,p+=n*$,y+=n*D,m+=n*q,g+=n*H,b+=n*K,v+=n*J,_+=n*G,w+=n*z,E+=n*V,P+=n*W,S+=n*Y,O+=n*X,h+=(n=t[6])*U,d+=n*B,f+=n*F,p+=n*L,y+=n*$,m+=n*D,g+=n*q,b+=n*H,v+=n*K,_+=n*J,w+=n*G,E+=n*z,P+=n*V,S+=n*W,O+=n*Y,A+=n*X,d+=(n=t[7])*U,f+=n*B,p+=n*F,y+=n*L,m+=n*$,g+=n*D,b+=n*q,v+=n*H,_+=n*K,w+=n*J,E+=n*G,P+=n*z,S+=n*V,O+=n*W,A+=n*Y,C+=n*X,f+=(n=t[8])*U,p+=n*B,y+=n*F,m+=n*L,g+=n*$,b+=n*D,v+=n*q,_+=n*H,w+=n*K,E+=n*J,P+=n*G,S+=n*z,O+=n*V,A+=n*W,C+=n*Y,j+=n*X,p+=(n=t[9])*U,y+=n*B,m+=n*F,g+=n*L,b+=n*$,v+=n*D,_+=n*q,w+=n*H,E+=n*K,P+=n*J,S+=n*G,O+=n*z,A+=n*V,C+=n*W,j+=n*Y,x+=n*X,y+=(n=t[10])*U,m+=n*B,g+=n*F,b+=n*L,v+=n*$,_+=n*D,w+=n*q,E+=n*H,P+=n*K,S+=n*J,O+=n*G,A+=n*z,C+=n*V,j+=n*W,x+=n*Y,I+=n*X,m+=(n=t[11])*U,g+=n*B,b+=n*F,v+=n*L,_+=n*$,w+=n*D,E+=n*q,P+=n*H,S+=n*K,O+=n*J,A+=n*G,C+=n*z,j+=n*V,x+=n*W,I+=n*Y,k+=n*X,g+=(n=t[12])*U,b+=n*B,v+=n*F,_+=n*L,w+=n*$,E+=n*D,P+=n*q,S+=n*H,O+=n*K,A+=n*J,C+=n*G,j+=n*z,x+=n*V,I+=n*W,k+=n*Y,M+=n*X,b+=(n=t[13])*U,v+=n*B,_+=n*F,w+=n*L,E+=n*$,P+=n*D,S+=n*q,O+=n*H,A+=n*K,C+=n*J,j+=n*G,x+=n*z,I+=n*V,k+=n*W,M+=n*Y,N+=n*X,v+=(n=t[14])*U,_+=n*B,w+=n*F,E+=n*L,P+=n*$,S+=n*D,O+=n*q,A+=n*H,C+=n*K,j+=n*J,x+=n*G,I+=n*z,k+=n*V,M+=n*W,N+=n*Y,T+=n*X,_+=(n=t[15])*U,o+=38*(E+=n*F),a+=38*(P+=n*L),c+=38*(S+=n*$),u+=38*(O+=n*D),l+=38*(A+=n*q),h+=38*(C+=n*H),d+=38*(j+=n*K),f+=38*(x+=n*J),p+=38*(I+=n*G),y+=38*(k+=n*z),m+=38*(M+=n*V),g+=38*(N+=n*W),b+=38*(T+=n*Y),v+=38*(R+=n*X),s=(n=(s+=38*(w+=n*B))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),o=(n=o+i+65535)-65536*(i=Math.floor(n/65536)),a=(n=a+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),_=(n=_+i+65535)-65536*(i=Math.floor(n/65536)),s=(n=(s+=i-1+37*(i-1))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),o=(n=o+i+65535)-65536*(i=Math.floor(n/65536)),a=(n=a+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),_=(n=_+i+65535)-65536*(i=Math.floor(n/65536)),s+=i-1+37*(i-1),e[0]=s,e[1]=o,e[2]=a,e[3]=c,e[4]=u,e[5]=l,e[6]=h,e[7]=d,e[8]=f,e[9]=p,e[10]=y,e[11]=m,e[12]=g,e[13]=b,e[14]=v,e[15]=_}function $(e,t){L(e,t,t)}function D(e,r){var n,i=t();for(n=0;n<16;n++)i[n]=r[n];for(n=253;n>=0;n--)$(i,i),2!==n&&4!==n&&L(i,i,r);for(n=0;n<16;n++)e[n]=i[n]}function q(e,r){var n,i=t();for(n=0;n<16;n++)i[n]=r[n];for(n=250;n>=0;n--)$(i,i),1!==n&&L(i,i,r);for(n=0;n<16;n++)e[n]=i[n]}function H(e,r,n){var i,s,o=new Uint8Array(32),a=new Float64Array(80),u=t(),l=t(),h=t(),d=t(),f=t(),p=t();for(s=0;s<31;s++)o[s]=r[s];for(o[31]=127&r[31]|64,o[0]&=248,U(a,n),s=0;s<16;s++)l[s]=a[s],d[s]=u[s]=h[s]=0;for(u[0]=d[0]=1,s=254;s>=0;--s)M(u,l,i=o[s>>>3]>>>(7&s)&1),M(h,d,i),B(f,u,h),F(u,u,h),B(h,l,d),F(l,l,d),$(d,f),$(p,u),L(u,h,u),L(h,l,f),B(f,u,h),F(u,u,h),$(l,u),F(h,d,p),L(u,h,c),B(u,u,d),L(h,h,u),L(u,d,p),L(d,l,a),$(l,f),M(u,l,i),M(h,d,i);for(s=0;s<16;s++)a[s+16]=u[s],a[s+32]=h[s],a[s+48]=l[s],a[s+64]=d[s];var y=a.subarray(32),m=a.subarray(16);return D(y,y),L(m,m,y),N(e,m),0}function K(e,t){return H(e,t,s)}function J(e,t){return n(t,32),K(e,t)}function G(e,t,r){var n=new Uint8Array(32);return H(n,r,t),v(e,i,n,_)}O.prototype.blocks=function(e,t,r){for(var n,i,s,o,a,c,u,l,h,d,f,p,y,m,g,b,v,_,w,E=this.fin?0:2048,P=this.h[0],S=this.h[1],O=this.h[2],A=this.h[3],C=this.h[4],j=this.h[5],x=this.h[6],I=this.h[7],k=this.h[8],M=this.h[9],N=this.r[0],T=this.r[1],R=this.r[2],U=this.r[3],B=this.r[4],F=this.r[5],L=this.r[6],$=this.r[7],D=this.r[8],q=this.r[9];r>=16;)d=h=0,d+=(P+=8191&(n=255&e[t+0]|(255&e[t+1])<<8))*N,d+=(S+=8191&(n>>>13|(i=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*q),d+=(O+=8191&(i>>>10|(s=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*D),d+=(A+=8191&(s>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*$),h=(d+=(C+=8191&(o>>>4|(a=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*L))>>>13,d&=8191,d+=(j+=a>>>1&8191)*(5*F),d+=(x+=8191&(a>>>14|(c=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*B),d+=(I+=8191&(c>>>11|(u=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*U),d+=(k+=8191&(u>>>8|(l=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*R),f=h+=(d+=(M+=l>>>5|E)*(5*T))>>>13,f+=P*T,f+=S*N,f+=O*(5*q),f+=A*(5*D),h=(f+=C*(5*$))>>>13,f&=8191,f+=j*(5*L),f+=x*(5*F),f+=I*(5*B),f+=k*(5*U),h+=(f+=M*(5*R))>>>13,f&=8191,p=h,p+=P*R,p+=S*T,p+=O*N,p+=A*(5*q),h=(p+=C*(5*D))>>>13,p&=8191,p+=j*(5*$),p+=x*(5*L),p+=I*(5*F),p+=k*(5*B),y=h+=(p+=M*(5*U))>>>13,y+=P*U,y+=S*R,y+=O*T,y+=A*N,h=(y+=C*(5*q))>>>13,y&=8191,y+=j*(5*D),y+=x*(5*$),y+=I*(5*L),y+=k*(5*F),m=h+=(y+=M*(5*B))>>>13,m+=P*B,m+=S*U,m+=O*R,m+=A*T,h=(m+=C*N)>>>13,m&=8191,m+=j*(5*q),m+=x*(5*D),m+=I*(5*$),m+=k*(5*L),g=h+=(m+=M*(5*F))>>>13,g+=P*F,g+=S*B,g+=O*U,g+=A*R,h=(g+=C*T)>>>13,g&=8191,g+=j*N,g+=x*(5*q),g+=I*(5*D),g+=k*(5*$),b=h+=(g+=M*(5*L))>>>13,b+=P*L,b+=S*F,b+=O*B,b+=A*U,h=(b+=C*R)>>>13,b&=8191,b+=j*T,b+=x*N,b+=I*(5*q),b+=k*(5*D),v=h+=(b+=M*(5*$))>>>13,v+=P*$,v+=S*L,v+=O*F,v+=A*B,h=(v+=C*U)>>>13,v&=8191,v+=j*R,v+=x*T,v+=I*N,v+=k*(5*q),_=h+=(v+=M*(5*D))>>>13,_+=P*D,_+=S*$,_+=O*L,_+=A*F,h=(_+=C*B)>>>13,_&=8191,_+=j*U,_+=x*R,_+=I*T,_+=k*N,w=h+=(_+=M*(5*q))>>>13,w+=P*q,w+=S*D,w+=O*$,w+=A*L,h=(w+=C*F)>>>13,w&=8191,w+=j*B,w+=x*U,w+=I*R,w+=k*T,P=d=8191&(h=(h=((h+=(w+=M*N)>>>13)<<2)+h|0)+(d&=8191)|0),S=f+=h>>>=13,O=p&=8191,A=y&=8191,C=m&=8191,j=g&=8191,x=b&=8191,I=v&=8191,k=_&=8191,M=w&=8191,t+=16,r-=16;this.h[0]=P,this.h[1]=S,this.h[2]=O,this.h[3]=A,this.h[4]=C,this.h[5]=j,this.h[6]=x,this.h[7]=I,this.h[8]=k,this.h[9]=M},O.prototype.finish=function(e,t){var r,n,i,s,o=new Uint16Array(10);if(this.leftover){for(s=this.leftover,this.buffer[s++]=1;s<16;s++)this.buffer[s]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,s=2;s<10;s++)this.h[s]+=r,r=this.h[s]>>>13,this.h[s]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,s=1;s<10;s++)o[s]=this.h[s]+r,r=o[s]>>>13,o[s]&=8191;for(o[9]-=8192,n=(1^r)-1,s=0;s<10;s++)o[s]&=n;for(n=~n,s=0;s<10;s++)this.h[s]=this.h[s]&n|o[s];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),i=this.h[0]+this.pad[0],this.h[0]=65535&i,s=1;s<8;s++)i=(this.h[s]+this.pad[s]|0)+(i>>>16)|0,this.h[s]=65535&i;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},O.prototype.update=function(e,t,r){var n,i;if(this.leftover){for((i=16-this.leftover)>r&&(i=r),n=0;n<i;n++)this.buffer[this.leftover+n]=e[t+n];if(r-=i,t+=i,this.leftover+=i,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(i=r-r%16,this.blocks(e,t,i),t+=i,r-=i),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=r}};var z=j,V=x,W=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function Y(e,t,r,n){for(var i,s,o,a,c,u,l,h,d,f,p,y,m,g,b,v,_,w,E,P,S,O,A,C,j,x,I=new Int32Array(16),k=new Int32Array(16),M=e[0],N=e[1],T=e[2],R=e[3],U=e[4],B=e[5],F=e[6],L=e[7],$=t[0],D=t[1],q=t[2],H=t[3],K=t[4],J=t[5],G=t[6],z=t[7],V=0;n>=128;){for(E=0;E<16;E++)P=8*E+V,I[E]=r[P+0]<<24|r[P+1]<<16|r[P+2]<<8|r[P+3],k[E]=r[P+4]<<24|r[P+5]<<16|r[P+6]<<8|r[P+7];for(E=0;E<80;E++)if(i=M,s=N,o=T,a=R,c=U,u=B,l=F,d=$,f=D,p=q,y=H,m=K,g=J,b=G,A=65535&(O=z),C=O>>>16,j=65535&(S=L),x=S>>>16,A+=65535&(O=(K>>>14|U<<18)^(K>>>18|U<<14)^(U>>>9|K<<23)),C+=O>>>16,j+=65535&(S=(U>>>14|K<<18)^(U>>>18|K<<14)^(K>>>9|U<<23)),x+=S>>>16,A+=65535&(O=K&J^~K&G),C+=O>>>16,j+=65535&(S=U&B^~U&F),x+=S>>>16,S=W[2*E],A+=65535&(O=W[2*E+1]),C+=O>>>16,j+=65535&S,x+=S>>>16,S=I[E%16],C+=(O=k[E%16])>>>16,j+=65535&S,x+=S>>>16,j+=(C+=(A+=65535&O)>>>16)>>>16,A=65535&(O=w=65535&A|C<<16),C=O>>>16,j=65535&(S=_=65535&j|(x+=j>>>16)<<16),x=S>>>16,A+=65535&(O=($>>>28|M<<4)^(M>>>2|$<<30)^(M>>>7|$<<25)),C+=O>>>16,j+=65535&(S=(M>>>28|$<<4)^($>>>2|M<<30)^($>>>7|M<<25)),x+=S>>>16,C+=(O=$&D^$&q^D&q)>>>16,j+=65535&(S=M&N^M&T^N&T),x+=S>>>16,h=65535&(j+=(C+=(A+=65535&O)>>>16)>>>16)|(x+=j>>>16)<<16,v=65535&A|C<<16,A=65535&(O=y),C=O>>>16,j=65535&(S=a),x=S>>>16,C+=(O=w)>>>16,j+=65535&(S=_),x+=S>>>16,N=i,T=s,R=o,U=a=65535&(j+=(C+=(A+=65535&O)>>>16)>>>16)|(x+=j>>>16)<<16,B=c,F=u,L=l,M=h,D=d,q=f,H=p,K=y=65535&A|C<<16,J=m,G=g,z=b,$=v,E%16==15)for(P=0;P<16;P++)S=I[P],A=65535&(O=k[P]),C=O>>>16,j=65535&S,x=S>>>16,S=I[(P+9)%16],A+=65535&(O=k[(P+9)%16]),C+=O>>>16,j+=65535&S,x+=S>>>16,_=I[(P+1)%16],A+=65535&(O=((w=k[(P+1)%16])>>>1|_<<31)^(w>>>8|_<<24)^(w>>>7|_<<25)),C+=O>>>16,j+=65535&(S=(_>>>1|w<<31)^(_>>>8|w<<24)^_>>>7),x+=S>>>16,_=I[(P+14)%16],C+=(O=((w=k[(P+14)%16])>>>19|_<<13)^(_>>>29|w<<3)^(w>>>6|_<<26))>>>16,j+=65535&(S=(_>>>19|w<<13)^(w>>>29|_<<3)^_>>>6),x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,I[P]=65535&j|x<<16,k[P]=65535&A|C<<16;A=65535&(O=$),C=O>>>16,j=65535&(S=M),x=S>>>16,S=e[0],C+=(O=t[0])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[0]=M=65535&j|x<<16,t[0]=$=65535&A|C<<16,A=65535&(O=D),C=O>>>16,j=65535&(S=N),x=S>>>16,S=e[1],C+=(O=t[1])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[1]=N=65535&j|x<<16,t[1]=D=65535&A|C<<16,A=65535&(O=q),C=O>>>16,j=65535&(S=T),x=S>>>16,S=e[2],C+=(O=t[2])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[2]=T=65535&j|x<<16,t[2]=q=65535&A|C<<16,A=65535&(O=H),C=O>>>16,j=65535&(S=R),x=S>>>16,S=e[3],C+=(O=t[3])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[3]=R=65535&j|x<<16,t[3]=H=65535&A|C<<16,A=65535&(O=K),C=O>>>16,j=65535&(S=U),x=S>>>16,S=e[4],C+=(O=t[4])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[4]=U=65535&j|x<<16,t[4]=K=65535&A|C<<16,A=65535&(O=J),C=O>>>16,j=65535&(S=B),x=S>>>16,S=e[5],C+=(O=t[5])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[5]=B=65535&j|x<<16,t[5]=J=65535&A|C<<16,A=65535&(O=G),C=O>>>16,j=65535&(S=F),x=S>>>16,S=e[6],C+=(O=t[6])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[6]=F=65535&j|x<<16,t[6]=G=65535&A|C<<16,A=65535&(O=z),C=O>>>16,j=65535&(S=L),x=S>>>16,S=e[7],C+=(O=t[7])>>>16,j+=65535&S,x+=S>>>16,x+=(j+=(C+=(A+=65535&O)>>>16)>>>16)>>>16,e[7]=L=65535&j|x<<16,t[7]=z=65535&A|C<<16,V+=128,n-=128}return n}function X(e,t,r){var n,i=new Int32Array(8),s=new Int32Array(8),o=new Uint8Array(256),a=r;for(i[0]=1779033703,i[1]=3144134277,i[2]=1013904242,i[3]=2773480762,i[4]=1359893119,i[5]=2600822924,i[6]=528734635,i[7]=1541459225,s[0]=4089235720,s[1]=2227873595,s[2]=4271175723,s[3]=1595750129,s[4]=2917565137,s[5]=725511199,s[6]=4215389547,s[7]=327033209,Y(i,s,t,r),r%=128,n=0;n<r;n++)o[n]=t[a-r+n];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,p(o,r-8,a/536870912|0,a<<3),Y(i,s,o,r),n=0;n<8;n++)p(e,8*n,i[n],s[n]);return 0}function Q(e,r){var n=t(),i=t(),s=t(),o=t(),a=t(),c=t(),u=t(),h=t(),d=t();F(n,e[1],e[0]),F(d,r[1],r[0]),L(n,n,d),B(i,e[0],e[1]),B(d,r[0],r[1]),L(i,i,d),L(s,e[3],r[3]),L(s,s,l),L(o,e[2],r[2]),B(o,o,o),F(a,i,n),F(c,o,s),B(u,o,s),B(h,i,n),L(e[0],a,c),L(e[1],h,u),L(e[2],u,c),L(e[3],a,h)}function Z(e,t,r){var n;for(n=0;n<4;n++)M(e[n],t[n],r)}function ee(e,r){var n=t(),i=t(),s=t();D(s,r[2]),L(n,r[0],s),L(i,r[1],s),N(e,i),e[31]^=R(n)<<7}function te(e,t,r){var n,i;for(I(e[0],o),I(e[1],a),I(e[2],a),I(e[3],o),i=255;i>=0;--i)Z(e,t,n=r[i/8|0]>>(7&i)&1),Q(t,e),Q(e,e),Z(e,t,n)}function re(e,r){var n=[t(),t(),t(),t()];I(n[0],h),I(n[1],d),I(n[2],a),L(n[3],h,d),te(e,n,r)}function ne(e,r,i){var s,o=new Uint8Array(64),a=[t(),t(),t(),t()];for(i||n(r,32),X(o,r,32),o[0]&=248,o[31]&=127,o[31]|=64,re(a,o),ee(e,a),s=0;s<32;s++)r[s+32]=e[s];return 0}var ie=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function se(e,t){var r,n,i,s;for(n=63;n>=32;--n){for(r=0,i=n-32,s=n-12;i<s;++i)t[i]+=r-16*t[n]*ie[i-(n-32)],r=Math.floor((t[i]+128)/256),t[i]-=256*r;t[i]+=r,t[n]=0}for(r=0,i=0;i<32;i++)t[i]+=r-(t[31]>>4)*ie[i],r=t[i]>>8,t[i]&=255;for(i=0;i<32;i++)t[i]-=r*ie[i];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function oe(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;se(e,r)}function ae(e,r,n,i){var s,o,a=new Uint8Array(64),c=new Uint8Array(64),u=new Uint8Array(64),l=new Float64Array(64),h=[t(),t(),t(),t()];X(a,i,32),a[0]&=248,a[31]&=127,a[31]|=64;var d=n+64;for(s=0;s<n;s++)e[64+s]=r[s];for(s=0;s<32;s++)e[32+s]=a[32+s];for(X(u,e.subarray(32),n+32),oe(u),re(h,u),ee(e,h),s=32;s<64;s++)e[s]=i[s];for(X(c,e,n+64),oe(c),s=0;s<64;s++)l[s]=0;for(s=0;s<32;s++)l[s]=u[s];for(s=0;s<32;s++)for(o=0;o<32;o++)l[s+o]+=c[s]*a[o];return se(e.subarray(32),l),d}function ce(e,r,n,i){var s,c=new Uint8Array(32),l=new Uint8Array(64),h=[t(),t(),t(),t()],d=[t(),t(),t(),t()];if(n<64)return-1;if(function(e,r){var n=t(),i=t(),s=t(),c=t(),l=t(),h=t(),d=t();return I(e[2],a),U(e[1],r),$(s,e[1]),L(c,s,u),F(s,s,e[2]),B(c,e[2],c),$(l,c),$(h,l),L(d,h,l),L(n,d,s),L(n,n,c),q(n,n),L(n,n,s),L(n,n,c),L(n,n,c),L(e[0],n,c),$(i,e[0]),L(i,i,c),T(i,s)&&L(e[0],e[0],f),$(i,e[0]),L(i,i,c),T(i,s)?-1:(R(e[0])===r[31]>>7&&F(e[0],o,e[0]),L(e[3],e[0],e[1]),0)}(d,i))return-1;for(s=0;s<n;s++)e[s]=r[s];for(s=0;s<32;s++)e[s+32]=i[s];if(X(l,e,n),oe(l),te(h,d,l),re(d,r.subarray(32)),Q(h,d),ee(c,h),n-=64,g(r,0,c,0)){for(s=0;s<n;s++)e[s]=0;return-1}for(s=0;s<n;s++)e[s]=r[s+64];return n}var ue=64,le=32,he=64;function de(e,t){if(32!==e.length)throw new Error("bad key size");if(24!==t.length)throw new Error("bad nonce size")}function fe(){for(var e=0;e<arguments.length;e++)if(!(arguments[e]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function pe(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:v,crypto_stream_xor:S,crypto_stream:P,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:E,crypto_onetimeauth:A,crypto_onetimeauth_verify:C,crypto_verify_16:m,crypto_verify_32:g,crypto_secretbox:j,crypto_secretbox_open:x,crypto_scalarmult:H,crypto_scalarmult_base:K,crypto_box_beforenm:G,crypto_box_afternm:z,crypto_box:function(e,t,r,n,i,s){var o=new Uint8Array(32);return G(o,i,s),z(e,t,r,n,o)},crypto_box_open:function(e,t,r,n,i,s){var o=new Uint8Array(32);return G(o,i,s),V(e,t,r,n,o)},crypto_box_keypair:J,crypto_hash:X,crypto_sign:ae,crypto_sign_keypair:ne,crypto_sign_open:ce,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:ue,crypto_sign_PUBLICKEYBYTES:le,crypto_sign_SECRETKEYBYTES:he,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:t,D:u,L:ie,pack25519:N,unpack25519:U,M:L,A:B,S:$,Z:F,pow2523:q,add:Q,set25519:I,modL:se,scalarmult:te,scalarbase:re},e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,r){fe(e,t,r),de(r,t);for(var n=new Uint8Array(32+e.length),i=new Uint8Array(n.length),s=0;s<e.length;s++)n[s+32]=e[s];return j(i,n,n.length,t,r),i.subarray(16)},e.secretbox.open=function(e,t,r){fe(e,t,r),de(r,t);for(var n=new Uint8Array(16+e.length),i=new Uint8Array(n.length),s=0;s<e.length;s++)n[s+16]=e[s];return n.length<32||0!==x(i,n,n.length,t,r)?null:i.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(fe(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var r=new Uint8Array(32);return H(r,e,t),r},e.scalarMult.base=function(e){if(fe(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return K(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,n,i){var s=e.box.before(n,i);return e.secretbox(t,r,s)},e.box.before=function(e,t){fe(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return G(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,n,i){var s=e.box.before(n,i);return e.secretbox.open(t,r,s)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return J(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(fe(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return K(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(fe(e,t),t.length!==he)throw new Error("bad secret key size");var r=new Uint8Array(ue+e.length);return ae(r,e,e.length,t),r},e.sign.open=function(e,t){if(fe(e,t),t.length!==le)throw new Error("bad public key size");var r=new Uint8Array(e.length),n=ce(r,e,e.length,t);if(n<0)return null;for(var i=new Uint8Array(n),s=0;s<i.length;s++)i[s]=r[s];return i},e.sign.detached=function(t,r){for(var n=e.sign(t,r),i=new Uint8Array(ue),s=0;s<i.length;s++)i[s]=n[s];return i},e.sign.detached.verify=function(e,t,r){if(fe(e,t,r),t.length!==ue)throw new Error("bad signature size");if(r.length!==le)throw new Error("bad public key size");var n,i=new Uint8Array(ue+e.length),s=new Uint8Array(ue+e.length);for(n=0;n<ue;n++)i[n]=t[n];for(n=0;n<e.length;n++)i[n+ue]=e[n];return ce(s,i,i.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(le),t=new Uint8Array(he);return ne(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(fe(e),e.length!==he)throw new Error("bad secret key size");for(var t=new Uint8Array(le),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(fe(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(le),r=new Uint8Array(he),n=0;n<32;n++)r[n]=e[n];return ne(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=le,e.sign.secretKeyLength=he,e.sign.seedLength=32,e.sign.signatureLength=ue,e.hash=function(e){fe(e);var t=new Uint8Array(64);return X(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return fe(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===y(e,0,t,0,e.length)},e.setPRNG=function(e){n=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;t&&t.getRandomValues?e.setPRNG((function(e,r){var n,i=new Uint8Array(r);for(n=0;n<r;n+=65536)t.getRandomValues(i.subarray(n,n+Math.min(r-n,65536)));for(n=0;n<r;n++)e[n]=i[n];pe(i)})):(t=r(3938))&&t.randomBytes&&e.setPRNG((function(e,r){var n,i=t.randomBytes(r);for(n=0;n<r;n++)e[n]=i[n];pe(i)}))}()}(e.exports?e.exports:self.nacl=self.nacl||{})},8946:e=>{e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},6096:(e,t,r)=>{"use strict";var n=r(9462),i=r(7136),s=r(1792),o=r(7485);function a(e){return e.call.bind(e)}var c="undefined"!=typeof BigInt,u="undefined"!=typeof Symbol,l=a(Object.prototype.toString),h=a(Number.prototype.valueOf),d=a(String.prototype.valueOf),f=a(Boolean.prototype.valueOf);if(c)var p=a(BigInt.prototype.valueOf);if(u)var y=a(Symbol.prototype.valueOf);function m(e,t){if("object"!=typeof e)return!1;try{return t(e),!0}catch(e){return!1}}function g(e){return"[object Map]"===l(e)}function b(e){return"[object Set]"===l(e)}function v(e){return"[object WeakMap]"===l(e)}function _(e){return"[object WeakSet]"===l(e)}function w(e){return"[object ArrayBuffer]"===l(e)}function E(e){return"undefined"!=typeof ArrayBuffer&&(w.working?w(e):e instanceof ArrayBuffer)}function P(e){return"[object DataView]"===l(e)}function S(e){return"undefined"!=typeof DataView&&(P.working?P(e):e instanceof DataView)}t.isArgumentsObject=n,t.isGeneratorFunction=i,t.isTypedArray=o,t.isPromise=function(e){return"undefined"!=typeof Promise&&e instanceof Promise||null!==e&&"object"==typeof e&&"function"==typeof e.then&&"function"==typeof e.catch},t.isArrayBufferView=function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):o(e)||S(e)},t.isUint8Array=function(e){return"Uint8Array"===s(e)},t.isUint8ClampedArray=function(e){return"Uint8ClampedArray"===s(e)},t.isUint16Array=function(e){return"Uint16Array"===s(e)},t.isUint32Array=function(e){return"Uint32Array"===s(e)},t.isInt8Array=function(e){return"Int8Array"===s(e)},t.isInt16Array=function(e){return"Int16Array"===s(e)},t.isInt32Array=function(e){return"Int32Array"===s(e)},t.isFloat32Array=function(e){return"Float32Array"===s(e)},t.isFloat64Array=function(e){return"Float64Array"===s(e)},t.isBigInt64Array=function(e){return"BigInt64Array"===s(e)},t.isBigUint64Array=function(e){return"BigUint64Array"===s(e)},g.working="undefined"!=typeof Map&&g(new Map),t.isMap=function(e){return"undefined"!=typeof Map&&(g.working?g(e):e instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),t.isSet=function(e){return"undefined"!=typeof Set&&(b.working?b(e):e instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),t.isWeakMap=function(e){return"undefined"!=typeof WeakMap&&(v.working?v(e):e instanceof WeakMap)},_.working="undefined"!=typeof WeakSet&&_(new WeakSet),t.isWeakSet=function(e){return _(e)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),t.isArrayBuffer=E,P.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&P(new DataView(new ArrayBuffer(1),0,1)),t.isDataView=S;var O="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function A(e){return"[object SharedArrayBuffer]"===l(e)}function C(e){return void 0!==O&&(void 0===A.working&&(A.working=A(new O)),A.working?A(e):e instanceof O)}function j(e){return m(e,h)}function x(e){return m(e,d)}function I(e){return m(e,f)}function k(e){return c&&m(e,p)}function M(e){return u&&m(e,y)}t.isSharedArrayBuffer=C,t.isAsyncFunction=function(e){return"[object AsyncFunction]"===l(e)},t.isMapIterator=function(e){return"[object Map Iterator]"===l(e)},t.isSetIterator=function(e){return"[object Set Iterator]"===l(e)},t.isGeneratorObject=function(e){return"[object Generator]"===l(e)},t.isWebAssemblyCompiledModule=function(e){return"[object WebAssembly.Module]"===l(e)},t.isNumberObject=j,t.isStringObject=x,t.isBooleanObject=I,t.isBigIntObject=k,t.isSymbolObject=M,t.isBoxedPrimitive=function(e){return j(e)||x(e)||I(e)||k(e)||M(e)},t.isAnyArrayBuffer=function(e){return"undefined"!=typeof Uint8Array&&(E(e)||C(e))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(e){Object.defineProperty(t,e,{enumerable:!1,value:function(){throw new Error(e+" is not supported in userland")}})}))},911:(e,t,r)=>{var n=Object.getOwnPropertyDescriptors||function(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++)r[t[n]]=Object.getOwnPropertyDescriptor(e,t[n]);return r},i=/%[sdj%]/g;t.format=function(e){if(!b(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(c(arguments[r]));return t.join(" ")}r=1;for(var n=arguments,s=n.length,o=String(e).replace(i,(function(e){if("%%"===e)return"%";if(r>=s)return e;switch(e){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(e){return"[Circular]"}default:return e}})),a=n[r];r<s;a=n[++r])m(a)||!w(a)?o+=" "+a:o+=" "+c(a);return o},t.deprecate=function(e,r){if("undefined"!=typeof process&&!0===process.noDeprecation)return e;if("undefined"==typeof process)return function(){return t.deprecate(e,r).apply(this,arguments)};var n=!1;return function(){if(!n){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),n=!0}return e.apply(this,arguments)}};var s={},o=/^$/;if(process.env.NODE_DEBUG){var a=process.env.NODE_DEBUG;a=a.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),o=new RegExp("^"+a+"$","i")}function c(e,r){var n={seen:[],stylize:l};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),y(r)?n.showHidden=r:r&&t._extend(n,r),v(n.showHidden)&&(n.showHidden=!1),v(n.depth)&&(n.depth=2),v(n.colors)&&(n.colors=!1),v(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),h(n,e,n.depth)}function u(e,t){var r=c.styles[t];return r?"["+c.colors[r][0]+"m"+e+"["+c.colors[r][1]+"m":e}function l(e,t){return e}function h(e,r,n){if(e.customInspect&&r&&S(r.inspect)&&r.inspect!==t.inspect&&(!r.constructor||r.constructor.prototype!==r)){var i=r.inspect(n,e);return b(i)||(i=h(e,i,n)),i}var s=function(e,t){if(v(t))return e.stylize("undefined","undefined");if(b(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return g(t)?e.stylize(""+t,"number"):y(t)?e.stylize(""+t,"boolean"):m(t)?e.stylize("null","null"):void 0}(e,r);if(s)return s;var o=Object.keys(r),a=function(e){var t={};return e.forEach((function(e,r){t[e]=!0})),t}(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),P(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return d(r);if(0===o.length){if(S(r)){var c=r.name?": "+r.name:"";return e.stylize("[Function"+c+"]","special")}if(_(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(E(r))return e.stylize(Date.prototype.toString.call(r),"date");if(P(r))return d(r)}var u,l="",w=!1,O=["{","}"];return p(r)&&(w=!0,O=["[","]"]),S(r)&&(l=" [Function"+(r.name?": "+r.name:"")+"]"),_(r)&&(l=" "+RegExp.prototype.toString.call(r)),E(r)&&(l=" "+Date.prototype.toUTCString.call(r)),P(r)&&(l=" "+d(r)),0!==o.length||w&&0!=r.length?n<0?_(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),u=w?function(e,t,r,n,i){for(var s=[],o=0,a=t.length;o<a;++o)j(t,String(o))?s.push(f(e,t,r,n,String(o),!0)):s.push("");return i.forEach((function(i){i.match(/^\d+$/)||s.push(f(e,t,r,n,i,!0))})),s}(e,r,n,a,o):o.map((function(t){return f(e,r,n,a,t,w)})),e.seen.pop(),function(e,t,r){return e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(u,l,O)):O[0]+l+O[1]}function d(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,r,n,i,s){var o,a,c;if((c=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(a=e.stylize("[Setter]","special")),j(n,i)||(o="["+i+"]"),a||(e.seen.indexOf(c.value)<0?(a=m(r)?h(e,c.value,null):h(e,c.value,r-1)).indexOf("\n")>-1&&(a=s?a.split("\n").map((function(e){return"  "+e})).join("\n").slice(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),v(o)){if(s&&i.match(/^\d+$/))return a;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.slice(1,-1),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+a}function p(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function m(e){return null===e}function g(e){return"number"==typeof e}function b(e){return"string"==typeof e}function v(e){return void 0===e}function _(e){return w(e)&&"[object RegExp]"===O(e)}function w(e){return"object"==typeof e&&null!==e}function E(e){return w(e)&&"[object Date]"===O(e)}function P(e){return w(e)&&("[object Error]"===O(e)||e instanceof Error)}function S(e){return"function"==typeof e}function O(e){return Object.prototype.toString.call(e)}function A(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(e=e.toUpperCase(),!s[e])if(o.test(e)){var r=process.pid;s[e]=function(){var n=t.format.apply(t,arguments);console.error("%s %d: %s",e,r,n)}}else s[e]=function(){};return s[e]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.types=r(6096),t.isArray=p,t.isBoolean=y,t.isNull=m,t.isNullOrUndefined=function(e){return null==e},t.isNumber=g,t.isString=b,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=v,t.isRegExp=_,t.types.isRegExp=_,t.isObject=w,t.isDate=E,t.types.isDate=E,t.isError=P,t.types.isNativeError=P,t.isFunction=S,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=r(8946);var C=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function j(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){var e,r;console.log("%s - %s",(r=[A((e=new Date).getHours()),A(e.getMinutes()),A(e.getSeconds())].join(":"),[e.getDate(),C[e.getMonth()],r].join(" ")),t.format.apply(t,arguments))},t.inherits=r(7483),t._extend=function(e,t){if(!t||!w(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e};var x="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function I(e,t){if(!e){var r=new Error("Promise was rejected with a falsy value");r.reason=e,e=r}return t(e)}t.promisify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');if(x&&e[x]){var t;if("function"!=typeof(t=e[x]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(t,x,{value:t,enumerable:!1,writable:!1,configurable:!0}),t}function t(){for(var t,r,n=new Promise((function(e,n){t=e,r=n})),i=[],s=0;s<arguments.length;s++)i.push(arguments[s]);i.push((function(e,n){e?r(e):t(n)}));try{e.apply(this,i)}catch(e){r(e)}return n}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),x&&Object.defineProperty(t,x,{value:t,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(t,n(e))},t.promisify.custom=x,t.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function t(){for(var t=[],r=0;r<arguments.length;r++)t.push(arguments[r]);var n=t.pop();if("function"!=typeof n)throw new TypeError("The last argument must be of type Function");var i=this,s=function(){return n.apply(i,arguments)};e.apply(this,t).then((function(e){process.nextTick(s.bind(null,null,e))}),(function(e){process.nextTick(I.bind(null,e,s))}))}return Object.setPrototypeOf(t,Object.getPrototypeOf(e)),Object.defineProperties(t,n(e)),t}},1792:(e,t,r)=>{"use strict";var n=r(98),i=r(3719),s=r(5592),o=r(2864),a=r(8158),c=o("Object.prototype.toString"),u=r(3342)(),l="undefined"==typeof globalThis?r.g:globalThis,h=i(),d=o("String.prototype.slice"),f=Object.getPrototypeOf,p=o("Array.prototype.indexOf",!0)||function(e,t){for(var r=0;r<e.length;r+=1)if(e[r]===t)return r;return-1},y={__proto__:null};n(h,u&&a&&f?function(e){var t=new l[e];if(Symbol.toStringTag in t){var r=f(t),n=a(r,Symbol.toStringTag);if(!n){var i=f(r);n=a(i,Symbol.toStringTag)}y["$"+e]=s(n.get)}}:function(e){var t=new l[e];y["$"+e]=s(t.slice)}),e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!u){var t=d(c(e),8,-1);return p(h,t)>-1?t:"Object"===t&&function(e){var t=!1;return n(y,(function(r,n){if(!t)try{r(e),t=d(n,1)}catch(e){}})),t}(e)}return a?function(e){var t=!1;return n(y,(function(r,n){if(!t)try{"$"+r(e)===n&&(t=d(n,1))}catch(e){}})),t}(e):null}},3938:()=>{},3719:(e,t,r)=>{"use strict";var n=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],i="undefined"==typeof globalThis?r.g:globalThis;e.exports=function(){for(var e=[],t=0;t<n.length;t++)"function"==typeof i[n[t]]&&(e[e.length]=n[t]);return e}},3859:(e,t,r)=>{"use strict";e.exports=r(2787)}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r(209)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,